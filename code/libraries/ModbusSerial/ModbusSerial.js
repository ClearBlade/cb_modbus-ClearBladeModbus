/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 9754:
/***/ (function(module) {

  module.exports = cb_node.dgram;

  /***/ }),
  
  /***/ 7009:
  /***/ (function(module) {
  
  module.exports = cb_node.net;
  
  /***/ }),
  
  /***/ 7844:
  /***/ (function(module) {
  
  var process = {
    __FAKE_PROCESS__: true,
    version: "v0.10",
    nextTick: function nextTick(cb) {
      setTimeout(cb, 0);
    },
    env: {},
    stderr: {
      fd: 2
    }
  }; // monkey patch Object.prototype.toString
  
  var originalToString = Object.prototype.toString;
  
  Object.prototype.toString = function () {
    if (this.__FAKE_PROCESS__) {
      // some libraries (e.g., axios) do a check like Object.prototype.toString.call(process) === '[object process]'
      // in order to determine if the library is running in node or a browser
      // we want these libraries to think they're running in node so that they use node built-ins (e.g., http) which get polyfilled by us
      return "[object process]";
    }
  
    return originalToString.call(this);
  };
  
  module.exports = process;
  
  /***/ }),
  
  /***/ 3603:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  __webpack_require__(498);
  
  __webpack_require__(6458);
  
  __webpack_require__(6255);
  
  __webpack_require__(3925);
  
  __webpack_require__(3792);
  
  __webpack_require__(1440);
  
  __webpack_require__(8131);
  
  __webpack_require__(174);
  
  __webpack_require__(4958);
  
  __webpack_require__(9731);
  
  __webpack_require__(5381);
  
  __webpack_require__(1714);
  
  __webpack_require__(8778);
  
  __webpack_require__(2708);
  
  /***/ }),
  
  /***/ 498:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(3838);
  
  __webpack_require__(34);
  
  __webpack_require__(4781);
  
  __webpack_require__(8677);
  
  __webpack_require__(2561);
  
  __webpack_require__(6362);
  
  __webpack_require__(8934);
  
  __webpack_require__(5003);
  
  __webpack_require__(5966);
  
  __webpack_require__(8524);
  
  __webpack_require__(7628);
  
  __webpack_require__(6170);
  
  __webpack_require__(9628);
  
  __webpack_require__(1343);
  
  __webpack_require__(5458);
  
  __webpack_require__(7454);
  
  __webpack_require__(5715);
  
  __webpack_require__(7823);
  
  __webpack_require__(4027);
  
  __webpack_require__(3434);
  
  __webpack_require__(3395);
  
  __webpack_require__(6950);
  
  __webpack_require__(3071);
  
  __webpack_require__(2142);
  
  __webpack_require__(96);
  
  __webpack_require__(3695);
  
  __webpack_require__(1116);
  
  __webpack_require__(5313);
  
  __webpack_require__(5951);
  
  __webpack_require__(5242);
  
  __webpack_require__(705);
  
  __webpack_require__(2948);
  
  __webpack_require__(2174);
  
  __webpack_require__(2682);
  
  __webpack_require__(7289);
  
  __webpack_require__(9041);
  
  __webpack_require__(1326);
  
  __webpack_require__(5590);
  
  __webpack_require__(5794);
  
  __webpack_require__(8929);
  
  __webpack_require__(8107);
  
  __webpack_require__(4675);
  
  __webpack_require__(3794);
  
  __webpack_require__(2753);
  
  __webpack_require__(1019);
  
  __webpack_require__(4228);
  
  __webpack_require__(8179);
  
  __webpack_require__(2011);
  
  __webpack_require__(1034);
  
  __webpack_require__(533);
  
  __webpack_require__(2386);
  
  __webpack_require__(1050);
  
  __webpack_require__(9275);
  
  __webpack_require__(2236);
  
  __webpack_require__(9986);
  
  __webpack_require__(8687);
  
  __webpack_require__(393);
  
  __webpack_require__(9321);
  
  __webpack_require__(7661);
  
  __webpack_require__(7779);
  
  __webpack_require__(6091);
  
  __webpack_require__(6879);
  
  __webpack_require__(2038);
  
  __webpack_require__(4392);
  
  __webpack_require__(6676);
  
  __webpack_require__(4321);
  
  __webpack_require__(8400);
  
  __webpack_require__(5690);
  
  __webpack_require__(7422);
  
  __webpack_require__(1493);
  
  __webpack_require__(5883);
  
  __webpack_require__(5267);
  
  __webpack_require__(7615);
  
  __webpack_require__(1269);
  
  __webpack_require__(3015);
  
  __webpack_require__(5909);
  
  __webpack_require__(8720);
  
  __webpack_require__(2711);
  
  __webpack_require__(6381);
  
  __webpack_require__(1628);
  
  __webpack_require__(8912);
  
  __webpack_require__(3938);
  
  __webpack_require__(4619);
  
  __webpack_require__(6119);
  
  __webpack_require__(7346);
  
  __webpack_require__(4416);
  
  __webpack_require__(9508);
  
  __webpack_require__(8357);
  
  __webpack_require__(7315);
  
  __webpack_require__(2139);
  
  __webpack_require__(8707);
  
  __webpack_require__(9519);
  
  __webpack_require__(8499);
  
  __webpack_require__(5337);
  
  __webpack_require__(1185);
  
  __webpack_require__(7003);
  
  __webpack_require__(8225);
  
  __webpack_require__(5462);
  
  __webpack_require__(4437);
  
  __webpack_require__(8735);
  
  __webpack_require__(1733);
  
  __webpack_require__(487);
  
  __webpack_require__(6146);
  
  __webpack_require__(8996);
  
  __webpack_require__(6232);
  
  __webpack_require__(1958);
  
  __webpack_require__(873);
  
  __webpack_require__(4157);
  
  __webpack_require__(9304);
  
  __webpack_require__(9237);
  
  __webpack_require__(6551);
  
  __webpack_require__(8535);
  
  __webpack_require__(1164);
  
  __webpack_require__(5076);
  
  __webpack_require__(1751);
  
  __webpack_require__(44);
  
  __webpack_require__(517);
  
  __webpack_require__(5295);
  
  __webpack_require__(6654);
  
  __webpack_require__(6736);
  
  __webpack_require__(7258);
  
  __webpack_require__(3618);
  
  __webpack_require__(6056);
  
  __webpack_require__(290);
  
  __webpack_require__(1876);
  
  __webpack_require__(5428);
  
  __webpack_require__(7167);
  
  __webpack_require__(2133);
  
  __webpack_require__(3451);
  
  __webpack_require__(1368);
  
  __webpack_require__(2329);
  
  __webpack_require__(3759);
  
  __webpack_require__(6681);
  
  __webpack_require__(6712);
  
  __webpack_require__(2686);
  
  __webpack_require__(949);
  
  __webpack_require__(8204);
  
  __webpack_require__(7021);
  
  module.exports = __webpack_require__(195);
  
  /***/ }),
  
  /***/ 6255:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(7197);
  
  module.exports = __webpack_require__(195).Array.flatMap;
  
  /***/ }),
  
  /***/ 6458:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(6924);
  
  module.exports = __webpack_require__(195).Array.includes;
  
  /***/ }),
  
  /***/ 5381:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(1515);
  
  module.exports = __webpack_require__(195).Object.entries;
  
  /***/ }),
  
  /***/ 4958:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(3110);
  
  module.exports = __webpack_require__(195).Object.getOwnPropertyDescriptors;
  
  /***/ }),
  
  /***/ 9731:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(1171);
  
  module.exports = __webpack_require__(195).Object.values;
  
  /***/ }),
  
  /***/ 1714:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  __webpack_require__(9304);
  
  __webpack_require__(4979);
  
  module.exports = __webpack_require__(195).Promise["finally"];
  
  /***/ }),
  
  /***/ 3792:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(4109);
  
  module.exports = __webpack_require__(195).String.padEnd;
  
  /***/ }),
  
  /***/ 3925:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(7834);
  
  module.exports = __webpack_require__(195).String.padStart;
  
  /***/ }),
  
  /***/ 8131:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(6241);
  
  module.exports = __webpack_require__(195).String.trimRight;
  
  /***/ }),
  
  /***/ 1440:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(749);
  
  module.exports = __webpack_require__(195).String.trimLeft;
  
  /***/ }),
  
  /***/ 174:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(1445);
  
  module.exports = (__webpack_require__(5634).f)('asyncIterator');
  
  /***/ }),
  
  /***/ 1110:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(2491);
  
  module.exports = __webpack_require__(8268).global;
  
  /***/ }),
  
  /***/ 2990:
  /***/ (function(module) {
  
  module.exports = function (it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };
  
  /***/ }),
  
  /***/ 830:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var isObject = __webpack_require__(11);
  
  module.exports = function (it) {
    if (!isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
  };
  
  /***/ }),
  
  /***/ 8268:
  /***/ (function(module) {
  
  var core = module.exports = {
    version: '2.6.12'
  };
  if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
  
  /***/ }),
  
  /***/ 6921:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // optional / simple context binding
  var aFunction = __webpack_require__(2990);
  
  module.exports = function (fn, that, length) {
    aFunction(fn);
    if (that === undefined) return fn;
  
    switch (length) {
      case 1:
        return function (a) {
          return fn.call(that, a);
        };
  
      case 2:
        return function (a, b) {
          return fn.call(that, a, b);
        };
  
      case 3:
        return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
    }
  
    return function
      /* ...args */
    () {
      return fn.apply(that, arguments);
    };
  };
  
  /***/ }),
  
  /***/ 1028:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // Thank's IE8 for his funny defineProperty
  module.exports = !__webpack_require__(2379)(function () {
    return Object.defineProperty({}, 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  });
  
  /***/ }),
  
  /***/ 1647:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var isObject = __webpack_require__(11);
  
  var document = (__webpack_require__(9801).document); // typeof document.createElement is 'object' in old IE
  
  
  var is = isObject(document) && isObject(document.createElement);
  
  module.exports = function (it) {
    return is ? document.createElement(it) : {};
  };
  
  /***/ }),
  
  /***/ 4764:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var global = __webpack_require__(9801);
  
  var core = __webpack_require__(8268);
  
  var ctx = __webpack_require__(6921);
  
  var hide = __webpack_require__(7462);
  
  var has = __webpack_require__(4980);
  
  var PROTOTYPE = 'prototype';
  
  var $export = function $export(type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var IS_WRAP = type & $export.W;
    var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
    var expProto = exports[PROTOTYPE];
    var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
    var key, own, out;
    if (IS_GLOBAL) source = name;
  
    for (key in source) {
      // contains in native
      own = !IS_FORCED && target && target[key] !== undefined;
      if (own && has(exports, key)) continue; // export native or passed
  
      out = own ? target[key] : source[key]; // prevent global pollution for namespaces
  
      exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] // bind timers to global for call from export context
      : IS_BIND && own ? ctx(out, global) // wrap global constructors for prevent change them in library
      : IS_WRAP && target[key] == out ? function (C) {
        var F = function F(a, b, c) {
          if (this instanceof C) {
            switch (arguments.length) {
              case 0:
                return new C();
  
              case 1:
                return new C(a);
  
              case 2:
                return new C(a, b);
            }
  
            return new C(a, b, c);
          }
  
          return C.apply(this, arguments);
        };
  
        F[PROTOTYPE] = C[PROTOTYPE];
        return F; // make static versions for prototype methods
      }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
  
      if (IS_PROTO) {
        (exports.virtual || (exports.virtual = {}))[key] = out; // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
  
        if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
      }
    }
  }; // type bitmap
  
  
  $export.F = 1; // forced
  
  $export.G = 2; // global
  
  $export.S = 4; // static
  
  $export.P = 8; // proto
  
  $export.B = 16; // bind
  
  $export.W = 32; // wrap
  
  $export.U = 64; // safe
  
  $export.R = 128; // real proto method for `library`
  
  module.exports = $export;
  
  /***/ }),
  
  /***/ 2379:
  /***/ (function(module) {
  
  module.exports = function (exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };
  
  /***/ }),
  
  /***/ 9801:
  /***/ (function(module) {
  
  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
  : Function('return this')();
  if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
  
  /***/ }),
  
  /***/ 4980:
  /***/ (function(module) {
  
  var hasOwnProperty = {}.hasOwnProperty;
  
  module.exports = function (it, key) {
    return hasOwnProperty.call(it, key);
  };
  
  /***/ }),
  
  /***/ 7462:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var dP = __webpack_require__(1257);
  
  var createDesc = __webpack_require__(1501);
  
  module.exports = __webpack_require__(1028) ? function (object, key, value) {
    return dP.f(object, key, createDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };
  
  /***/ }),
  
  /***/ 2536:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  module.exports = !__webpack_require__(1028) && !__webpack_require__(2379)(function () {
    return Object.defineProperty(__webpack_require__(1647)('div'), 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  });
  
  /***/ }),
  
  /***/ 11:
  /***/ (function(module) {
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  module.exports = function (it) {
    return _typeof(it) === 'object' ? it !== null : typeof it === 'function';
  };
  
  /***/ }),
  
  /***/ 1257:
  /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
  
  var anObject = __webpack_require__(830);
  
  var IE8_DOM_DEFINE = __webpack_require__(2536);
  
  var toPrimitive = __webpack_require__(2434);
  
  var dP = Object.defineProperty;
  exports.f = __webpack_require__(1028) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPrimitive(P, true);
    anObject(Attributes);
    if (IE8_DOM_DEFINE) try {
      return dP(O, P, Attributes);
    } catch (e) {
      /* empty */
    }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };
  
  /***/ }),
  
  /***/ 1501:
  /***/ (function(module) {
  
  module.exports = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };
  
  /***/ }),
  
  /***/ 2434:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // 7.1.1 ToPrimitive(input [, PreferredType])
  var isObject = __webpack_require__(11); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string
  
  
  module.exports = function (it, S) {
    if (!isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };
  
  /***/ }),
  
  /***/ 2491:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // https://github.com/tc39/proposal-global
  var $export = __webpack_require__(4764);
  
  $export($export.G, {
    global: __webpack_require__(9801)
  });
  
  /***/ }),
  
  /***/ 4133:
  /***/ (function(module) {
  
  module.exports = function (it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };
  
  /***/ }),
  
  /***/ 1806:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var cof = __webpack_require__(2258);
  
  module.exports = function (it, msg) {
    if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
    return +it;
  };
  
  /***/ }),
  
  /***/ 6717:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // 22.1.3.31 Array.prototype[@@unscopables]
  var UNSCOPABLES = __webpack_require__(1032)('unscopables');
  
  var ArrayProto = Array.prototype;
  if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(3817)(ArrayProto, UNSCOPABLES, {});
  
  module.exports = function (key) {
    ArrayProto[UNSCOPABLES][key] = true;
  };
  
  /***/ }),
  
  /***/ 5573:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var at = __webpack_require__(1510)(true); // `AdvanceStringIndex` abstract operation
  // https://tc39.github.io/ecma262/#sec-advancestringindex
  
  
  module.exports = function (S, index, unicode) {
    return index + (unicode ? at(S, index).length : 1);
  };
  
  /***/ }),
  
  /***/ 3047:
  /***/ (function(module) {
  
  module.exports = function (it, Constructor, name, forbiddenField) {
    if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
      throw TypeError(name + ': incorrect invocation!');
    }
  
    return it;
  };
  
  /***/ }),
  
  /***/ 9598:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var isObject = __webpack_require__(1541);
  
  module.exports = function (it) {
    if (!isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
  };
  
  /***/ }),
  
  /***/ 6027:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
  
  
  var toObject = __webpack_require__(120);
  
  var toAbsoluteIndex = __webpack_require__(724);
  
  var toLength = __webpack_require__(4677);
  
  module.exports = [].copyWithin || function copyWithin(target
  /* = 0 */
  , start
  /* = 0, end = @length */
  ) {
    var O = toObject(this);
    var len = toLength(O.length);
    var to = toAbsoluteIndex(target, len);
    var from = toAbsoluteIndex(start, len);
    var end = arguments.length > 2 ? arguments[2] : undefined;
    var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
    var inc = 1;
  
    if (from < to && to < from + count) {
      inc = -1;
      from += count - 1;
      to += count - 1;
    }
  
    while (count-- > 0) {
      if (from in O) O[to] = O[from];else delete O[to];
      to += inc;
      from += inc;
    }
  
    return O;
  };
  
  /***/ }),
  
  /***/ 6590:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
  
  
  var toObject = __webpack_require__(120);
  
  var toAbsoluteIndex = __webpack_require__(724);
  
  var toLength = __webpack_require__(4677);
  
  module.exports = function fill(value
  /* , start = 0, end = @length */
  ) {
    var O = toObject(this);
    var length = toLength(O.length);
    var aLen = arguments.length;
    var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
    var end = aLen > 2 ? arguments[2] : undefined;
    var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  
    while (endPos > index) {
      O[index++] = value;
    }
  
    return O;
  };
  
  /***/ }),
  
  /***/ 1408:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // false -> Array#indexOf
  // true  -> Array#includes
  var toIObject = __webpack_require__(3165);
  
  var toLength = __webpack_require__(4677);
  
  var toAbsoluteIndex = __webpack_require__(724);
  
  module.exports = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = toIObject($this);
      var length = toLength(O.length);
      var index = toAbsoluteIndex(fromIndex, length);
      var value; // Array#includes uses SameValueZero equality algorithm
      // eslint-disable-next-line no-self-compare
  
      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++]; // eslint-disable-next-line no-self-compare
  
        if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
      } else for (; length > index; index++) {
        if (IS_INCLUDES || index in O) {
          if (O[index] === el) return IS_INCLUDES || index || 0;
        }
      }
      return !IS_INCLUDES && -1;
    };
  };
  
  /***/ }),
  
  /***/ 3263:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // 0 -> Array#forEach
  // 1 -> Array#map
  // 2 -> Array#filter
  // 3 -> Array#some
  // 4 -> Array#every
  // 5 -> Array#find
  // 6 -> Array#findIndex
  var ctx = __webpack_require__(4801);
  
  var IObject = __webpack_require__(2535);
  
  var toObject = __webpack_require__(120);
  
  var toLength = __webpack_require__(4677);
  
  var asc = __webpack_require__(4787);
  
  module.exports = function (TYPE, $create) {
    var IS_MAP = TYPE == 1;
    var IS_FILTER = TYPE == 2;
    var IS_SOME = TYPE == 3;
    var IS_EVERY = TYPE == 4;
    var IS_FIND_INDEX = TYPE == 6;
    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
    var create = $create || asc;
    return function ($this, callbackfn, that) {
      var O = toObject($this);
      var self = IObject(O);
      var f = ctx(callbackfn, that, 3);
      var length = toLength(self.length);
      var index = 0;
      var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
      var val, res;
  
      for (; length > index; index++) {
        if (NO_HOLES || index in self) {
          val = self[index];
          res = f(val, index, O);
  
          if (TYPE) {
            if (IS_MAP) result[index] = res; // map
            else if (res) switch (TYPE) {
              case 3:
                return true;
              // some
  
              case 5:
                return val;
              // find
  
              case 6:
                return index;
              // findIndex
  
              case 2:
                result.push(val);
              // filter
            } else if (IS_EVERY) return false; // every
          }
        }
      }
  
      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
    };
  };
  
  /***/ }),
  
  /***/ 4782:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var aFunction = __webpack_require__(4133);
  
  var toObject = __webpack_require__(120);
  
  var IObject = __webpack_require__(2535);
  
  var toLength = __webpack_require__(4677);
  
  module.exports = function (that, callbackfn, aLen, memo, isRight) {
    aFunction(callbackfn);
    var O = toObject(that);
    var self = IObject(O);
    var length = toLength(O.length);
    var index = isRight ? length - 1 : 0;
    var i = isRight ? -1 : 1;
    if (aLen < 2) for (;;) {
      if (index in self) {
        memo = self[index];
        index += i;
        break;
      }
  
      index += i;
  
      if (isRight ? index < 0 : length <= index) {
        throw TypeError('Reduce of empty array with no initial value');
      }
    }
  
    for (; isRight ? index >= 0 : length > index; index += i) {
      if (index in self) {
        memo = callbackfn(memo, self[index], index, O);
      }
    }
  
    return memo;
  };
  
  /***/ }),
  
  /***/ 4171:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var isObject = __webpack_require__(1541);
  
  var isArray = __webpack_require__(8859);
  
  var SPECIES = __webpack_require__(1032)('species');
  
  module.exports = function (original) {
    var C;
  
    if (isArray(original)) {
      C = original.constructor; // cross-realm fallback
  
      if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
  
      if (isObject(C)) {
        C = C[SPECIES];
        if (C === null) C = undefined;
      }
    }
  
    return C === undefined ? Array : C;
  };
  
  /***/ }),
  
  /***/ 4787:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
  var speciesConstructor = __webpack_require__(4171);
  
  module.exports = function (original, length) {
    return new (speciesConstructor(original))(length);
  };
  
  /***/ }),
  
  /***/ 825:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var aFunction = __webpack_require__(4133);
  
  var isObject = __webpack_require__(1541);
  
  var invoke = __webpack_require__(9279);
  
  var arraySlice = [].slice;
  var factories = {};
  
  var construct = function construct(F, len, args) {
    if (!(len in factories)) {
      for (var n = [], i = 0; i < len; i++) {
        n[i] = 'a[' + i + ']';
      } // eslint-disable-next-line no-new-func
  
  
      factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
    }
  
    return factories[len](F, args);
  };
  
  module.exports = Function.bind || function bind(that
  /* , ...args */
  ) {
    var fn = aFunction(this);
    var partArgs = arraySlice.call(arguments, 1);
  
    var bound = function
      /* args... */
    bound() {
      var args = partArgs.concat(arraySlice.call(arguments));
      return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
    };
  
    if (isObject(fn.prototype)) bound.prototype = fn.prototype;
    return bound;
  };
  
  /***/ }),
  
  /***/ 6289:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // getting tag from 19.1.3.6 Object.prototype.toString()
  var cof = __webpack_require__(2258);
  
  var TAG = __webpack_require__(1032)('toStringTag'); // ES3 wrong here
  
  
  var ARG = cof(function () {
    return arguments;
  }()) == 'Arguments'; // fallback for IE11 Script Access Denied error
  
  var tryGet = function tryGet(it, key) {
    try {
      return it[key];
    } catch (e) {
      /* empty */
    }
  };
  
  module.exports = function (it) {
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // builtinTag case
    : ARG ? cof(O) // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };
  
  /***/ }),
  
  /***/ 2258:
  /***/ (function(module) {
  
  var toString = {}.toString;
  
  module.exports = function (it) {
    return toString.call(it).slice(8, -1);
  };
  
  /***/ }),
  
  /***/ 2878:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var dP = (__webpack_require__(4770).f);
  
  var create = __webpack_require__(2851);
  
  var redefineAll = __webpack_require__(9128);
  
  var ctx = __webpack_require__(4801);
  
  var anInstance = __webpack_require__(3047);
  
  var forOf = __webpack_require__(7341);
  
  var $iterDefine = __webpack_require__(9857);
  
  var step = __webpack_require__(464);
  
  var setSpecies = __webpack_require__(2415);
  
  var DESCRIPTORS = __webpack_require__(6628);
  
  var fastKey = (__webpack_require__(4207).fastKey);
  
  var validate = __webpack_require__(9668);
  
  var SIZE = DESCRIPTORS ? '_s' : 'size';
  
  var getEntry = function getEntry(that, key) {
    // fast case
    var index = fastKey(key);
    var entry;
    if (index !== 'F') return that._i[index]; // frozen object case
  
    for (entry = that._f; entry; entry = entry.n) {
      if (entry.k == key) return entry;
    }
  };
  
  module.exports = {
    getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
      var C = wrapper(function (that, iterable) {
        anInstance(that, C, NAME, '_i');
        that._t = NAME; // collection type
  
        that._i = create(null); // index
  
        that._f = undefined; // first entry
  
        that._l = undefined; // last entry
  
        that[SIZE] = 0; // size
  
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
      });
      redefineAll(C.prototype, {
        // 23.1.3.1 Map.prototype.clear()
        // 23.2.3.2 Set.prototype.clear()
        clear: function clear() {
          for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
            entry.r = true;
            if (entry.p) entry.p = entry.p.n = undefined;
            delete data[entry.i];
          }
  
          that._f = that._l = undefined;
          that[SIZE] = 0;
        },
        // 23.1.3.3 Map.prototype.delete(key)
        // 23.2.3.4 Set.prototype.delete(value)
        'delete': function _delete(key) {
          var that = validate(this, NAME);
          var entry = getEntry(that, key);
  
          if (entry) {
            var next = entry.n;
            var prev = entry.p;
            delete that._i[entry.i];
            entry.r = true;
            if (prev) prev.n = next;
            if (next) next.p = prev;
            if (that._f == entry) that._f = next;
            if (that._l == entry) that._l = prev;
            that[SIZE]--;
          }
  
          return !!entry;
        },
        // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
        // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
        forEach: function forEach(callbackfn
        /* , that = undefined */
        ) {
          validate(this, NAME);
          var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
          var entry;
  
          while (entry = entry ? entry.n : this._f) {
            f(entry.v, entry.k, this); // revert to the last existing entry
  
            while (entry && entry.r) {
              entry = entry.p;
            }
          }
        },
        // 23.1.3.7 Map.prototype.has(key)
        // 23.2.3.7 Set.prototype.has(value)
        has: function has(key) {
          return !!getEntry(validate(this, NAME), key);
        }
      });
      if (DESCRIPTORS) dP(C.prototype, 'size', {
        get: function get() {
          return validate(this, NAME)[SIZE];
        }
      });
      return C;
    },
    def: function def(that, key, value) {
      var entry = getEntry(that, key);
      var prev, index; // change existing entry
  
      if (entry) {
        entry.v = value; // create new entry
      } else {
        that._l = entry = {
          i: index = fastKey(key, true),
          // <- index
          k: key,
          // <- key
          v: value,
          // <- value
          p: prev = that._l,
          // <- previous entry
          n: undefined,
          // <- next entry
          r: false // <- removed
  
        };
        if (!that._f) that._f = entry;
        if (prev) prev.n = entry;
        that[SIZE]++; // add to index
  
        if (index !== 'F') that._i[index] = entry;
      }
  
      return that;
    },
    getEntry: getEntry,
    setStrong: function setStrong(C, NAME, IS_MAP) {
      // add .keys, .values, .entries, [@@iterator]
      // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
      $iterDefine(C, NAME, function (iterated, kind) {
        this._t = validate(iterated, NAME); // target
  
        this._k = kind; // kind
  
        this._l = undefined; // previous
      }, function () {
        var that = this;
        var kind = that._k;
        var entry = that._l; // revert to the last existing entry
  
        while (entry && entry.r) {
          entry = entry.p;
        } // get next entry
  
  
        if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
          // or finish the iteration
          that._t = undefined;
          return step(1);
        } // return step by kind
  
  
        if (kind == 'keys') return step(0, entry.k);
        if (kind == 'values') return step(0, entry.v);
        return step(0, [entry.k, entry.v]);
      }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2
  
      setSpecies(NAME);
    }
  };
  
  /***/ }),
  
  /***/ 687:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var redefineAll = __webpack_require__(9128);
  
  var getWeak = (__webpack_require__(4207).getWeak);
  
  var anObject = __webpack_require__(9598);
  
  var isObject = __webpack_require__(1541);
  
  var anInstance = __webpack_require__(3047);
  
  var forOf = __webpack_require__(7341);
  
  var createArrayMethod = __webpack_require__(3263);
  
  var $has = __webpack_require__(6547);
  
  var validate = __webpack_require__(9668);
  
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var id = 0; // fallback for uncaught frozen keys
  
  var uncaughtFrozenStore = function uncaughtFrozenStore(that) {
    return that._l || (that._l = new UncaughtFrozenStore());
  };
  
  var UncaughtFrozenStore = function UncaughtFrozenStore() {
    this.a = [];
  };
  
  var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
    return arrayFind(store.a, function (it) {
      return it[0] === key;
    });
  };
  
  UncaughtFrozenStore.prototype = {
    get: function get(key) {
      var entry = findUncaughtFrozen(this, key);
      if (entry) return entry[1];
    },
    has: function has(key) {
      return !!findUncaughtFrozen(this, key);
    },
    set: function set(key, value) {
      var entry = findUncaughtFrozen(this, key);
      if (entry) entry[1] = value;else this.a.push([key, value]);
    },
    'delete': function _delete(key) {
      var index = arrayFindIndex(this.a, function (it) {
        return it[0] === key;
      });
      if (~index) this.a.splice(index, 1);
      return !!~index;
    }
  };
  module.exports = {
    getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
      var C = wrapper(function (that, iterable) {
        anInstance(that, C, NAME, '_i');
        that._t = NAME; // collection type
  
        that._i = id++; // collection id
  
        that._l = undefined; // leak store for uncaught frozen objects
  
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
      });
      redefineAll(C.prototype, {
        // 23.3.3.2 WeakMap.prototype.delete(key)
        // 23.4.3.3 WeakSet.prototype.delete(value)
        'delete': function _delete(key) {
          if (!isObject(key)) return false;
          var data = getWeak(key);
          if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
          return data && $has(data, this._i) && delete data[this._i];
        },
        // 23.3.3.4 WeakMap.prototype.has(key)
        // 23.4.3.4 WeakSet.prototype.has(value)
        has: function has(key) {
          if (!isObject(key)) return false;
          var data = getWeak(key);
          if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
          return data && $has(data, this._i);
        }
      });
      return C;
    },
    def: function def(that, key, value) {
      var data = getWeak(anObject(key), true);
      if (data === true) uncaughtFrozenStore(that).set(key, value);else data[that._i] = value;
      return that;
    },
    ufstore: uncaughtFrozenStore
  };
  
  /***/ }),
  
  /***/ 2411:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var global = __webpack_require__(4319);
  
  var $export = __webpack_require__(2583);
  
  var redefine = __webpack_require__(7070);
  
  var redefineAll = __webpack_require__(9128);
  
  var meta = __webpack_require__(4207);
  
  var forOf = __webpack_require__(7341);
  
  var anInstance = __webpack_require__(3047);
  
  var isObject = __webpack_require__(1541);
  
  var fails = __webpack_require__(8164);
  
  var $iterDetect = __webpack_require__(7633);
  
  var setToStringTag = __webpack_require__(6556);
  
  var inheritIfRequired = __webpack_require__(3914);
  
  module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
    var Base = global[NAME];
    var C = Base;
    var ADDER = IS_MAP ? 'set' : 'add';
    var proto = C && C.prototype;
    var O = {};
  
    var fixMethod = function fixMethod(KEY) {
      var fn = proto[KEY];
      redefine(proto, KEY, KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) {
        fn.call(this, a === 0 ? 0 : a);
        return this;
      } : function set(a, b) {
        fn.call(this, a === 0 ? 0 : a, b);
        return this;
      });
    };
  
    if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
      new C().entries().next();
    }))) {
      // create collection constructor
      C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
      redefineAll(C.prototype, methods);
      meta.NEED = true;
    } else {
      var instance = new C(); // early implementations not supports chaining
  
      var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
  
      var THROWS_ON_PRIMITIVES = fails(function () {
        instance.has(1);
      }); // most early implementations doesn't supports iterables, most modern - not close it correctly
  
      var ACCEPT_ITERABLES = $iterDetect(function (iter) {
        new C(iter);
      }); // eslint-disable-line no-new
      // for early implementations -0 and +0 not the same
  
      var BUGGY_ZERO = !IS_WEAK && fails(function () {
        // V8 ~ Chromium 42- fails only with 5+ elements
        var $instance = new C();
        var index = 5;
  
        while (index--) {
          $instance[ADDER](index, index);
        }
  
        return !$instance.has(-0);
      });
  
      if (!ACCEPT_ITERABLES) {
        C = wrapper(function (target, iterable) {
          anInstance(target, C, NAME);
          var that = inheritIfRequired(new Base(), target, C);
          if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
          return that;
        });
        C.prototype = proto;
        proto.constructor = C;
      }
  
      if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
        fixMethod('delete');
        fixMethod('has');
        IS_MAP && fixMethod('get');
      }
  
      if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // weak collections should not contains .clear method
  
      if (IS_WEAK && proto.clear) delete proto.clear;
    }
  
    setToStringTag(C, NAME);
    O[NAME] = C;
    $export($export.G + $export.W + $export.F * (C != Base), O);
    if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
    return C;
  };
  
  /***/ }),
  
  /***/ 195:
  /***/ (function(module) {
  
  var core = module.exports = {
    version: '2.6.12'
  };
  if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
  
  /***/ }),
  
  /***/ 7875:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $defineProperty = __webpack_require__(4770);
  
  var createDesc = __webpack_require__(5583);
  
  module.exports = function (object, index, value) {
    if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
  };
  
  /***/ }),
  
  /***/ 4801:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // optional / simple context binding
  var aFunction = __webpack_require__(4133);
  
  module.exports = function (fn, that, length) {
    aFunction(fn);
    if (that === undefined) return fn;
  
    switch (length) {
      case 1:
        return function (a) {
          return fn.call(that, a);
        };
  
      case 2:
        return function (a, b) {
          return fn.call(that, a, b);
        };
  
      case 3:
        return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
    }
  
    return function
      /* ...args */
    () {
      return fn.apply(that, arguments);
    };
  };
  
  /***/ }),
  
  /***/ 5982:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
  
  var fails = __webpack_require__(8164);
  
  var getTime = Date.prototype.getTime;
  var $toISOString = Date.prototype.toISOString;
  
  var lz = function lz(num) {
    return num > 9 ? num : '0' + num;
  }; // PhantomJS / old WebKit has a broken implementations
  
  
  module.exports = fails(function () {
    return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
  }) || !fails(function () {
    $toISOString.call(new Date(NaN));
  }) ? function toISOString() {
    if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
    var d = this;
    var y = d.getUTCFullYear();
    var m = d.getUTCMilliseconds();
    var s = y < 0 ? '-' : y > 9999 ? '+' : '';
    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
  } : $toISOString;
  
  /***/ }),
  
  /***/ 2171:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var anObject = __webpack_require__(9598);
  
  var toPrimitive = __webpack_require__(5848);
  
  var NUMBER = 'number';
  
  module.exports = function (hint) {
    if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
    return toPrimitive(anObject(this), hint != NUMBER);
  };
  
  /***/ }),
  
  /***/ 4695:
  /***/ (function(module) {
  
  // 7.2.1 RequireObjectCoercible(argument)
  module.exports = function (it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
  };
  
  /***/ }),
  
  /***/ 6628:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // Thank's IE8 for his funny defineProperty
  module.exports = !__webpack_require__(8164)(function () {
    return Object.defineProperty({}, 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  });
  
  /***/ }),
  
  /***/ 4763:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var isObject = __webpack_require__(1541);
  
  var document = (__webpack_require__(4319).document); // typeof document.createElement is 'object' in old IE
  
  
  var is = isObject(document) && isObject(document.createElement);
  
  module.exports = function (it) {
    return is ? document.createElement(it) : {};
  };
  
  /***/ }),
  
  /***/ 2792:
  /***/ (function(module) {
  
  // IE 8- don't enum bug keys
  module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
  
  /***/ }),
  
  /***/ 7400:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // all enumerable object keys, includes symbols
  var getKeys = __webpack_require__(6875);
  
  var gOPS = __webpack_require__(4866);
  
  var pIE = __webpack_require__(8931);
  
  module.exports = function (it) {
    var result = getKeys(it);
    var getSymbols = gOPS.f;
  
    if (getSymbols) {
      var symbols = getSymbols(it);
      var isEnum = pIE.f;
      var i = 0;
      var key;
  
      while (symbols.length > i) {
        if (isEnum.call(it, key = symbols[i++])) result.push(key);
      }
    }
  
    return result;
  };
  
  /***/ }),
  
  /***/ 2583:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var global = __webpack_require__(4319);
  
  var core = __webpack_require__(195);
  
  var hide = __webpack_require__(3817);
  
  var redefine = __webpack_require__(7070);
  
  var ctx = __webpack_require__(4801);
  
  var PROTOTYPE = 'prototype';
  
  var $export = function $export(type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
    var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
    var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
    var key, own, out, exp;
    if (IS_GLOBAL) source = name;
  
    for (key in source) {
      // contains in native
      own = !IS_FORCED && target && target[key] !== undefined; // export native or passed
  
      out = (own ? target : source)[key]; // bind timers to global for call from export context
  
      exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // extend global
  
      if (target) redefine(target, key, out, type & $export.U); // export
  
      if (exports[key] != out) hide(exports, key, exp);
      if (IS_PROTO && expProto[key] != out) expProto[key] = out;
    }
  };
  
  global.core = core; // type bitmap
  
  $export.F = 1; // forced
  
  $export.G = 2; // global
  
  $export.S = 4; // static
  
  $export.P = 8; // proto
  
  $export.B = 16; // bind
  
  $export.W = 32; // wrap
  
  $export.U = 64; // safe
  
  $export.R = 128; // real proto method for `library`
  
  module.exports = $export;
  
  /***/ }),
  
  /***/ 5358:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var MATCH = __webpack_require__(1032)('match');
  
  module.exports = function (KEY) {
    var re = /./;
  
    try {
      '/./'[KEY](re);
    } catch (e) {
      try {
        re[MATCH] = false;
        return !'/./'[KEY](re);
      } catch (f) {
        /* empty */
      }
    }
  
    return true;
  };
  
  /***/ }),
  
  /***/ 8164:
  /***/ (function(module) {
  
  module.exports = function (exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };
  
  /***/ }),
  
  /***/ 7904:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  __webpack_require__(487);
  
  var redefine = __webpack_require__(7070);
  
  var hide = __webpack_require__(3817);
  
  var fails = __webpack_require__(8164);
  
  var defined = __webpack_require__(4695);
  
  var wks = __webpack_require__(1032);
  
  var regexpExec = __webpack_require__(3910);
  
  var SPECIES = wks('species');
  var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
    // #replace needs built-in support for named groups.
    // #match works fine because it just return the exec results, even if it has
    // a "grops" property.
    var re = /./;
  
    re.exec = function () {
      var result = [];
      result.groups = {
        a: '7'
      };
      return result;
    };
  
    return ''.replace(re, '$<a>') !== '7';
  });
  
  var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = function () {
    // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
    var re = /(?:)/;
    var originalExec = re.exec;
  
    re.exec = function () {
      return originalExec.apply(this, arguments);
    };
  
    var result = 'ab'.split(re);
    return result.length === 2 && result[0] === 'a' && result[1] === 'b';
  }();
  
  module.exports = function (KEY, length, exec) {
    var SYMBOL = wks(KEY);
    var DELEGATES_TO_SYMBOL = !fails(function () {
      // String methods call symbol-named RegEp methods
      var O = {};
  
      O[SYMBOL] = function () {
        return 7;
      };
  
      return ''[KEY](O) != 7;
    });
    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
      // Symbol-named RegExp methods call .exec
      var execCalled = false;
      var re = /a/;
  
      re.exec = function () {
        execCalled = true;
        return null;
      };
  
      if (KEY === 'split') {
        // RegExp[@@split] doesn't call the regex's exec method, but first creates
        // a new one. We need to return the patched regex when creating the new one.
        re.constructor = {};
  
        re.constructor[SPECIES] = function () {
          return re;
        };
      }
  
      re[SYMBOL]('');
      return !execCalled;
    }) : undefined;
  
    if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
      var nativeRegExpMethod = /./[SYMBOL];
      var fns = exec(defined, SYMBOL, ''[KEY], function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return {
              done: true,
              value: nativeRegExpMethod.call(regexp, str, arg2)
            };
          }
  
          return {
            done: true,
            value: nativeMethod.call(str, regexp, arg2)
          };
        }
  
        return {
          done: false
        };
      });
      var strfn = fns[0];
      var rxfn = fns[1];
      redefine(String.prototype, KEY, strfn);
      hide(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) {
        return rxfn.call(string, this, arg);
      } // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) {
        return rxfn.call(string, this);
      });
    }
  };
  
  /***/ }),
  
  /***/ 1333:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // 21.2.5.3 get RegExp.prototype.flags
  
  var anObject = __webpack_require__(9598);
  
  module.exports = function () {
    var that = anObject(this);
    var result = '';
    if (that.global) result += 'g';
    if (that.ignoreCase) result += 'i';
    if (that.multiline) result += 'm';
    if (that.unicode) result += 'u';
    if (that.sticky) result += 'y';
    return result;
  };
  
  /***/ }),
  
  /***/ 9301:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
  
  var isArray = __webpack_require__(8859);
  
  var isObject = __webpack_require__(1541);
  
  var toLength = __webpack_require__(4677);
  
  var ctx = __webpack_require__(4801);
  
  var IS_CONCAT_SPREADABLE = __webpack_require__(1032)('isConcatSpreadable');
  
  function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
    var targetIndex = start;
    var sourceIndex = 0;
    var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
    var element, spreadable;
  
    while (sourceIndex < sourceLen) {
      if (sourceIndex in source) {
        element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
        spreadable = false;
  
        if (isObject(element)) {
          spreadable = element[IS_CONCAT_SPREADABLE];
          spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
        }
  
        if (spreadable && depth > 0) {
          targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
        } else {
          if (targetIndex >= 0x1fffffffffffff) throw TypeError();
          target[targetIndex] = element;
        }
  
        targetIndex++;
      }
  
      sourceIndex++;
    }
  
    return targetIndex;
  }
  
  module.exports = flattenIntoArray;
  
  /***/ }),
  
  /***/ 7341:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var ctx = __webpack_require__(4801);
  
  var call = __webpack_require__(3373);
  
  var isArrayIter = __webpack_require__(5361);
  
  var anObject = __webpack_require__(9598);
  
  var toLength = __webpack_require__(4677);
  
  var getIterFn = __webpack_require__(8923);
  
  var BREAK = {};
  var RETURN = {};
  
  var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
    var iterFn = ITERATOR ? function () {
      return iterable;
    } : getIterFn(iterable);
    var f = ctx(fn, that, entries ? 2 : 1);
    var index = 0;
    var length, step, iterator, result;
    if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!'); // fast case for arrays with default iterator
  
    if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
      result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
      if (result === BREAK || result === RETURN) return result;
    } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
      result = call(iterator, f, step.value, entries);
      if (result === BREAK || result === RETURN) return result;
    }
  };
  
  exports.BREAK = BREAK;
  exports.RETURN = RETURN;
  
  /***/ }),
  
  /***/ 798:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  module.exports = __webpack_require__(1400)('native-function-to-string', Function.toString);
  
  /***/ }),
  
  /***/ 4319:
  /***/ (function(module) {
  
  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
  : Function('return this')();
  if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
  
  /***/ }),
  
  /***/ 6547:
  /***/ (function(module) {
  
  var hasOwnProperty = {}.hasOwnProperty;
  
  module.exports = function (it, key) {
    return hasOwnProperty.call(it, key);
  };
  
  /***/ }),
  
  /***/ 3817:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var dP = __webpack_require__(4770);
  
  var createDesc = __webpack_require__(5583);
  
  module.exports = __webpack_require__(6628) ? function (object, key, value) {
    return dP.f(object, key, createDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };
  
  /***/ }),
  
  /***/ 5991:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var document = (__webpack_require__(4319).document);
  
  module.exports = document && document.documentElement;
  
  /***/ }),
  
  /***/ 604:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  module.exports = !__webpack_require__(6628) && !__webpack_require__(8164)(function () {
    return Object.defineProperty(__webpack_require__(4763)('div'), 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  });
  
  /***/ }),
  
  /***/ 3914:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var isObject = __webpack_require__(1541);
  
  var setPrototypeOf = (__webpack_require__(5945).set);
  
  module.exports = function (that, target, C) {
    var S = target.constructor;
    var P;
  
    if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
      setPrototypeOf(that, P);
    }
  
    return that;
  };
  
  /***/ }),
  
  /***/ 9279:
  /***/ (function(module) {
  
  // fast apply, http://jsperf.lnkit.com/fast-apply/5
  module.exports = function (fn, args, that) {
    var un = that === undefined;
  
    switch (args.length) {
      case 0:
        return un ? fn() : fn.call(that);
  
      case 1:
        return un ? fn(args[0]) : fn.call(that, args[0]);
  
      case 2:
        return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
  
      case 3:
        return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
  
      case 4:
        return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
    }
  
    return fn.apply(that, args);
  };
  
  /***/ }),
  
  /***/ 2535:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // fallback for non-array-like ES3 and non-enumerable old V8 strings
  var cof = __webpack_require__(2258); // eslint-disable-next-line no-prototype-builtins
  
  
  module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
    return cof(it) == 'String' ? it.split('') : Object(it);
  };
  
  /***/ }),
  
  /***/ 5361:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // check on default Array iterator
  var Iterators = __webpack_require__(9223);
  
  var ITERATOR = __webpack_require__(1032)('iterator');
  
  var ArrayProto = Array.prototype;
  
  module.exports = function (it) {
    return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
  };
  
  /***/ }),
  
  /***/ 8859:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // 7.2.2 IsArray(argument)
  var cof = __webpack_require__(2258);
  
  module.exports = Array.isArray || function isArray(arg) {
    return cof(arg) == 'Array';
  };
  
  /***/ }),
  
  /***/ 7981:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.1.2.3 Number.isInteger(number)
  var isObject = __webpack_require__(1541);
  
  var floor = Math.floor;
  
  module.exports = function isInteger(it) {
    return !isObject(it) && isFinite(it) && floor(it) === it;
  };
  
  /***/ }),
  
  /***/ 1541:
  /***/ (function(module) {
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  module.exports = function (it) {
    return _typeof(it) === 'object' ? it !== null : typeof it === 'function';
  };
  
  /***/ }),
  
  /***/ 4667:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // 7.2.8 IsRegExp(argument)
  var isObject = __webpack_require__(1541);
  
  var cof = __webpack_require__(2258);
  
  var MATCH = __webpack_require__(1032)('match');
  
  module.exports = function (it) {
    var isRegExp;
    return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
  };
  
  /***/ }),
  
  /***/ 3373:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // call something on iterator step with safe closing on error
  var anObject = __webpack_require__(9598);
  
  module.exports = function (iterator, fn, value, entries) {
    try {
      return entries ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
    } catch (e) {
      var ret = iterator['return'];
      if (ret !== undefined) anObject(ret.call(iterator));
      throw e;
    }
  };
  
  /***/ }),
  
  /***/ 7487:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var create = __webpack_require__(2851);
  
  var descriptor = __webpack_require__(5583);
  
  var setToStringTag = __webpack_require__(6556);
  
  var IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
  
  __webpack_require__(3817)(IteratorPrototype, __webpack_require__(1032)('iterator'), function () {
    return this;
  });
  
  module.exports = function (Constructor, NAME, next) {
    Constructor.prototype = create(IteratorPrototype, {
      next: descriptor(1, next)
    });
    setToStringTag(Constructor, NAME + ' Iterator');
  };
  
  /***/ }),
  
  /***/ 9857:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var LIBRARY = __webpack_require__(3381);
  
  var $export = __webpack_require__(2583);
  
  var redefine = __webpack_require__(7070);
  
  var hide = __webpack_require__(3817);
  
  var Iterators = __webpack_require__(9223);
  
  var $iterCreate = __webpack_require__(7487);
  
  var setToStringTag = __webpack_require__(6556);
  
  var getPrototypeOf = __webpack_require__(9750);
  
  var ITERATOR = __webpack_require__(1032)('iterator');
  
  var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
  
  var FF_ITERATOR = '@@iterator';
  var KEYS = 'keys';
  var VALUES = 'values';
  
  var returnThis = function returnThis() {
    return this;
  };
  
  module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    $iterCreate(Constructor, NAME, next);
  
    var getMethod = function getMethod(kind) {
      if (!BUGGY && kind in proto) return proto[kind];
  
      switch (kind) {
        case KEYS:
          return function keys() {
            return new Constructor(this, kind);
          };
  
        case VALUES:
          return function values() {
            return new Constructor(this, kind);
          };
      }
  
      return function entries() {
        return new Constructor(this, kind);
      };
    };
  
    var TAG = NAME + ' Iterator';
    var DEF_VALUES = DEFAULT == VALUES;
    var VALUES_BUG = false;
    var proto = Base.prototype;
    var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
    var $default = $native || getMethod(DEFAULT);
    var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
    var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
    var methods, key, IteratorPrototype; // Fix native
  
    if ($anyNative) {
      IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
  
      if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
        // Set @@toStringTag to native iterators
        setToStringTag(IteratorPrototype, TAG, true); // fix for some old engines
  
        if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
      }
    } // fix Array#{values, @@iterator}.name in V8 / FF
  
  
    if (DEF_VALUES && $native && $native.name !== VALUES) {
      VALUES_BUG = true;
  
      $default = function values() {
        return $native.call(this);
      };
    } // Define iterator
  
  
    if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
      hide(proto, ITERATOR, $default);
    } // Plug for library
  
  
    Iterators[NAME] = $default;
    Iterators[TAG] = returnThis;
  
    if (DEFAULT) {
      methods = {
        values: DEF_VALUES ? $default : getMethod(VALUES),
        keys: IS_SET ? $default : getMethod(KEYS),
        entries: $entries
      };
      if (FORCED) for (key in methods) {
        if (!(key in proto)) redefine(proto, key, methods[key]);
      } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
  
    return methods;
  };
  
  /***/ }),
  
  /***/ 7633:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var ITERATOR = __webpack_require__(1032)('iterator');
  
  var SAFE_CLOSING = false;
  
  try {
    var riter = [7][ITERATOR]();
  
    riter['return'] = function () {
      SAFE_CLOSING = true;
    }; // eslint-disable-next-line no-throw-literal
  
  
    Array.from(riter, function () {
      throw 2;
    });
  } catch (e) {
    /* empty */
  }
  
  module.exports = function (exec, skipClosing) {
    if (!skipClosing && !SAFE_CLOSING) return false;
    var safe = false;
  
    try {
      var arr = [7];
      var iter = arr[ITERATOR]();
  
      iter.next = function () {
        return {
          done: safe = true
        };
      };
  
      arr[ITERATOR] = function () {
        return iter;
      };
  
      exec(arr);
    } catch (e) {
      /* empty */
    }
  
    return safe;
  };
  
  /***/ }),
  
  /***/ 464:
  /***/ (function(module) {
  
  module.exports = function (done, value) {
    return {
      value: value,
      done: !!done
    };
  };
  
  /***/ }),
  
  /***/ 9223:
  /***/ (function(module) {
  
  module.exports = {};
  
  /***/ }),
  
  /***/ 3381:
  /***/ (function(module) {
  
  module.exports = false;
  
  /***/ }),
  
  /***/ 4835:
  /***/ (function(module) {
  
  // 20.2.2.14 Math.expm1(x)
  var $expm1 = Math.expm1;
  module.exports = !$expm1 // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168 // Tor Browser bug
  || $expm1(-2e-17) != -2e-17 ? function expm1(x) {
    return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
  } : $expm1;
  
  /***/ }),
  
  /***/ 5258:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.2.2.16 Math.fround(x)
  var sign = __webpack_require__(1498);
  
  var pow = Math.pow;
  var EPSILON = pow(2, -52);
  var EPSILON32 = pow(2, -23);
  var MAX32 = pow(2, 127) * (2 - EPSILON32);
  var MIN32 = pow(2, -126);
  
  var roundTiesToEven = function roundTiesToEven(n) {
    return n + 1 / EPSILON - 1 / EPSILON;
  };
  
  module.exports = Math.fround || function fround(x) {
    var $abs = Math.abs(x);
    var $sign = sign(x);
    var a, result;
    if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
    a = (1 + EPSILON32 / EPSILON) * $abs;
    result = a - (a - $abs); // eslint-disable-next-line no-self-compare
  
    if (result > MAX32 || result != result) return $sign * Infinity;
    return $sign * result;
  };
  
  /***/ }),
  
  /***/ 3678:
  /***/ (function(module) {
  
  // 20.2.2.20 Math.log1p(x)
  module.exports = Math.log1p || function log1p(x) {
    return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
  };
  
  /***/ }),
  
  /***/ 1498:
  /***/ (function(module) {
  
  // 20.2.2.28 Math.sign(x)
  module.exports = Math.sign || function sign(x) {
    // eslint-disable-next-line no-self-compare
    return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
  };
  
  /***/ }),
  
  /***/ 4207:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  var META = __webpack_require__(8376)('meta');
  
  var isObject = __webpack_require__(1541);
  
  var has = __webpack_require__(6547);
  
  var setDesc = (__webpack_require__(4770).f);
  
  var id = 0;
  
  var isExtensible = Object.isExtensible || function () {
    return true;
  };
  
  var FREEZE = !__webpack_require__(8164)(function () {
    return isExtensible(Object.preventExtensions({}));
  });
  
  var setMeta = function setMeta(it) {
    setDesc(it, META, {
      value: {
        i: 'O' + ++id,
        // object ID
        w: {} // weak collections IDs
  
      }
    });
  };
  
  var fastKey = function fastKey(it, create) {
    // return primitive with prefix
    if (!isObject(it)) return _typeof(it) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  
    if (!has(it, META)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return 'F'; // not necessary to add metadata
  
      if (!create) return 'E'; // add missing metadata
  
      setMeta(it); // return object ID
    }
  
    return it[META].i;
  };
  
  var getWeak = function getWeak(it, create) {
    if (!has(it, META)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return true; // not necessary to add metadata
  
      if (!create) return false; // add missing metadata
  
      setMeta(it); // return hash weak collections IDs
    }
  
    return it[META].w;
  }; // add metadata on freeze-family methods calling
  
  
  var onFreeze = function onFreeze(it) {
    if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
    return it;
  };
  
  var meta = module.exports = {
    KEY: META,
    NEED: false,
    fastKey: fastKey,
    getWeak: getWeak,
    onFreeze: onFreeze
  };
  
  /***/ }),
  
  /***/ 4231:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var global = __webpack_require__(4319);
  
  var macrotask = (__webpack_require__(719).set);
  
  var Observer = global.MutationObserver || global.WebKitMutationObserver;
  var process = global.process;
  var Promise = global.Promise;
  var isNode = __webpack_require__(2258)(process) == 'process';
  
  module.exports = function () {
    var head, last, notify;
  
    var flush = function flush() {
      var parent, fn;
      if (isNode && (parent = process.domain)) parent.exit();
  
      while (head) {
        fn = head.fn;
        head = head.next;
  
        try {
          fn();
        } catch (e) {
          if (head) notify();else last = undefined;
          throw e;
        }
      }
  
      last = undefined;
      if (parent) parent.enter();
    }; // Node.js
  
  
    if (isNode) {
      notify = function notify() {
        process.nextTick(flush);
      }; // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  
    } else if (Observer && !(global.navigator && global.navigator.standalone)) {
      var toggle = true;
      var node = document.createTextNode('');
      new Observer(flush).observe(node, {
        characterData: true
      }); // eslint-disable-line no-new
  
      notify = function notify() {
        node.data = toggle = !toggle;
      }; // environments with maybe non-completely correct, but existent Promise
  
    } else if (Promise && Promise.resolve) {
      // Promise.resolve without an argument throws an error in LG WebOS 2
      var promise = Promise.resolve(undefined);
  
      notify = function notify() {
        promise.then(flush);
      }; // for other environments - macrotask based on:
      // - setImmediate
      // - MessageChannel
      // - window.postMessag
      // - onreadystatechange
      // - setTimeout
  
    } else {
      notify = function notify() {
        // strange IE + webpack dev server bug - use .call(global)
        macrotask.call(global, flush);
      };
    }
  
    return function (fn) {
      var task = {
        fn: fn,
        next: undefined
      };
      if (last) last.next = task;
  
      if (!head) {
        head = task;
        notify();
      }
  
      last = task;
    };
  };
  
  /***/ }),
  
  /***/ 8847:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // 25.4.1.5 NewPromiseCapability(C)
  
  var aFunction = __webpack_require__(4133);
  
  function PromiseCapability(C) {
    var resolve, reject;
    this.promise = new C(function ($$resolve, $$reject) {
      if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
      resolve = $$resolve;
      reject = $$reject;
    });
    this.resolve = aFunction(resolve);
    this.reject = aFunction(reject);
  }
  
  module.exports.f = function (C) {
    return new PromiseCapability(C);
  };
  
  /***/ }),
  
  /***/ 4515:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // 19.1.2.1 Object.assign(target, source, ...)
  
  var DESCRIPTORS = __webpack_require__(6628);
  
  var getKeys = __webpack_require__(6875);
  
  var gOPS = __webpack_require__(4866);
  
  var pIE = __webpack_require__(8931);
  
  var toObject = __webpack_require__(120);
  
  var IObject = __webpack_require__(2535);
  
  var $assign = Object.assign; // should work with symbols and should have deterministic property order (V8 bug)
  
  module.exports = !$assign || __webpack_require__(8164)(function () {
    var A = {};
    var B = {}; // eslint-disable-next-line no-undef
  
    var S = Symbol();
    var K = 'abcdefghijklmnopqrst';
    A[S] = 7;
    K.split('').forEach(function (k) {
      B[k] = k;
    });
    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
  }) ? function assign(target, source) {
    // eslint-disable-line no-unused-vars
    var T = toObject(target);
    var aLen = arguments.length;
    var index = 1;
    var getSymbols = gOPS.f;
    var isEnum = pIE.f;
  
    while (aLen > index) {
      var S = IObject(arguments[index++]);
      var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
      var length = keys.length;
      var j = 0;
      var key;
  
      while (length > j) {
        key = keys[j++];
        if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
      }
    }
  
    return T;
  } : $assign;
  
  /***/ }),
  
  /***/ 2851:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
  var anObject = __webpack_require__(9598);
  
  var dPs = __webpack_require__(9444);
  
  var enumBugKeys = __webpack_require__(2792);
  
  var IE_PROTO = __webpack_require__(4132)('IE_PROTO');
  
  var Empty = function Empty() {
    /* empty */
  };
  
  var PROTOTYPE = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype
  
  var _createDict = function createDict() {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = __webpack_require__(4763)('iframe');
  
    var i = enumBugKeys.length;
    var lt = '<';
    var gt = '>';
    var iframeDocument;
    iframe.style.display = 'none';
  
    (__webpack_require__(5991).appendChild)(iframe);
  
    iframe.src = 'javascript:'; // eslint-disable-line no-script-url
    // createDict = iframe.contentWindow.Object;
    // html.removeChild(iframe);
  
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
    iframeDocument.close();
    _createDict = iframeDocument.F;
  
    while (i--) {
      delete _createDict[PROTOTYPE][enumBugKeys[i]];
    }
  
    return _createDict();
  };
  
  module.exports = Object.create || function create(O, Properties) {
    var result;
  
    if (O !== null) {
      Empty[PROTOTYPE] = anObject(O);
      result = new Empty();
      Empty[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill
  
      result[IE_PROTO] = O;
    } else result = _createDict();
  
    return Properties === undefined ? result : dPs(result, Properties);
  };
  
  /***/ }),
  
  /***/ 4770:
  /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
  
  var anObject = __webpack_require__(9598);
  
  var IE8_DOM_DEFINE = __webpack_require__(604);
  
  var toPrimitive = __webpack_require__(5848);
  
  var dP = Object.defineProperty;
  exports.f = __webpack_require__(6628) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPrimitive(P, true);
    anObject(Attributes);
    if (IE8_DOM_DEFINE) try {
      return dP(O, P, Attributes);
    } catch (e) {
      /* empty */
    }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };
  
  /***/ }),
  
  /***/ 9444:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var dP = __webpack_require__(4770);
  
  var anObject = __webpack_require__(9598);
  
  var getKeys = __webpack_require__(6875);
  
  module.exports = __webpack_require__(6628) ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject(O);
    var keys = getKeys(Properties);
    var length = keys.length;
    var i = 0;
    var P;
  
    while (length > i) {
      dP.f(O, P = keys[i++], Properties[P]);
    }
  
    return O;
  };
  
  /***/ }),
  
  /***/ 4254:
  /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
  
  var pIE = __webpack_require__(8931);
  
  var createDesc = __webpack_require__(5583);
  
  var toIObject = __webpack_require__(3165);
  
  var toPrimitive = __webpack_require__(5848);
  
  var has = __webpack_require__(6547);
  
  var IE8_DOM_DEFINE = __webpack_require__(604);
  
  var gOPD = Object.getOwnPropertyDescriptor;
  exports.f = __webpack_require__(6628) ? gOPD : function getOwnPropertyDescriptor(O, P) {
    O = toIObject(O);
    P = toPrimitive(P, true);
    if (IE8_DOM_DEFINE) try {
      return gOPD(O, P);
    } catch (e) {
      /* empty */
    }
    if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
  };
  
  /***/ }),
  
  /***/ 5607:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
  var toIObject = __webpack_require__(3165);
  
  var gOPN = (__webpack_require__(2762).f);
  
  var toString = {}.toString;
  var windowNames = (typeof window === "undefined" ? "undefined" : _typeof(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
  
  var getWindowNames = function getWindowNames(it) {
    try {
      return gOPN(it);
    } catch (e) {
      return windowNames.slice();
    }
  };
  
  module.exports.f = function getOwnPropertyNames(it) {
    return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
  };
  
  /***/ }),
  
  /***/ 2762:
  /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
  
  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
  var $keys = __webpack_require__(4608);
  
  var hiddenKeys = (__webpack_require__(2792).concat)('length', 'prototype');
  
  exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return $keys(O, hiddenKeys);
  };
  
  /***/ }),
  
  /***/ 4866:
  /***/ (function(__unused_webpack_module, exports) {
  
  exports.f = Object.getOwnPropertySymbols;
  
  /***/ }),
  
  /***/ 9750:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
  var has = __webpack_require__(6547);
  
  var toObject = __webpack_require__(120);
  
  var IE_PROTO = __webpack_require__(4132)('IE_PROTO');
  
  var ObjectProto = Object.prototype;
  
  module.exports = Object.getPrototypeOf || function (O) {
    O = toObject(O);
    if (has(O, IE_PROTO)) return O[IE_PROTO];
  
    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    }
  
    return O instanceof Object ? ObjectProto : null;
  };
  
  /***/ }),
  
  /***/ 4608:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var has = __webpack_require__(6547);
  
  var toIObject = __webpack_require__(3165);
  
  var arrayIndexOf = __webpack_require__(1408)(false);
  
  var IE_PROTO = __webpack_require__(4132)('IE_PROTO');
  
  module.exports = function (object, names) {
    var O = toIObject(object);
    var i = 0;
    var result = [];
    var key;
  
    for (key in O) {
      if (key != IE_PROTO) has(O, key) && result.push(key);
    } // Don't enum bug & hidden keys
  
  
    while (names.length > i) {
      if (has(O, key = names[i++])) {
        ~arrayIndexOf(result, key) || result.push(key);
      }
    }
  
    return result;
  };
  
  /***/ }),
  
  /***/ 6875:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // 19.1.2.14 / 15.2.3.14 Object.keys(O)
  var $keys = __webpack_require__(4608);
  
  var enumBugKeys = __webpack_require__(2792);
  
  module.exports = Object.keys || function keys(O) {
    return $keys(O, enumBugKeys);
  };
  
  /***/ }),
  
  /***/ 8931:
  /***/ (function(__unused_webpack_module, exports) {
  
  exports.f = {}.propertyIsEnumerable;
  
  /***/ }),
  
  /***/ 1913:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // most Object methods by ES6 should accept primitives
  var $export = __webpack_require__(2583);
  
  var core = __webpack_require__(195);
  
  var fails = __webpack_require__(8164);
  
  module.exports = function (KEY, exec) {
    var fn = (core.Object || {})[KEY] || Object[KEY];
    var exp = {};
    exp[KEY] = exec(fn);
    $export($export.S + $export.F * fails(function () {
      fn(1);
    }), 'Object', exp);
  };
  
  /***/ }),
  
  /***/ 9540:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var DESCRIPTORS = __webpack_require__(6628);
  
  var getKeys = __webpack_require__(6875);
  
  var toIObject = __webpack_require__(3165);
  
  var isEnum = (__webpack_require__(8931).f);
  
  module.exports = function (isEntries) {
    return function (it) {
      var O = toIObject(it);
      var keys = getKeys(O);
      var length = keys.length;
      var i = 0;
      var result = [];
      var key;
  
      while (length > i) {
        key = keys[i++];
  
        if (!DESCRIPTORS || isEnum.call(O, key)) {
          result.push(isEntries ? [key, O[key]] : O[key]);
        }
      }
  
      return result;
    };
  };
  
  /***/ }),
  
  /***/ 7367:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // all object keys, includes non-enumerable and symbols
  var gOPN = __webpack_require__(2762);
  
  var gOPS = __webpack_require__(4866);
  
  var anObject = __webpack_require__(9598);
  
  var Reflect = (__webpack_require__(4319).Reflect);
  
  module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
    var keys = gOPN.f(anObject(it));
    var getSymbols = gOPS.f;
    return getSymbols ? keys.concat(getSymbols(it)) : keys;
  };
  
  /***/ }),
  
  /***/ 4748:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var $parseFloat = (__webpack_require__(4319).parseFloat);
  
  var $trim = (__webpack_require__(9565).trim);
  
  module.exports = 1 / $parseFloat(__webpack_require__(9284) + '-0') !== -Infinity ? function parseFloat(str) {
    var string = $trim(String(str), 3);
    var result = $parseFloat(string);
    return result === 0 && string.charAt(0) == '-' ? -0 : result;
  } : $parseFloat;
  
  /***/ }),
  
  /***/ 1860:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var $parseInt = (__webpack_require__(4319).parseInt);
  
  var $trim = (__webpack_require__(9565).trim);
  
  var ws = __webpack_require__(9284);
  
  var hex = /^[-+]?0[xX]/;
  module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
    var string = $trim(String(str), 3);
    return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
  } : $parseInt;
  
  /***/ }),
  
  /***/ 8443:
  /***/ (function(module) {
  
  module.exports = function (exec) {
    try {
      return {
        e: false,
        v: exec()
      };
    } catch (e) {
      return {
        e: true,
        v: e
      };
    }
  };
  
  /***/ }),
  
  /***/ 9013:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var anObject = __webpack_require__(9598);
  
  var isObject = __webpack_require__(1541);
  
  var newPromiseCapability = __webpack_require__(8847);
  
  module.exports = function (C, x) {
    anObject(C);
    if (isObject(x) && x.constructor === C) return x;
    var promiseCapability = newPromiseCapability.f(C);
    var resolve = promiseCapability.resolve;
    resolve(x);
    return promiseCapability.promise;
  };
  
  /***/ }),
  
  /***/ 5583:
  /***/ (function(module) {
  
  module.exports = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };
  
  /***/ }),
  
  /***/ 9128:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var redefine = __webpack_require__(7070);
  
  module.exports = function (target, src, safe) {
    for (var key in src) {
      redefine(target, key, src[key], safe);
    }
  
    return target;
  };
  
  /***/ }),
  
  /***/ 7070:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var global = __webpack_require__(4319);
  
  var hide = __webpack_require__(3817);
  
  var has = __webpack_require__(6547);
  
  var SRC = __webpack_require__(8376)('src');
  
  var $toString = __webpack_require__(798);
  
  var TO_STRING = 'toString';
  var TPL = ('' + $toString).split(TO_STRING);
  
  (__webpack_require__(195).inspectSource) = function (it) {
    return $toString.call(it);
  };
  
  (module.exports = function (O, key, val, safe) {
    var isFunction = typeof val == 'function';
    if (isFunction) has(val, 'name') || hide(val, 'name', key);
    if (O[key] === val) return;
    if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  
    if (O === global) {
      O[key] = val;
    } else if (!safe) {
      delete O[key];
      hide(O, key, val);
    } else if (O[key]) {
      O[key] = val;
    } else {
      hide(O, key, val);
    } // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
  
  })(Function.prototype, TO_STRING, function toString() {
    return typeof this == 'function' && this[SRC] || $toString.call(this);
  });
  
  /***/ }),
  
  /***/ 7570:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  var classof = __webpack_require__(6289);
  
  var builtinExec = RegExp.prototype.exec; // `RegExpExec` abstract operation
  // https://tc39.github.io/ecma262/#sec-regexpexec
  
  module.exports = function (R, S) {
    var exec = R.exec;
  
    if (typeof exec === 'function') {
      var result = exec.call(R, S);
  
      if (_typeof(result) !== 'object') {
        throw new TypeError('RegExp exec method returned something other than an Object or null');
      }
  
      return result;
    }
  
    if (classof(R) !== 'RegExp') {
      throw new TypeError('RegExp#exec called on incompatible receiver');
    }
  
    return builtinExec.call(R, S);
  };
  
  /***/ }),
  
  /***/ 3910:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var regexpFlags = __webpack_require__(1333);
  
  var nativeExec = RegExp.prototype.exec; // This always refers to the native implementation, because the
  // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
  // which loads this file before patching the method.
  
  var nativeReplace = String.prototype.replace;
  var patchedExec = nativeExec;
  var LAST_INDEX = 'lastIndex';
  
  var UPDATES_LAST_INDEX_WRONG = function () {
    var re1 = /a/,
        re2 = /b*/g;
    nativeExec.call(re1, 'a');
    nativeExec.call(re2, 'a');
    return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
  }(); // nonparticipating capturing group, copied from es5-shim's String#split patch.
  
  
  var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
  var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;
  
  if (PATCH) {
    patchedExec = function exec(str) {
      var re = this;
      var lastIndex, reCopy, match, i;
  
      if (NPCG_INCLUDED) {
        reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
      }
  
      if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];
      match = nativeExec.call(re, str);
  
      if (UPDATES_LAST_INDEX_WRONG && match) {
        re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
      }
  
      if (NPCG_INCLUDED && match && match.length > 1) {
        // Fix browsers whose `exec` methods don't consistently return `undefined`
        // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
        // eslint-disable-next-line no-loop-func
        nativeReplace.call(match[0], reCopy, function () {
          for (i = 1; i < arguments.length - 2; i++) {
            if (arguments[i] === undefined) match[i] = undefined;
          }
        });
      }
  
      return match;
    };
  }
  
  module.exports = patchedExec;
  
  /***/ }),
  
  /***/ 437:
  /***/ (function(module) {
  
  // 7.2.9 SameValue(x, y)
  module.exports = Object.is || function is(x, y) {
    // eslint-disable-next-line no-self-compare
    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
  };
  
  /***/ }),
  
  /***/ 5945:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // Works with __proto__ only. Old v8 can't work with null proto objects.
  
  /* eslint-disable no-proto */
  var isObject = __webpack_require__(1541);
  
  var anObject = __webpack_require__(9598);
  
  var check = function check(O, proto) {
    anObject(O);
    if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
  };
  
  module.exports = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(4801)(Function.call, (__webpack_require__(4254).f)(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) {
        buggy = true;
      }
  
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
    check: check
  };
  
  /***/ }),
  
  /***/ 2415:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var global = __webpack_require__(4319);
  
  var dP = __webpack_require__(4770);
  
  var DESCRIPTORS = __webpack_require__(6628);
  
  var SPECIES = __webpack_require__(1032)('species');
  
  module.exports = function (KEY) {
    var C = global[KEY];
    if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
      configurable: true,
      get: function get() {
        return this;
      }
    });
  };
  
  /***/ }),
  
  /***/ 6556:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var def = (__webpack_require__(4770).f);
  
  var has = __webpack_require__(6547);
  
  var TAG = __webpack_require__(1032)('toStringTag');
  
  module.exports = function (it, tag, stat) {
    if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
      configurable: true,
      value: tag
    });
  };
  
  /***/ }),
  
  /***/ 4132:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var shared = __webpack_require__(1400)('keys');
  
  var uid = __webpack_require__(8376);
  
  module.exports = function (key) {
    return shared[key] || (shared[key] = uid(key));
  };
  
  /***/ }),
  
  /***/ 1400:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var core = __webpack_require__(195);
  
  var global = __webpack_require__(4319);
  
  var SHARED = '__core-js_shared__';
  var store = global[SHARED] || (global[SHARED] = {});
  (module.exports = function (key, value) {
    return store[key] || (store[key] = value !== undefined ? value : {});
  })('versions', []).push({
    version: core.version,
    mode: __webpack_require__(3381) ? 'pure' : 'global',
    copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
  });
  
  /***/ }),
  
  /***/ 1822:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // 7.3.20 SpeciesConstructor(O, defaultConstructor)
  var anObject = __webpack_require__(9598);
  
  var aFunction = __webpack_require__(4133);
  
  var SPECIES = __webpack_require__(1032)('species');
  
  module.exports = function (O, D) {
    var C = anObject(O).constructor;
    var S;
    return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
  };
  
  /***/ }),
  
  /***/ 7181:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var fails = __webpack_require__(8164);
  
  module.exports = function (method, arg) {
    return !!method && fails(function () {
      // eslint-disable-next-line no-useless-call
      arg ? method.call(null, function () {
        /* empty */
      }, 1) : method.call(null);
    });
  };
  
  /***/ }),
  
  /***/ 1510:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var toInteger = __webpack_require__(2836);
  
  var defined = __webpack_require__(4695); // true  -> String#at
  // false -> String#codePointAt
  
  
  module.exports = function (TO_STRING) {
    return function (that, pos) {
      var s = String(defined(that));
      var i = toInteger(pos);
      var l = s.length;
      var a, b;
      if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };
  
  /***/ }),
  
  /***/ 1657:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // helper for String#{startsWith, endsWith, includes}
  var isRegExp = __webpack_require__(4667);
  
  var defined = __webpack_require__(4695);
  
  module.exports = function (that, searchString, NAME) {
    if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
    return String(defined(that));
  };
  
  /***/ }),
  
  /***/ 7264:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var $export = __webpack_require__(2583);
  
  var fails = __webpack_require__(8164);
  
  var defined = __webpack_require__(4695);
  
  var quot = /"/g; // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
  
  var createHTML = function createHTML(string, tag, attribute, value) {
    var S = String(defined(string));
    var p1 = '<' + tag;
    if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
    return p1 + '>' + S + '</' + tag + '>';
  };
  
  module.exports = function (NAME, exec) {
    var O = {};
    O[NAME] = exec(createHTML);
    $export($export.P + $export.F * fails(function () {
      var test = ''[NAME]('"');
      return test !== test.toLowerCase() || test.split('"').length > 3;
    }), 'String', O);
  };
  
  /***/ }),
  
  /***/ 9484:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // https://github.com/tc39/proposal-string-pad-start-end
  var toLength = __webpack_require__(4677);
  
  var repeat = __webpack_require__(9891);
  
  var defined = __webpack_require__(4695);
  
  module.exports = function (that, maxLength, fillString, left) {
    var S = String(defined(that));
    var stringLength = S.length;
    var fillStr = fillString === undefined ? ' ' : String(fillString);
    var intMaxLength = toLength(maxLength);
    if (intMaxLength <= stringLength || fillStr == '') return S;
    var fillLen = intMaxLength - stringLength;
    var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
    return left ? stringFiller + S : S + stringFiller;
  };
  
  /***/ }),
  
  /***/ 9891:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var toInteger = __webpack_require__(2836);
  
  var defined = __webpack_require__(4695);
  
  module.exports = function repeat(count) {
    var str = String(defined(this));
    var res = '';
    var n = toInteger(count);
    if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  
    for (; n > 0; (n >>>= 1) && (str += str)) {
      if (n & 1) res += str;
    }
  
    return res;
  };
  
  /***/ }),
  
  /***/ 9565:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var $export = __webpack_require__(2583);
  
  var defined = __webpack_require__(4695);
  
  var fails = __webpack_require__(8164);
  
  var spaces = __webpack_require__(9284);
  
  var space = '[' + spaces + ']';
  var non = "\u200B\x85";
  var ltrim = RegExp('^' + space + space + '*');
  var rtrim = RegExp(space + space + '*$');
  
  var exporter = function exporter(KEY, exec, ALIAS) {
    var exp = {};
    var FORCE = fails(function () {
      return !!spaces[KEY]() || non[KEY]() != non;
    });
    var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
    if (ALIAS) exp[ALIAS] = fn;
    $export($export.P + $export.F * FORCE, 'String', exp);
  }; // 1 -> String#trimLeft
  // 2 -> String#trimRight
  // 3 -> String#trim
  
  
  var trim = exporter.trim = function (string, TYPE) {
    string = String(defined(string));
    if (TYPE & 1) string = string.replace(ltrim, '');
    if (TYPE & 2) string = string.replace(rtrim, '');
    return string;
  };
  
  module.exports = exporter;
  
  /***/ }),
  
  /***/ 9284:
  /***/ (function(module) {
  
  module.exports = "\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003" + "\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
  
  /***/ }),
  
  /***/ 719:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var ctx = __webpack_require__(4801);
  
  var invoke = __webpack_require__(9279);
  
  var html = __webpack_require__(5991);
  
  var cel = __webpack_require__(4763);
  
  var global = __webpack_require__(4319);
  
  var process = global.process;
  var setTask = global.setImmediate;
  var clearTask = global.clearImmediate;
  var MessageChannel = global.MessageChannel;
  var Dispatch = global.Dispatch;
  var counter = 0;
  var queue = {};
  var ONREADYSTATECHANGE = 'onreadystatechange';
  var defer, channel, port;
  
  var run = function run() {
    var id = +this; // eslint-disable-next-line no-prototype-builtins
  
    if (queue.hasOwnProperty(id)) {
      var fn = queue[id];
      delete queue[id];
      fn();
    }
  };
  
  var listener = function listener(event) {
    run.call(event.data);
  }; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
  
  
  if (!setTask || !clearTask) {
    setTask = function setImmediate(fn) {
      var args = [];
      var i = 1;
  
      while (arguments.length > i) {
        args.push(arguments[i++]);
      }
  
      queue[++counter] = function () {
        // eslint-disable-next-line no-new-func
        invoke(typeof fn == 'function' ? fn : Function(fn), args);
      };
  
      defer(counter);
      return counter;
    };
  
    clearTask = function clearImmediate(id) {
      delete queue[id];
    }; // Node.js 0.8-
  
  
    if (__webpack_require__(2258)(process) == 'process') {
      defer = function defer(id) {
        process.nextTick(ctx(run, id, 1));
      }; // Sphere (JS game engine) Dispatch API
  
    } else if (Dispatch && Dispatch.now) {
      defer = function defer(id) {
        Dispatch.now(ctx(run, id, 1));
      }; // Browsers with MessageChannel, includes WebWorkers
  
    } else if (MessageChannel) {
      channel = new MessageChannel();
      port = channel.port2;
      channel.port1.onmessage = listener;
      defer = ctx(port.postMessage, port, 1); // Browsers with postMessage, skip WebWorkers
      // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
    } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
      defer = function defer(id) {
        global.postMessage(id + '', '*');
      };
  
      global.addEventListener('message', listener, false); // IE8-
    } else if (ONREADYSTATECHANGE in cel('script')) {
      defer = function defer(id) {
        html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
          html.removeChild(this);
          run.call(id);
        };
      }; // Rest old browsers
  
    } else {
      defer = function defer(id) {
        setTimeout(ctx(run, id, 1), 0);
      };
    }
  }
  
  module.exports = {
    set: setTask,
    clear: clearTask
  };
  
  /***/ }),
  
  /***/ 724:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var toInteger = __webpack_require__(2836);
  
  var max = Math.max;
  var min = Math.min;
  
  module.exports = function (index, length) {
    index = toInteger(index);
    return index < 0 ? max(index + length, 0) : min(index, length);
  };
  
  /***/ }),
  
  /***/ 4079:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // https://tc39.github.io/ecma262/#sec-toindex
  var toInteger = __webpack_require__(2836);
  
  var toLength = __webpack_require__(4677);
  
  module.exports = function (it) {
    if (it === undefined) return 0;
    var number = toInteger(it);
    var length = toLength(number);
    if (number !== length) throw RangeError('Wrong length!');
    return length;
  };
  
  /***/ }),
  
  /***/ 2836:
  /***/ (function(module) {
  
  // 7.1.4 ToInteger
  var ceil = Math.ceil;
  var floor = Math.floor;
  
  module.exports = function (it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };
  
  /***/ }),
  
  /***/ 3165:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // to indexed object, toObject with fallback for non-array-like ES3 strings
  var IObject = __webpack_require__(2535);
  
  var defined = __webpack_require__(4695);
  
  module.exports = function (it) {
    return IObject(defined(it));
  };
  
  /***/ }),
  
  /***/ 4677:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // 7.1.15 ToLength
  var toInteger = __webpack_require__(2836);
  
  var min = Math.min;
  
  module.exports = function (it) {
    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
  };
  
  /***/ }),
  
  /***/ 120:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // 7.1.13 ToObject(argument)
  var defined = __webpack_require__(4695);
  
  module.exports = function (it) {
    return Object(defined(it));
  };
  
  /***/ }),
  
  /***/ 5848:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // 7.1.1 ToPrimitive(input [, PreferredType])
  var isObject = __webpack_require__(1541); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string
  
  
  module.exports = function (it, S) {
    if (!isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };
  
  /***/ }),
  
  /***/ 3136:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  if (__webpack_require__(6628)) {
    var LIBRARY = __webpack_require__(3381);
  
    var global = __webpack_require__(4319);
  
    var fails = __webpack_require__(8164);
  
    var $export = __webpack_require__(2583);
  
    var $typed = __webpack_require__(9833);
  
    var $buffer = __webpack_require__(5730);
  
    var ctx = __webpack_require__(4801);
  
    var anInstance = __webpack_require__(3047);
  
    var propertyDesc = __webpack_require__(5583);
  
    var hide = __webpack_require__(3817);
  
    var redefineAll = __webpack_require__(9128);
  
    var toInteger = __webpack_require__(2836);
  
    var toLength = __webpack_require__(4677);
  
    var toIndex = __webpack_require__(4079);
  
    var toAbsoluteIndex = __webpack_require__(724);
  
    var toPrimitive = __webpack_require__(5848);
  
    var has = __webpack_require__(6547);
  
    var classof = __webpack_require__(6289);
  
    var isObject = __webpack_require__(1541);
  
    var toObject = __webpack_require__(120);
  
    var isArrayIter = __webpack_require__(5361);
  
    var create = __webpack_require__(2851);
  
    var getPrototypeOf = __webpack_require__(9750);
  
    var gOPN = (__webpack_require__(2762).f);
  
    var getIterFn = __webpack_require__(8923);
  
    var uid = __webpack_require__(8376);
  
    var wks = __webpack_require__(1032);
  
    var createArrayMethod = __webpack_require__(3263);
  
    var createArrayIncludes = __webpack_require__(1408);
  
    var speciesConstructor = __webpack_require__(1822);
  
    var ArrayIterators = __webpack_require__(8735);
  
    var Iterators = __webpack_require__(9223);
  
    var $iterDetect = __webpack_require__(7633);
  
    var setSpecies = __webpack_require__(2415);
  
    var arrayFill = __webpack_require__(6590);
  
    var arrayCopyWithin = __webpack_require__(6027);
  
    var $DP = __webpack_require__(4770);
  
    var $GOPD = __webpack_require__(4254);
  
    var dP = $DP.f;
    var gOPD = $GOPD.f;
    var RangeError = global.RangeError;
    var TypeError = global.TypeError;
    var Uint8Array = global.Uint8Array;
    var ARRAY_BUFFER = 'ArrayBuffer';
    var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
    var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
    var PROTOTYPE = 'prototype';
    var ArrayProto = Array[PROTOTYPE];
    var $ArrayBuffer = $buffer.ArrayBuffer;
    var $DataView = $buffer.DataView;
    var arrayForEach = createArrayMethod(0);
    var arrayFilter = createArrayMethod(2);
    var arraySome = createArrayMethod(3);
    var arrayEvery = createArrayMethod(4);
    var arrayFind = createArrayMethod(5);
    var arrayFindIndex = createArrayMethod(6);
    var arrayIncludes = createArrayIncludes(true);
    var arrayIndexOf = createArrayIncludes(false);
    var arrayValues = ArrayIterators.values;
    var arrayKeys = ArrayIterators.keys;
    var arrayEntries = ArrayIterators.entries;
    var arrayLastIndexOf = ArrayProto.lastIndexOf;
    var arrayReduce = ArrayProto.reduce;
    var arrayReduceRight = ArrayProto.reduceRight;
    var arrayJoin = ArrayProto.join;
    var arraySort = ArrayProto.sort;
    var arraySlice = ArrayProto.slice;
    var arrayToString = ArrayProto.toString;
    var arrayToLocaleString = ArrayProto.toLocaleString;
    var ITERATOR = wks('iterator');
    var TAG = wks('toStringTag');
    var TYPED_CONSTRUCTOR = uid('typed_constructor');
    var DEF_CONSTRUCTOR = uid('def_constructor');
    var ALL_CONSTRUCTORS = $typed.CONSTR;
    var TYPED_ARRAY = $typed.TYPED;
    var VIEW = $typed.VIEW;
    var WRONG_LENGTH = 'Wrong length!';
    var $map = createArrayMethod(1, function (O, length) {
      return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
    });
    var LITTLE_ENDIAN = fails(function () {
      // eslint-disable-next-line no-undef
      return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
    });
    var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
      new Uint8Array(1).set({});
    });
  
    var toOffset = function toOffset(it, BYTES) {
      var offset = toInteger(it);
      if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
      return offset;
    };
  
    var validate = function validate(it) {
      if (isObject(it) && TYPED_ARRAY in it) return it;
      throw TypeError(it + ' is not a typed array!');
    };
  
    var allocate = function allocate(C, length) {
      if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
        throw TypeError('It is not a typed array constructor!');
      }
  
      return new C(length);
    };
  
    var speciesFromList = function speciesFromList(O, list) {
      return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
    };
  
    var fromList = function fromList(C, list) {
      var index = 0;
      var length = list.length;
      var result = allocate(C, length);
  
      while (length > index) {
        result[index] = list[index++];
      }
  
      return result;
    };
  
    var addGetter = function addGetter(it, key, internal) {
      dP(it, key, {
        get: function get() {
          return this._d[internal];
        }
      });
    };
  
    var $from = function from(source
    /* , mapfn, thisArg */
    ) {
      var O = toObject(source);
      var aLen = arguments.length;
      var mapfn = aLen > 1 ? arguments[1] : undefined;
      var mapping = mapfn !== undefined;
      var iterFn = getIterFn(O);
      var i, length, values, result, step, iterator;
  
      if (iterFn != undefined && !isArrayIter(iterFn)) {
        for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
          values.push(step.value);
        }
  
        O = values;
      }
  
      if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
  
      for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
        result[i] = mapping ? mapfn(O[i], i) : O[i];
      }
  
      return result;
    };
  
    var $of = function
      /* ...items */
    of() {
      var index = 0;
      var length = arguments.length;
      var result = allocate(this, length);
  
      while (length > index) {
        result[index] = arguments[index++];
      }
  
      return result;
    }; // iOS Safari 6.x fails here
  
  
    var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
      arrayToLocaleString.call(new Uint8Array(1));
    });
  
    var $toLocaleString = function toLocaleString() {
      return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
    };
  
    var proto = {
      copyWithin: function copyWithin(target, start
      /* , end */
      ) {
        return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
      },
      every: function every(callbackfn
      /* , thisArg */
      ) {
        return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      fill: function fill(value
      /* , start, end */
      ) {
        // eslint-disable-line no-unused-vars
        return arrayFill.apply(validate(this), arguments);
      },
      filter: function filter(callbackfn
      /* , thisArg */
      ) {
        return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));
      },
      find: function find(predicate
      /* , thisArg */
      ) {
        return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
      },
      findIndex: function findIndex(predicate
      /* , thisArg */
      ) {
        return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
      },
      forEach: function forEach(callbackfn
      /* , thisArg */
      ) {
        arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      indexOf: function indexOf(searchElement
      /* , fromIndex */
      ) {
        return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
      },
      includes: function includes(searchElement
      /* , fromIndex */
      ) {
        return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
      },
      join: function join(separator) {
        // eslint-disable-line no-unused-vars
        return arrayJoin.apply(validate(this), arguments);
      },
      lastIndexOf: function lastIndexOf(searchElement
      /* , fromIndex */
      ) {
        // eslint-disable-line no-unused-vars
        return arrayLastIndexOf.apply(validate(this), arguments);
      },
      map: function map(mapfn
      /* , thisArg */
      ) {
        return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      reduce: function reduce(callbackfn
      /* , initialValue */
      ) {
        // eslint-disable-line no-unused-vars
        return arrayReduce.apply(validate(this), arguments);
      },
      reduceRight: function reduceRight(callbackfn
      /* , initialValue */
      ) {
        // eslint-disable-line no-unused-vars
        return arrayReduceRight.apply(validate(this), arguments);
      },
      reverse: function reverse() {
        var that = this;
        var length = validate(that).length;
        var middle = Math.floor(length / 2);
        var index = 0;
        var value;
  
        while (index < middle) {
          value = that[index];
          that[index++] = that[--length];
          that[length] = value;
        }
  
        return that;
      },
      some: function some(callbackfn
      /* , thisArg */
      ) {
        return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      sort: function sort(comparefn) {
        return arraySort.call(validate(this), comparefn);
      },
      subarray: function subarray(begin, end) {
        var O = validate(this);
        var length = O.length;
        var $begin = toAbsoluteIndex(begin, length);
        return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin));
      }
    };
  
    var $slice = function slice(start, end) {
      return speciesFromList(this, arraySlice.call(validate(this), start, end));
    };
  
    var $set = function set(arrayLike
    /* , offset */
    ) {
      validate(this);
      var offset = toOffset(arguments[1], 1);
      var length = this.length;
      var src = toObject(arrayLike);
      var len = toLength(src.length);
      var index = 0;
      if (len + offset > length) throw RangeError(WRONG_LENGTH);
  
      while (index < len) {
        this[offset + index] = src[index++];
      }
    };
  
    var $iterators = {
      entries: function entries() {
        return arrayEntries.call(validate(this));
      },
      keys: function keys() {
        return arrayKeys.call(validate(this));
      },
      values: function values() {
        return arrayValues.call(validate(this));
      }
    };
  
    var isTAIndex = function isTAIndex(target, key) {
      return isObject(target) && target[TYPED_ARRAY] && _typeof(key) != 'symbol' && key in target && String(+key) == String(key);
    };
  
    var $getDesc = function getOwnPropertyDescriptor(target, key) {
      return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
    };
  
    var $setDesc = function defineProperty(target, key, desc) {
      if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set') // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {
        target[key] = desc.value;
        return target;
      }
  
      return dP(target, key, desc);
    };
  
    if (!ALL_CONSTRUCTORS) {
      $GOPD.f = $getDesc;
      $DP.f = $setDesc;
    }
  
    $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
      getOwnPropertyDescriptor: $getDesc,
      defineProperty: $setDesc
    });
  
    if (fails(function () {
      arrayToString.call({});
    })) {
      arrayToString = arrayToLocaleString = function toString() {
        return arrayJoin.call(this);
      };
    }
  
    var $TypedArrayPrototype$ = redefineAll({}, proto);
    redefineAll($TypedArrayPrototype$, $iterators);
    hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
    redefineAll($TypedArrayPrototype$, {
      slice: $slice,
      set: $set,
      constructor: function constructor() {
        /* noop */
      },
      toString: arrayToString,
      toLocaleString: $toLocaleString
    });
    addGetter($TypedArrayPrototype$, 'buffer', 'b');
    addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
    addGetter($TypedArrayPrototype$, 'byteLength', 'l');
    addGetter($TypedArrayPrototype$, 'length', 'e');
    dP($TypedArrayPrototype$, TAG, {
      get: function get() {
        return this[TYPED_ARRAY];
      }
    }); // eslint-disable-next-line max-statements
  
    module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
      CLAMPED = !!CLAMPED;
      var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
      var GETTER = 'get' + KEY;
      var SETTER = 'set' + KEY;
      var TypedArray = global[NAME];
      var Base = TypedArray || {};
      var TAC = TypedArray && getPrototypeOf(TypedArray);
      var FORCED = !TypedArray || !$typed.ABV;
      var O = {};
      var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
  
      var getter = function getter(that, index) {
        var data = that._d;
        return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
      };
  
      var setter = function setter(that, index, value) {
        var data = that._d;
        if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
        data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
      };
  
      var addElement = function addElement(that, index) {
        dP(that, index, {
          get: function get() {
            return getter(this, index);
          },
          set: function set(value) {
            return setter(this, index, value);
          },
          enumerable: true
        });
      };
  
      if (FORCED) {
        TypedArray = wrapper(function (that, data, $offset, $length) {
          anInstance(that, TypedArray, NAME, '_d');
          var index = 0;
          var offset = 0;
          var buffer, byteLength, length, klass;
  
          if (!isObject(data)) {
            length = toIndex(data);
            byteLength = length * BYTES;
            buffer = new $ArrayBuffer(byteLength);
          } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
            buffer = data;
            offset = toOffset($offset, BYTES);
            var $len = data.byteLength;
  
            if ($length === undefined) {
              if ($len % BYTES) throw RangeError(WRONG_LENGTH);
              byteLength = $len - offset;
              if (byteLength < 0) throw RangeError(WRONG_LENGTH);
            } else {
              byteLength = toLength($length) * BYTES;
              if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
            }
  
            length = byteLength / BYTES;
          } else if (TYPED_ARRAY in data) {
            return fromList(TypedArray, data);
          } else {
            return $from.call(TypedArray, data);
          }
  
          hide(that, '_d', {
            b: buffer,
            o: offset,
            l: byteLength,
            e: length,
            v: new $DataView(buffer)
          });
  
          while (index < length) {
            addElement(that, index++);
          }
        });
        TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
        hide(TypedArrayPrototype, 'constructor', TypedArray);
      } else if (!fails(function () {
        TypedArray(1);
      }) || !fails(function () {
        new TypedArray(-1); // eslint-disable-line no-new
      }) || !$iterDetect(function (iter) {
        new TypedArray(); // eslint-disable-line no-new
  
        new TypedArray(null); // eslint-disable-line no-new
  
        new TypedArray(1.5); // eslint-disable-line no-new
  
        new TypedArray(iter); // eslint-disable-line no-new
      }, true)) {
        TypedArray = wrapper(function (that, data, $offset, $length) {
          anInstance(that, TypedArray, NAME);
          var klass; // `ws` module bug, temporarily remove validation length for Uint8Array
          // https://github.com/websockets/ws/pull/645
  
          if (!isObject(data)) return new Base(toIndex(data));
  
          if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
            return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
          }
  
          if (TYPED_ARRAY in data) return fromList(TypedArray, data);
          return $from.call(TypedArray, data);
        });
        arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
          if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
        });
        TypedArray[PROTOTYPE] = TypedArrayPrototype;
        if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
      }
  
      var $nativeIterator = TypedArrayPrototype[ITERATOR];
      var CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
      var $iterator = $iterators.values;
      hide(TypedArray, TYPED_CONSTRUCTOR, true);
      hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
      hide(TypedArrayPrototype, VIEW, true);
      hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);
  
      if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
        dP(TypedArrayPrototype, TAG, {
          get: function get() {
            return NAME;
          }
        });
      }
  
      O[NAME] = TypedArray;
      $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
      $export($export.S, NAME, {
        BYTES_PER_ELEMENT: BYTES
      });
      $export($export.S + $export.F * fails(function () {
        Base.of.call(TypedArray, 1);
      }), NAME, {
        from: $from,
        of: $of
      });
      if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
      $export($export.P, NAME, proto);
      setSpecies(NAME);
      $export($export.P + $export.F * FORCED_SET, NAME, {
        set: $set
      });
      $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
      if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;
      $export($export.P + $export.F * fails(function () {
        new TypedArray(1).slice();
      }), NAME, {
        slice: $slice
      });
      $export($export.P + $export.F * (fails(function () {
        return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
      }) || !fails(function () {
        TypedArrayPrototype.toLocaleString.call([1, 2]);
      })), NAME, {
        toLocaleString: $toLocaleString
      });
      Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
      if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
    };
  } else module.exports = function () {
    /* empty */
  };
  
  /***/ }),
  
  /***/ 5730:
  /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
  
  "use strict";
  
  
  var global = __webpack_require__(4319);
  
  var DESCRIPTORS = __webpack_require__(6628);
  
  var LIBRARY = __webpack_require__(3381);
  
  var $typed = __webpack_require__(9833);
  
  var hide = __webpack_require__(3817);
  
  var redefineAll = __webpack_require__(9128);
  
  var fails = __webpack_require__(8164);
  
  var anInstance = __webpack_require__(3047);
  
  var toInteger = __webpack_require__(2836);
  
  var toLength = __webpack_require__(4677);
  
  var toIndex = __webpack_require__(4079);
  
  var gOPN = (__webpack_require__(2762).f);
  
  var dP = (__webpack_require__(4770).f);
  
  var arrayFill = __webpack_require__(6590);
  
  var setToStringTag = __webpack_require__(6556);
  
  var ARRAY_BUFFER = 'ArrayBuffer';
  var DATA_VIEW = 'DataView';
  var PROTOTYPE = 'prototype';
  var WRONG_LENGTH = 'Wrong length!';
  var WRONG_INDEX = 'Wrong index!';
  var $ArrayBuffer = global[ARRAY_BUFFER];
  var $DataView = global[DATA_VIEW];
  var Math = global.Math;
  var RangeError = global.RangeError; // eslint-disable-next-line no-shadow-restricted-names
  
  var Infinity = global.Infinity;
  var BaseBuffer = $ArrayBuffer;
  var abs = Math.abs;
  var pow = Math.pow;
  var floor = Math.floor;
  var log = Math.log;
  var LN2 = Math.LN2;
  var BUFFER = 'buffer';
  var BYTE_LENGTH = 'byteLength';
  var BYTE_OFFSET = 'byteOffset';
  var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
  var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
  var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET; // IEEE754 conversions based on https://github.com/feross/ieee754
  
  function packIEEE754(value, mLen, nBytes) {
    var buffer = new Array(nBytes);
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
    var i = 0;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    var e, m, c;
    value = abs(value); // eslint-disable-next-line no-self-compare
  
    if (value != value || value === Infinity) {
      // eslint-disable-next-line no-self-compare
      m = value != value ? 1 : 0;
      e = eMax;
    } else {
      e = floor(log(value) / LN2);
  
      if (value * (c = pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
  
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * pow(2, 1 - eBias);
      }
  
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
  
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * pow(2, eBias - 1) * pow(2, mLen);
        e = 0;
      }
    }
  
    for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8) {
      ;
    }
  
    e = e << mLen | m;
    eLen += mLen;
  
    for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8) {
      ;
    }
  
    buffer[--i] |= s * 128;
    return buffer;
  }
  
  function unpackIEEE754(buffer, mLen, nBytes) {
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = eLen - 7;
    var i = nBytes - 1;
    var s = buffer[i--];
    var e = s & 127;
    var m;
    s >>= 7;
  
    for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8) {
      ;
    }
  
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
  
    for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8) {
      ;
    }
  
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : s ? -Infinity : Infinity;
    } else {
      m = m + pow(2, mLen);
      e = e - eBias;
    }
  
    return (s ? -1 : 1) * m * pow(2, e - mLen);
  }
  
  function unpackI32(bytes) {
    return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
  }
  
  function packI8(it) {
    return [it & 0xff];
  }
  
  function packI16(it) {
    return [it & 0xff, it >> 8 & 0xff];
  }
  
  function packI32(it) {
    return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
  }
  
  function packF64(it) {
    return packIEEE754(it, 52, 8);
  }
  
  function packF32(it) {
    return packIEEE754(it, 23, 4);
  }
  
  function addGetter(C, key, internal) {
    dP(C[PROTOTYPE], key, {
      get: function get() {
        return this[internal];
      }
    });
  }
  
  function get(view, bytes, index, isLittleEndian) {
    var numIndex = +index;
    var intIndex = toIndex(numIndex);
    if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
    var store = view[$BUFFER]._b;
    var start = intIndex + view[$OFFSET];
    var pack = store.slice(start, start + bytes);
    return isLittleEndian ? pack : pack.reverse();
  }
  
  function set(view, bytes, index, conversion, value, isLittleEndian) {
    var numIndex = +index;
    var intIndex = toIndex(numIndex);
    if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
    var store = view[$BUFFER]._b;
    var start = intIndex + view[$OFFSET];
    var pack = conversion(+value);
  
    for (var i = 0; i < bytes; i++) {
      store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
    }
  }
  
  if (!$typed.ABV) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
      var byteLength = toIndex(length);
      this._b = arrayFill.call(new Array(byteLength), 0);
      this[$LENGTH] = byteLength;
    };
  
    $DataView = function DataView(buffer, byteOffset, byteLength) {
      anInstance(this, $DataView, DATA_VIEW);
      anInstance(buffer, $ArrayBuffer, DATA_VIEW);
      var bufferLength = buffer[$LENGTH];
      var offset = toInteger(byteOffset);
      if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
      byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
      if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
      this[$BUFFER] = buffer;
      this[$OFFSET] = offset;
      this[$LENGTH] = byteLength;
    };
  
    if (DESCRIPTORS) {
      addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
      addGetter($DataView, BUFFER, '_b');
      addGetter($DataView, BYTE_LENGTH, '_l');
      addGetter($DataView, BYTE_OFFSET, '_o');
    }
  
    redefineAll($DataView[PROTOTYPE], {
      getInt8: function getInt8(byteOffset) {
        return get(this, 1, byteOffset)[0] << 24 >> 24;
      },
      getUint8: function getUint8(byteOffset) {
        return get(this, 1, byteOffset)[0];
      },
      getInt16: function getInt16(byteOffset
      /* , littleEndian */
      ) {
        var bytes = get(this, 2, byteOffset, arguments[1]);
        return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
      },
      getUint16: function getUint16(byteOffset
      /* , littleEndian */
      ) {
        var bytes = get(this, 2, byteOffset, arguments[1]);
        return bytes[1] << 8 | bytes[0];
      },
      getInt32: function getInt32(byteOffset
      /* , littleEndian */
      ) {
        return unpackI32(get(this, 4, byteOffset, arguments[1]));
      },
      getUint32: function getUint32(byteOffset
      /* , littleEndian */
      ) {
        return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
      },
      getFloat32: function getFloat32(byteOffset
      /* , littleEndian */
      ) {
        return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
      },
      getFloat64: function getFloat64(byteOffset
      /* , littleEndian */
      ) {
        return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
      },
      setInt8: function setInt8(byteOffset, value) {
        set(this, 1, byteOffset, packI8, value);
      },
      setUint8: function setUint8(byteOffset, value) {
        set(this, 1, byteOffset, packI8, value);
      },
      setInt16: function setInt16(byteOffset, value
      /* , littleEndian */
      ) {
        set(this, 2, byteOffset, packI16, value, arguments[2]);
      },
      setUint16: function setUint16(byteOffset, value
      /* , littleEndian */
      ) {
        set(this, 2, byteOffset, packI16, value, arguments[2]);
      },
      setInt32: function setInt32(byteOffset, value
      /* , littleEndian */
      ) {
        set(this, 4, byteOffset, packI32, value, arguments[2]);
      },
      setUint32: function setUint32(byteOffset, value
      /* , littleEndian */
      ) {
        set(this, 4, byteOffset, packI32, value, arguments[2]);
      },
      setFloat32: function setFloat32(byteOffset, value
      /* , littleEndian */
      ) {
        set(this, 4, byteOffset, packF32, value, arguments[2]);
      },
      setFloat64: function setFloat64(byteOffset, value
      /* , littleEndian */
      ) {
        set(this, 8, byteOffset, packF64, value, arguments[2]);
      }
    });
  } else {
    if (!fails(function () {
      $ArrayBuffer(1);
    }) || !fails(function () {
      new $ArrayBuffer(-1); // eslint-disable-line no-new
    }) || fails(function () {
      new $ArrayBuffer(); // eslint-disable-line no-new
  
      new $ArrayBuffer(1.5); // eslint-disable-line no-new
  
      new $ArrayBuffer(NaN); // eslint-disable-line no-new
  
      return $ArrayBuffer.name != ARRAY_BUFFER;
    })) {
      $ArrayBuffer = function ArrayBuffer(length) {
        anInstance(this, $ArrayBuffer);
        return new BaseBuffer(toIndex(length));
      };
  
      var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
  
      for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
        if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
      }
  
      if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
    } // iOS Safari 7.x bug
  
  
    var view = new $DataView(new $ArrayBuffer(2));
    var $setInt8 = $DataView[PROTOTYPE].setInt8;
    view.setInt8(0, 2147483648);
    view.setInt8(1, 2147483649);
    if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
      setInt8: function setInt8(byteOffset, value) {
        $setInt8.call(this, byteOffset, value << 24 >> 24);
      },
      setUint8: function setUint8(byteOffset, value) {
        $setInt8.call(this, byteOffset, value << 24 >> 24);
      }
    }, true);
  }
  
  setToStringTag($ArrayBuffer, ARRAY_BUFFER);
  setToStringTag($DataView, DATA_VIEW);
  hide($DataView[PROTOTYPE], $typed.VIEW, true);
  exports[ARRAY_BUFFER] = $ArrayBuffer;
  exports[DATA_VIEW] = $DataView;
  
  /***/ }),
  
  /***/ 9833:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var global = __webpack_require__(4319);
  
  var hide = __webpack_require__(3817);
  
  var uid = __webpack_require__(8376);
  
  var TYPED = uid('typed_array');
  var VIEW = uid('view');
  var ABV = !!(global.ArrayBuffer && global.DataView);
  var CONSTR = ABV;
  var i = 0;
  var l = 9;
  var Typed;
  var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');
  
  while (i < l) {
    if (Typed = global[TypedArrayConstructors[i++]]) {
      hide(Typed.prototype, TYPED, true);
      hide(Typed.prototype, VIEW, true);
    } else CONSTR = false;
  }
  
  module.exports = {
    ABV: ABV,
    CONSTR: CONSTR,
    TYPED: TYPED,
    VIEW: VIEW
  };
  
  /***/ }),
  
  /***/ 8376:
  /***/ (function(module) {
  
  var id = 0;
  var px = Math.random();
  
  module.exports = function (key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };
  
  /***/ }),
  
  /***/ 5752:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var global = __webpack_require__(4319);
  
  var navigator = global.navigator;
  module.exports = navigator && navigator.userAgent || '';
  
  /***/ }),
  
  /***/ 9668:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var isObject = __webpack_require__(1541);
  
  module.exports = function (it, TYPE) {
    if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
    return it;
  };
  
  /***/ }),
  
  /***/ 5765:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var global = __webpack_require__(4319);
  
  var core = __webpack_require__(195);
  
  var LIBRARY = __webpack_require__(3381);
  
  var wksExt = __webpack_require__(5634);
  
  var defineProperty = (__webpack_require__(4770).f);
  
  module.exports = function (name) {
    var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
    if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
      value: wksExt.f(name)
    });
  };
  
  /***/ }),
  
  /***/ 5634:
  /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
  
  exports.f = __webpack_require__(1032);
  
  /***/ }),
  
  /***/ 1032:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var store = __webpack_require__(1400)('wks');
  
  var uid = __webpack_require__(8376);
  
  var _Symbol = (__webpack_require__(4319).Symbol);
  
  var USE_SYMBOL = typeof _Symbol == 'function';
  
  var $exports = module.exports = function (name) {
    return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : uid)('Symbol.' + name));
  };
  
  $exports.store = store;
  
  /***/ }),
  
  /***/ 8923:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var classof = __webpack_require__(6289);
  
  var ITERATOR = __webpack_require__(1032)('iterator');
  
  var Iterators = __webpack_require__(9223);
  
  module.exports = (__webpack_require__(195).getIteratorMethod) = function (it) {
    if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
  };
  
  /***/ }),
  
  /***/ 1185:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
  var $export = __webpack_require__(2583);
  
  $export($export.P, 'Array', {
    copyWithin: __webpack_require__(6027)
  });
  
  __webpack_require__(6717)('copyWithin');
  
  /***/ }),
  
  /***/ 2139:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $export = __webpack_require__(2583);
  
  var $every = __webpack_require__(3263)(4);
  
  $export($export.P + $export.F * !__webpack_require__(7181)([].every, true), 'Array', {
    // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
    every: function every(callbackfn
    /* , thisArg */
    ) {
      return $every(this, callbackfn, arguments[1]);
    }
  });
  
  /***/ }),
  
  /***/ 7003:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
  var $export = __webpack_require__(2583);
  
  $export($export.P, 'Array', {
    fill: __webpack_require__(6590)
  });
  
  __webpack_require__(6717)('fill');
  
  /***/ }),
  
  /***/ 8357:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $export = __webpack_require__(2583);
  
  var $filter = __webpack_require__(3263)(2);
  
  $export($export.P + $export.F * !__webpack_require__(7181)([].filter, true), 'Array', {
    // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
    filter: function filter(callbackfn
    /* , thisArg */
    ) {
      return $filter(this, callbackfn, arguments[1]);
    }
  });
  
  /***/ }),
  
  /***/ 5462:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
  
  var $export = __webpack_require__(2583);
  
  var $find = __webpack_require__(3263)(6);
  
  var KEY = 'findIndex';
  var forced = true; // Shouldn't skip holes
  
  if (KEY in []) Array(1)[KEY](function () {
    forced = false;
  });
  $export($export.P + $export.F * forced, 'Array', {
    findIndex: function findIndex(callbackfn
    /* , that = undefined */
    ) {
      return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });
  
  __webpack_require__(6717)(KEY);
  
  /***/ }),
  
  /***/ 8225:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
  
  var $export = __webpack_require__(2583);
  
  var $find = __webpack_require__(3263)(5);
  
  var KEY = 'find';
  var forced = true; // Shouldn't skip holes
  
  if (KEY in []) Array(1)[KEY](function () {
    forced = false;
  });
  $export($export.P + $export.F * forced, 'Array', {
    find: function find(callbackfn
    /* , that = undefined */
    ) {
      return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });
  
  __webpack_require__(6717)(KEY);
  
  /***/ }),
  
  /***/ 4416:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $export = __webpack_require__(2583);
  
  var $forEach = __webpack_require__(3263)(0);
  
  var STRICT = __webpack_require__(7181)([].forEach, true);
  
  $export($export.P + $export.F * !STRICT, 'Array', {
    // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
    forEach: function forEach(callbackfn
    /* , thisArg */
    ) {
      return $forEach(this, callbackfn, arguments[1]);
    }
  });
  
  /***/ }),
  
  /***/ 8912:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var ctx = __webpack_require__(4801);
  
  var $export = __webpack_require__(2583);
  
  var toObject = __webpack_require__(120);
  
  var call = __webpack_require__(3373);
  
  var isArrayIter = __webpack_require__(5361);
  
  var toLength = __webpack_require__(4677);
  
  var createProperty = __webpack_require__(7875);
  
  var getIterFn = __webpack_require__(8923);
  
  $export($export.S + $export.F * !__webpack_require__(7633)(function (iter) {
    Array.from(iter);
  }), 'Array', {
    // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
    from: function from(arrayLike
    /* , mapfn = undefined, thisArg = undefined */
    ) {
      var O = toObject(arrayLike);
      var C = typeof this == 'function' ? this : Array;
      var aLen = arguments.length;
      var mapfn = aLen > 1 ? arguments[1] : undefined;
      var mapping = mapfn !== undefined;
      var index = 0;
      var iterFn = getIterFn(O);
      var length, result, step, iterator;
      if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2); // if object isn't iterable or it's array with default iterator - use simple case
  
      if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
        for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
          createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
        }
      } else {
        length = toLength(O.length);
  
        for (result = new C(length); length > index; index++) {
          createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
        }
      }
  
      result.length = index;
      return result;
    }
  });
  
  /***/ }),
  
  /***/ 8499:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $export = __webpack_require__(2583);
  
  var $indexOf = __webpack_require__(1408)(false);
  
  var $native = [].indexOf;
  var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
  $export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(7181)($native)), 'Array', {
    // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
    indexOf: function indexOf(searchElement
    /* , fromIndex = 0 */
    ) {
      return NEGATIVE_ZERO // convert -0 to +0
      ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
    }
  });
  
  /***/ }),
  
  /***/ 1628:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
  var $export = __webpack_require__(2583);
  
  $export($export.S, 'Array', {
    isArray: __webpack_require__(8859)
  });
  
  /***/ }),
  
  /***/ 8735:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var addToUnscopables = __webpack_require__(6717);
  
  var step = __webpack_require__(464);
  
  var Iterators = __webpack_require__(9223);
  
  var toIObject = __webpack_require__(3165); // 22.1.3.4 Array.prototype.entries()
  // 22.1.3.13 Array.prototype.keys()
  // 22.1.3.29 Array.prototype.values()
  // 22.1.3.30 Array.prototype[@@iterator]()
  
  
  module.exports = __webpack_require__(9857)(Array, 'Array', function (iterated, kind) {
    this._t = toIObject(iterated); // target
  
    this._i = 0; // next index
  
    this._k = kind; // kind
    // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
  }, function () {
    var O = this._t;
    var kind = this._k;
    var index = this._i++;
  
    if (!O || index >= O.length) {
      this._t = undefined;
      return step(1);
    }
  
    if (kind == 'keys') return step(0, index);
    if (kind == 'values') return step(0, O[index]);
    return step(0, [index, O[index]]);
  }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
  
  Iterators.Arguments = Iterators.Array;
  addToUnscopables('keys');
  addToUnscopables('values');
  addToUnscopables('entries');
  
  /***/ }),
  
  /***/ 4619:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // 22.1.3.13 Array.prototype.join(separator)
  
  var $export = __webpack_require__(2583);
  
  var toIObject = __webpack_require__(3165);
  
  var arrayJoin = [].join; // fallback for not array-like strings
  
  $export($export.P + $export.F * (__webpack_require__(2535) != Object || !__webpack_require__(7181)(arrayJoin)), 'Array', {
    join: function join(separator) {
      return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
    }
  });
  
  /***/ }),
  
  /***/ 5337:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $export = __webpack_require__(2583);
  
  var toIObject = __webpack_require__(3165);
  
  var toInteger = __webpack_require__(2836);
  
  var toLength = __webpack_require__(4677);
  
  var $native = [].lastIndexOf;
  var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
  $export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(7181)($native)), 'Array', {
    // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
    lastIndexOf: function lastIndexOf(searchElement
    /* , fromIndex = @[*-1] */
    ) {
      // convert -0 to +0
      if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
      var O = toIObject(this);
      var length = toLength(O.length);
      var index = length - 1;
      if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
      if (index < 0) index = length + index;
  
      for (; index >= 0; index--) {
        if (index in O) if (O[index] === searchElement) return index || 0;
      }
  
      return -1;
    }
  });
  
  /***/ }),
  
  /***/ 9508:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $export = __webpack_require__(2583);
  
  var $map = __webpack_require__(3263)(1);
  
  $export($export.P + $export.F * !__webpack_require__(7181)([].map, true), 'Array', {
    // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
    map: function map(callbackfn
    /* , thisArg */
    ) {
      return $map(this, callbackfn, arguments[1]);
    }
  });
  
  /***/ }),
  
  /***/ 3938:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $export = __webpack_require__(2583);
  
  var createProperty = __webpack_require__(7875); // WebKit Array.of isn't generic
  
  
  $export($export.S + $export.F * __webpack_require__(8164)(function () {
    function F() {
      /* empty */
    }
  
    return !(Array.of.call(F) instanceof F);
  }), 'Array', {
    // 22.1.2.3 Array.of( ...items)
    of: function
      /* ...args */
    of() {
      var index = 0;
      var aLen = arguments.length;
      var result = new (typeof this == 'function' ? this : Array)(aLen);
  
      while (aLen > index) {
        createProperty(result, index, arguments[index++]);
      }
  
      result.length = aLen;
      return result;
    }
  });
  
  /***/ }),
  
  /***/ 9519:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $export = __webpack_require__(2583);
  
  var $reduce = __webpack_require__(4782);
  
  $export($export.P + $export.F * !__webpack_require__(7181)([].reduceRight, true), 'Array', {
    // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
    reduceRight: function reduceRight(callbackfn
    /* , initialValue */
    ) {
      return $reduce(this, callbackfn, arguments.length, arguments[1], true);
    }
  });
  
  /***/ }),
  
  /***/ 8707:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $export = __webpack_require__(2583);
  
  var $reduce = __webpack_require__(4782);
  
  $export($export.P + $export.F * !__webpack_require__(7181)([].reduce, true), 'Array', {
    // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
    reduce: function reduce(callbackfn
    /* , initialValue */
    ) {
      return $reduce(this, callbackfn, arguments.length, arguments[1], false);
    }
  });
  
  /***/ }),
  
  /***/ 6119:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $export = __webpack_require__(2583);
  
  var html = __webpack_require__(5991);
  
  var cof = __webpack_require__(2258);
  
  var toAbsoluteIndex = __webpack_require__(724);
  
  var toLength = __webpack_require__(4677);
  
  var arraySlice = [].slice; // fallback for not array-like ES3 strings and DOM objects
  
  $export($export.P + $export.F * __webpack_require__(8164)(function () {
    if (html) arraySlice.call(html);
  }), 'Array', {
    slice: function slice(begin, end) {
      var len = toLength(this.length);
      var klass = cof(this);
      end = end === undefined ? len : end;
      if (klass == 'Array') return arraySlice.call(this, begin, end);
      var start = toAbsoluteIndex(begin, len);
      var upTo = toAbsoluteIndex(end, len);
      var size = toLength(upTo - start);
      var cloned = new Array(size);
      var i = 0;
  
      for (; i < size; i++) {
        cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
      }
  
      return cloned;
    }
  });
  
  /***/ }),
  
  /***/ 7315:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $export = __webpack_require__(2583);
  
  var $some = __webpack_require__(3263)(3);
  
  $export($export.P + $export.F * !__webpack_require__(7181)([].some, true), 'Array', {
    // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
    some: function some(callbackfn
    /* , thisArg */
    ) {
      return $some(this, callbackfn, arguments[1]);
    }
  });
  
  /***/ }),
  
  /***/ 7346:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $export = __webpack_require__(2583);
  
  var aFunction = __webpack_require__(4133);
  
  var toObject = __webpack_require__(120);
  
  var fails = __webpack_require__(8164);
  
  var $sort = [].sort;
  var test = [1, 2, 3];
  $export($export.P + $export.F * (fails(function () {
    // IE8-
    test.sort(undefined);
  }) || !fails(function () {
    // V8 bug
    test.sort(null); // Old WebKit
  }) || !__webpack_require__(7181)($sort)), 'Array', {
    // 22.1.3.25 Array.prototype.sort(comparefn)
    sort: function sort(comparefn) {
      return comparefn === undefined ? $sort.call(toObject(this)) : $sort.call(toObject(this), aFunction(comparefn));
    }
  });
  
  /***/ }),
  
  /***/ 4437:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(2415)('Array');
  
  /***/ }),
  
  /***/ 3015:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.3.3.1 / 15.9.4.4 Date.now()
  var $export = __webpack_require__(2583);
  
  $export($export.S, 'Date', {
    now: function now() {
      return new Date().getTime();
    }
  });
  
  /***/ }),
  
  /***/ 8720:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
  var $export = __webpack_require__(2583);
  
  var toISOString = __webpack_require__(5982); // PhantomJS / old WebKit has a broken implementations
  
  
  $export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
    toISOString: toISOString
  });
  
  /***/ }),
  
  /***/ 5909:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $export = __webpack_require__(2583);
  
  var toObject = __webpack_require__(120);
  
  var toPrimitive = __webpack_require__(5848);
  
  $export($export.P + $export.F * __webpack_require__(8164)(function () {
    return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({
      toISOString: function toISOString() {
        return 1;
      }
    }) !== 1;
  }), 'Date', {
    // eslint-disable-next-line no-unused-vars
    toJSON: function toJSON(key) {
      var O = toObject(this);
      var pv = toPrimitive(O);
      return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
    }
  });
  
  /***/ }),
  
  /***/ 6381:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  var TO_PRIMITIVE = __webpack_require__(1032)('toPrimitive');
  
  var proto = Date.prototype;
  if (!(TO_PRIMITIVE in proto)) __webpack_require__(3817)(proto, TO_PRIMITIVE, __webpack_require__(2171));
  
  /***/ }),
  
  /***/ 2711:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  var DateProto = Date.prototype;
  var INVALID_DATE = 'Invalid Date';
  var TO_STRING = 'toString';
  var $toString = DateProto[TO_STRING];
  var getTime = DateProto.getTime;
  
  if (new Date(NaN) + '' != INVALID_DATE) {
    __webpack_require__(7070)(DateProto, TO_STRING, function toString() {
      var value = getTime.call(this); // eslint-disable-next-line no-self-compare
  
      return value === value ? $toString.call(this) : INVALID_DATE;
    });
  }
  
  /***/ }),
  
  /***/ 4027:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
  var $export = __webpack_require__(2583);
  
  $export($export.P, 'Function', {
    bind: __webpack_require__(825)
  });
  
  /***/ }),
  
  /***/ 3395:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var isObject = __webpack_require__(1541);
  
  var getPrototypeOf = __webpack_require__(9750);
  
  var HAS_INSTANCE = __webpack_require__(1032)('hasInstance');
  
  var FunctionProto = Function.prototype; // 19.2.3.6 Function.prototype[@@hasInstance](V)
  
  if (!(HAS_INSTANCE in FunctionProto)) (__webpack_require__(4770).f)(FunctionProto, HAS_INSTANCE, {
    value: function value(O) {
      if (typeof this != 'function' || !isObject(O)) return false;
      if (!isObject(this.prototype)) return O instanceof this; // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  
      while (O = getPrototypeOf(O)) {
        if (this.prototype === O) return true;
      }
  
      return false;
    }
  });
  
  /***/ }),
  
  /***/ 3434:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  var dP = (__webpack_require__(4770).f);
  
  var FProto = Function.prototype;
  var nameRE = /^\s*function ([^ (]*)/;
  var NAME = 'name'; // 19.2.4.2 name
  
  NAME in FProto || __webpack_require__(6628) && dP(FProto, NAME, {
    configurable: true,
    get: function get() {
      try {
        return ('' + this).match(nameRE)[1];
      } catch (e) {
        return '';
      }
    }
  });
  
  /***/ }),
  
  /***/ 9237:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var strong = __webpack_require__(2878);
  
  var validate = __webpack_require__(9668);
  
  var MAP = 'Map'; // 23.1 Map Objects
  
  module.exports = __webpack_require__(2411)(MAP, function (get) {
    return function Map() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  }, {
    // 23.1.3.6 Map.prototype.get(key)
    get: function get(key) {
      var entry = strong.getEntry(validate(this, MAP), key);
      return entry && entry.v;
    },
    // 23.1.3.9 Map.prototype.set(key, value)
    set: function set(key, value) {
      return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
    }
  }, strong, true);
  
  /***/ }),
  
  /***/ 9041:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.2.2.3 Math.acosh(x)
  var $export = __webpack_require__(2583);
  
  var log1p = __webpack_require__(3678);
  
  var sqrt = Math.sqrt;
  var $acosh = Math.acosh;
  $export($export.S + $export.F * !($acosh // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710 // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity), 'Math', {
    acosh: function acosh(x) {
      return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
    }
  });
  
  /***/ }),
  
  /***/ 1326:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.2.2.5 Math.asinh(x)
  var $export = __webpack_require__(2583);
  
  var $asinh = Math.asinh;
  
  function asinh(x) {
    return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
  } // Tor Browser bug: Math.asinh(0) -> -0
  
  
  $export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {
    asinh: asinh
  });
  
  /***/ }),
  
  /***/ 5590:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.2.2.7 Math.atanh(x)
  var $export = __webpack_require__(2583);
  
  var $atanh = Math.atanh; // Tor Browser bug: Math.atanh(-0) -> 0
  
  $export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
    atanh: function atanh(x) {
      return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
    }
  });
  
  /***/ }),
  
  /***/ 5794:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.2.2.9 Math.cbrt(x)
  var $export = __webpack_require__(2583);
  
  var sign = __webpack_require__(1498);
  
  $export($export.S, 'Math', {
    cbrt: function cbrt(x) {
      return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
    }
  });
  
  /***/ }),
  
  /***/ 8929:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.2.2.11 Math.clz32(x)
  var $export = __webpack_require__(2583);
  
  $export($export.S, 'Math', {
    clz32: function clz32(x) {
      return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
    }
  });
  
  /***/ }),
  
  /***/ 8107:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.2.2.12 Math.cosh(x)
  var $export = __webpack_require__(2583);
  
  var exp = Math.exp;
  $export($export.S, 'Math', {
    cosh: function cosh(x) {
      return (exp(x = +x) + exp(-x)) / 2;
    }
  });
  
  /***/ }),
  
  /***/ 4675:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.2.2.14 Math.expm1(x)
  var $export = __webpack_require__(2583);
  
  var $expm1 = __webpack_require__(4835);
  
  $export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {
    expm1: $expm1
  });
  
  /***/ }),
  
  /***/ 3794:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.2.2.16 Math.fround(x)
  var $export = __webpack_require__(2583);
  
  $export($export.S, 'Math', {
    fround: __webpack_require__(5258)
  });
  
  /***/ }),
  
  /***/ 2753:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
  var $export = __webpack_require__(2583);
  
  var abs = Math.abs;
  $export($export.S, 'Math', {
    hypot: function hypot(value1, value2) {
      // eslint-disable-line no-unused-vars
      var sum = 0;
      var i = 0;
      var aLen = arguments.length;
      var larg = 0;
      var arg, div;
  
      while (i < aLen) {
        arg = abs(arguments[i++]);
  
        if (larg < arg) {
          div = larg / arg;
          sum = sum * div * div + 1;
          larg = arg;
        } else if (arg > 0) {
          div = arg / larg;
          sum += div * div;
        } else sum += arg;
      }
  
      return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
    }
  });
  
  /***/ }),
  
  /***/ 1019:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.2.2.18 Math.imul(x, y)
  var $export = __webpack_require__(2583);
  
  var $imul = Math.imul; // some WebKit versions fails with big numbers, some has wrong arity
  
  $export($export.S + $export.F * __webpack_require__(8164)(function () {
    return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
  }), 'Math', {
    imul: function imul(x, y) {
      var UINT16 = 0xffff;
      var xn = +x;
      var yn = +y;
      var xl = UINT16 & xn;
      var yl = UINT16 & yn;
      return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
    }
  });
  
  /***/ }),
  
  /***/ 4228:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.2.2.21 Math.log10(x)
  var $export = __webpack_require__(2583);
  
  $export($export.S, 'Math', {
    log10: function log10(x) {
      return Math.log(x) * Math.LOG10E;
    }
  });
  
  /***/ }),
  
  /***/ 8179:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.2.2.20 Math.log1p(x)
  var $export = __webpack_require__(2583);
  
  $export($export.S, 'Math', {
    log1p: __webpack_require__(3678)
  });
  
  /***/ }),
  
  /***/ 2011:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.2.2.22 Math.log2(x)
  var $export = __webpack_require__(2583);
  
  $export($export.S, 'Math', {
    log2: function log2(x) {
      return Math.log(x) / Math.LN2;
    }
  });
  
  /***/ }),
  
  /***/ 1034:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.2.2.28 Math.sign(x)
  var $export = __webpack_require__(2583);
  
  $export($export.S, 'Math', {
    sign: __webpack_require__(1498)
  });
  
  /***/ }),
  
  /***/ 533:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.2.2.30 Math.sinh(x)
  var $export = __webpack_require__(2583);
  
  var expm1 = __webpack_require__(4835);
  
  var exp = Math.exp; // V8 near Chromium 38 has a problem with very small numbers
  
  $export($export.S + $export.F * __webpack_require__(8164)(function () {
    return !Math.sinh(-2e-17) != -2e-17;
  }), 'Math', {
    sinh: function sinh(x) {
      return Math.abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
    }
  });
  
  /***/ }),
  
  /***/ 2386:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.2.2.33 Math.tanh(x)
  var $export = __webpack_require__(2583);
  
  var expm1 = __webpack_require__(4835);
  
  var exp = Math.exp;
  $export($export.S, 'Math', {
    tanh: function tanh(x) {
      var a = expm1(x = +x);
      var b = expm1(-x);
      return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
    }
  });
  
  /***/ }),
  
  /***/ 1050:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.2.2.34 Math.trunc(x)
  var $export = __webpack_require__(2583);
  
  $export($export.S, 'Math', {
    trunc: function trunc(it) {
      return (it > 0 ? Math.floor : Math.ceil)(it);
    }
  });
  
  /***/ }),
  
  /***/ 2142:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var global = __webpack_require__(4319);
  
  var has = __webpack_require__(6547);
  
  var cof = __webpack_require__(2258);
  
  var inheritIfRequired = __webpack_require__(3914);
  
  var toPrimitive = __webpack_require__(5848);
  
  var fails = __webpack_require__(8164);
  
  var gOPN = (__webpack_require__(2762).f);
  
  var gOPD = (__webpack_require__(4254).f);
  
  var dP = (__webpack_require__(4770).f);
  
  var $trim = (__webpack_require__(9565).trim);
  
  var NUMBER = 'Number';
  var $Number = global[NUMBER];
  var Base = $Number;
  var proto = $Number.prototype; // Opera ~12 has broken Object#toString
  
  var BROKEN_COF = cof(__webpack_require__(2851)(proto)) == NUMBER;
  var TRIM = ('trim' in String.prototype); // 7.1.3 ToNumber(argument)
  
  var toNumber = function toNumber(argument) {
    var it = toPrimitive(argument, false);
  
    if (typeof it == 'string' && it.length > 2) {
      it = TRIM ? it.trim() : $trim(it, 3);
      var first = it.charCodeAt(0);
      var third, radix, maxCode;
  
      if (first === 43 || first === 45) {
        third = it.charCodeAt(2);
        if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
      } else if (first === 48) {
        switch (it.charCodeAt(1)) {
          case 66:
          case 98:
            radix = 2;
            maxCode = 49;
            break;
          // fast equal /^0b[01]+$/i
  
          case 79:
          case 111:
            radix = 8;
            maxCode = 55;
            break;
          // fast equal /^0o[0-7]+$/i
  
          default:
            return +it;
        }
  
        for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
          code = digits.charCodeAt(i); // parseInt parses a string to a first unavailable symbol
          // but ToNumber should return NaN if a string contains unavailable symbols
  
          if (code < 48 || code > maxCode) return NaN;
        }
  
        return parseInt(digits, radix);
      }
    }
  
    return +it;
  };
  
  if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
    $Number = function Number(value) {
      var it = arguments.length < 1 ? 0 : value;
      var that = this;
      return that instanceof $Number // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () {
        proto.valueOf.call(that);
      }) : cof(that) != NUMBER) ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
    };
  
    for (var keys = __webpack_require__(6628) ? gOPN(Base) : ( // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {
      if (has(Base, key = keys[j]) && !has($Number, key)) {
        dP($Number, key, gOPD(Base, key));
      }
    }
  
    $Number.prototype = proto;
    proto.constructor = $Number;
  
    __webpack_require__(7070)(global, NUMBER, $Number);
  }
  
  /***/ }),
  
  /***/ 1116:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.1.2.1 Number.EPSILON
  var $export = __webpack_require__(2583);
  
  $export($export.S, 'Number', {
    EPSILON: Math.pow(2, -52)
  });
  
  /***/ }),
  
  /***/ 5313:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.1.2.2 Number.isFinite(number)
  var $export = __webpack_require__(2583);
  
  var _isFinite = (__webpack_require__(4319).isFinite);
  
  $export($export.S, 'Number', {
    isFinite: function isFinite(it) {
      return typeof it == 'number' && _isFinite(it);
    }
  });
  
  /***/ }),
  
  /***/ 5951:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.1.2.3 Number.isInteger(number)
  var $export = __webpack_require__(2583);
  
  $export($export.S, 'Number', {
    isInteger: __webpack_require__(7981)
  });
  
  /***/ }),
  
  /***/ 5242:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.1.2.4 Number.isNaN(number)
  var $export = __webpack_require__(2583);
  
  $export($export.S, 'Number', {
    isNaN: function isNaN(number) {
      // eslint-disable-next-line no-self-compare
      return number != number;
    }
  });
  
  /***/ }),
  
  /***/ 705:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.1.2.5 Number.isSafeInteger(number)
  var $export = __webpack_require__(2583);
  
  var isInteger = __webpack_require__(7981);
  
  var abs = Math.abs;
  $export($export.S, 'Number', {
    isSafeInteger: function isSafeInteger(number) {
      return isInteger(number) && abs(number) <= 0x1fffffffffffff;
    }
  });
  
  /***/ }),
  
  /***/ 2948:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.1.2.6 Number.MAX_SAFE_INTEGER
  var $export = __webpack_require__(2583);
  
  $export($export.S, 'Number', {
    MAX_SAFE_INTEGER: 0x1fffffffffffff
  });
  
  /***/ }),
  
  /***/ 2174:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 20.1.2.10 Number.MIN_SAFE_INTEGER
  var $export = __webpack_require__(2583);
  
  $export($export.S, 'Number', {
    MIN_SAFE_INTEGER: -0x1fffffffffffff
  });
  
  /***/ }),
  
  /***/ 2682:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  var $export = __webpack_require__(2583);
  
  var $parseFloat = __webpack_require__(4748); // 20.1.2.12 Number.parseFloat(string)
  
  
  $export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {
    parseFloat: $parseFloat
  });
  
  /***/ }),
  
  /***/ 7289:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  var $export = __webpack_require__(2583);
  
  var $parseInt = __webpack_require__(1860); // 20.1.2.13 Number.parseInt(string, radix)
  
  
  $export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {
    parseInt: $parseInt
  });
  
  /***/ }),
  
  /***/ 96:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $export = __webpack_require__(2583);
  
  var toInteger = __webpack_require__(2836);
  
  var aNumberValue = __webpack_require__(1806);
  
  var repeat = __webpack_require__(9891);
  
  var $toFixed = 1.0.toFixed;
  var floor = Math.floor;
  var data = [0, 0, 0, 0, 0, 0];
  var ERROR = 'Number.toFixed: incorrect invocation!';
  var ZERO = '0';
  
  var multiply = function multiply(n, c) {
    var i = -1;
    var c2 = c;
  
    while (++i < 6) {
      c2 += n * data[i];
      data[i] = c2 % 1e7;
      c2 = floor(c2 / 1e7);
    }
  };
  
  var divide = function divide(n) {
    var i = 6;
    var c = 0;
  
    while (--i >= 0) {
      c += data[i];
      data[i] = floor(c / n);
      c = c % n * 1e7;
    }
  };
  
  var numToString = function numToString() {
    var i = 6;
    var s = '';
  
    while (--i >= 0) {
      if (s !== '' || i === 0 || data[i] !== 0) {
        var t = String(data[i]);
        s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
      }
    }
  
    return s;
  };
  
  var pow = function pow(x, n, acc) {
    return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
  };
  
  var log = function log(x) {
    var n = 0;
    var x2 = x;
  
    while (x2 >= 4096) {
      n += 12;
      x2 /= 4096;
    }
  
    while (x2 >= 2) {
      n += 1;
      x2 /= 2;
    }
  
    return n;
  };
  
  $export($export.P + $export.F * (!!$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !__webpack_require__(8164)(function () {
    // V8 ~ Android 4.3-
    $toFixed.call({});
  })), 'Number', {
    toFixed: function toFixed(fractionDigits) {
      var x = aNumberValue(this, ERROR);
      var f = toInteger(fractionDigits);
      var s = '';
      var m = ZERO;
      var e, z, j, k;
      if (f < 0 || f > 20) throw RangeError(ERROR); // eslint-disable-next-line no-self-compare
  
      if (x != x) return 'NaN';
      if (x <= -1e21 || x >= 1e21) return String(x);
  
      if (x < 0) {
        s = '-';
        x = -x;
      }
  
      if (x > 1e-21) {
        e = log(x * pow(2, 69, 1)) - 69;
        z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
        z *= 0x10000000000000;
        e = 52 - e;
  
        if (e > 0) {
          multiply(0, z);
          j = f;
  
          while (j >= 7) {
            multiply(1e7, 0);
            j -= 7;
          }
  
          multiply(pow(10, j, 1), 0);
          j = e - 1;
  
          while (j >= 23) {
            divide(1 << 23);
            j -= 23;
          }
  
          divide(1 << j);
          multiply(1, 1);
          divide(2);
          m = numToString();
        } else {
          multiply(0, z);
          multiply(1 << -e, 0);
          m = numToString() + repeat.call(ZERO, f);
        }
      }
  
      if (f > 0) {
        k = m.length;
        m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
      } else {
        m = s + m;
      }
  
      return m;
    }
  });
  
  /***/ }),
  
  /***/ 3695:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $export = __webpack_require__(2583);
  
  var $fails = __webpack_require__(8164);
  
  var aNumberValue = __webpack_require__(1806);
  
  var $toPrecision = 1.0.toPrecision;
  $export($export.P + $export.F * ($fails(function () {
    // IE7-
    return $toPrecision.call(1, undefined) !== '1';
  }) || !$fails(function () {
    // V8 ~ Android 4.3-
    $toPrecision.call({});
  })), 'Number', {
    toPrecision: function toPrecision(precision) {
      var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
      return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
    }
  });
  
  /***/ }),
  
  /***/ 5458:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 19.1.3.1 Object.assign(target, source)
  var $export = __webpack_require__(2583);
  
  $export($export.S + $export.F, 'Object', {
    assign: __webpack_require__(4515)
  });
  
  /***/ }),
  
  /***/ 34:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  var $export = __webpack_require__(2583); // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
  
  
  $export($export.S, 'Object', {
    create: __webpack_require__(2851)
  });
  
  /***/ }),
  
  /***/ 8677:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  var $export = __webpack_require__(2583); // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
  
  
  $export($export.S + $export.F * !__webpack_require__(6628), 'Object', {
    defineProperties: __webpack_require__(9444)
  });
  
  /***/ }),
  
  /***/ 4781:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  var $export = __webpack_require__(2583); // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
  
  
  $export($export.S + $export.F * !__webpack_require__(6628), 'Object', {
    defineProperty: (__webpack_require__(4770).f)
  });
  
  /***/ }),
  
  /***/ 5966:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 19.1.2.5 Object.freeze(O)
  var isObject = __webpack_require__(1541);
  
  var meta = (__webpack_require__(4207).onFreeze);
  
  __webpack_require__(1913)('freeze', function ($freeze) {
    return function freeze(it) {
      return $freeze && isObject(it) ? $freeze(meta(it)) : it;
    };
  });
  
  /***/ }),
  
  /***/ 2561:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  var toIObject = __webpack_require__(3165);
  
  var $getOwnPropertyDescriptor = (__webpack_require__(4254).f);
  
  __webpack_require__(1913)('getOwnPropertyDescriptor', function () {
    return function getOwnPropertyDescriptor(it, key) {
      return $getOwnPropertyDescriptor(toIObject(it), key);
    };
  });
  
  /***/ }),
  
  /***/ 5003:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  __webpack_require__(1913)('getOwnPropertyNames', function () {
    return (__webpack_require__(5607).f);
  });
  
  /***/ }),
  
  /***/ 6362:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 19.1.2.9 Object.getPrototypeOf(O)
  var toObject = __webpack_require__(120);
  
  var $getPrototypeOf = __webpack_require__(9750);
  
  __webpack_require__(1913)('getPrototypeOf', function () {
    return function getPrototypeOf(it) {
      return $getPrototypeOf(toObject(it));
    };
  });
  
  /***/ }),
  
  /***/ 1343:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 19.1.2.11 Object.isExtensible(O)
  var isObject = __webpack_require__(1541);
  
  __webpack_require__(1913)('isExtensible', function ($isExtensible) {
    return function isExtensible(it) {
      return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
    };
  });
  
  /***/ }),
  
  /***/ 6170:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 19.1.2.12 Object.isFrozen(O)
  var isObject = __webpack_require__(1541);
  
  __webpack_require__(1913)('isFrozen', function ($isFrozen) {
    return function isFrozen(it) {
      return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
    };
  });
  
  /***/ }),
  
  /***/ 9628:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 19.1.2.13 Object.isSealed(O)
  var isObject = __webpack_require__(1541);
  
  __webpack_require__(1913)('isSealed', function ($isSealed) {
    return function isSealed(it) {
      return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
    };
  });
  
  /***/ }),
  
  /***/ 7454:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 19.1.3.10 Object.is(value1, value2)
  var $export = __webpack_require__(2583);
  
  $export($export.S, 'Object', {
    is: __webpack_require__(437)
  });
  
  /***/ }),
  
  /***/ 8934:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 19.1.2.14 Object.keys(O)
  var toObject = __webpack_require__(120);
  
  var $keys = __webpack_require__(6875);
  
  __webpack_require__(1913)('keys', function () {
    return function keys(it) {
      return $keys(toObject(it));
    };
  });
  
  /***/ }),
  
  /***/ 7628:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 19.1.2.15 Object.preventExtensions(O)
  var isObject = __webpack_require__(1541);
  
  var meta = (__webpack_require__(4207).onFreeze);
  
  __webpack_require__(1913)('preventExtensions', function ($preventExtensions) {
    return function preventExtensions(it) {
      return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
    };
  });
  
  /***/ }),
  
  /***/ 8524:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 19.1.2.17 Object.seal(O)
  var isObject = __webpack_require__(1541);
  
  var meta = (__webpack_require__(4207).onFreeze);
  
  __webpack_require__(1913)('seal', function ($seal) {
    return function seal(it) {
      return $seal && isObject(it) ? $seal(meta(it)) : it;
    };
  });
  
  /***/ }),
  
  /***/ 5715:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 19.1.3.19 Object.setPrototypeOf(O, proto)
  var $export = __webpack_require__(2583);
  
  $export($export.S, 'Object', {
    setPrototypeOf: (__webpack_require__(5945).set)
  });
  
  /***/ }),
  
  /***/ 7823:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // 19.1.3.6 Object.prototype.toString()
  
  var classof = __webpack_require__(6289);
  
  var test = {};
  test[__webpack_require__(1032)('toStringTag')] = 'z';
  
  if (test + '' != '[object z]') {
    __webpack_require__(7070)(Object.prototype, 'toString', function toString() {
      return '[object ' + classof(this) + ']';
    }, true);
  }
  
  /***/ }),
  
  /***/ 3071:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  var $export = __webpack_require__(2583);
  
  var $parseFloat = __webpack_require__(4748); // 18.2.4 parseFloat(string)
  
  
  $export($export.G + $export.F * (parseFloat != $parseFloat), {
    parseFloat: $parseFloat
  });
  
  /***/ }),
  
  /***/ 6950:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  var $export = __webpack_require__(2583);
  
  var $parseInt = __webpack_require__(1860); // 18.2.5 parseInt(string, radix)
  
  
  $export($export.G + $export.F * (parseInt != $parseInt), {
    parseInt: $parseInt
  });
  
  /***/ }),
  
  /***/ 9304:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var LIBRARY = __webpack_require__(3381);
  
  var global = __webpack_require__(4319);
  
  var ctx = __webpack_require__(4801);
  
  var classof = __webpack_require__(6289);
  
  var $export = __webpack_require__(2583);
  
  var isObject = __webpack_require__(1541);
  
  var aFunction = __webpack_require__(4133);
  
  var anInstance = __webpack_require__(3047);
  
  var forOf = __webpack_require__(7341);
  
  var speciesConstructor = __webpack_require__(1822);
  
  var task = (__webpack_require__(719).set);
  
  var microtask = __webpack_require__(4231)();
  
  var newPromiseCapabilityModule = __webpack_require__(8847);
  
  var perform = __webpack_require__(8443);
  
  var userAgent = __webpack_require__(5752);
  
  var promiseResolve = __webpack_require__(9013);
  
  var PROMISE = 'Promise';
  var TypeError = global.TypeError;
  var process = global.process;
  var versions = process && process.versions;
  var v8 = versions && versions.v8 || '';
  var $Promise = global[PROMISE];
  var isNode = classof(process) == 'process';
  
  var empty = function empty() {
    /* empty */
  };
  
  var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
  var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
  var USE_NATIVE = !!function () {
    try {
      // correct subclassing with @@species support
      var promise = $Promise.resolve(1);
  
      var FakePromise = (promise.constructor = {})[__webpack_require__(1032)('species')] = function (exec) {
        exec(empty, empty);
      }; // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
  
  
      return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0 && userAgent.indexOf('Chrome/66') === -1;
    } catch (e) {
      /* empty */
    }
  }(); // helpers
  
  var isThenable = function isThenable(it) {
    var then;
    return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
  };
  
  var notify = function notify(promise, isReject) {
    if (promise._n) return;
    promise._n = true;
    var chain = promise._c;
    microtask(function () {
      var value = promise._v;
      var ok = promise._s == 1;
      var i = 0;
  
      var run = function run(reaction) {
        var handler = ok ? reaction.ok : reaction.fail;
        var resolve = reaction.resolve;
        var reject = reaction.reject;
        var domain = reaction.domain;
        var result, then, exited;
  
        try {
          if (handler) {
            if (!ok) {
              if (promise._h == 2) onHandleUnhandled(promise);
              promise._h = 1;
            }
  
            if (handler === true) result = value;else {
              if (domain) domain.enter();
              result = handler(value); // may throw
  
              if (domain) {
                domain.exit();
                exited = true;
              }
            }
  
            if (result === reaction.promise) {
              reject(TypeError('Promise-chain cycle'));
            } else if (then = isThenable(result)) {
              then.call(result, resolve, reject);
            } else resolve(result);
          } else reject(value);
        } catch (e) {
          if (domain && !exited) domain.exit();
          reject(e);
        }
      };
  
      while (chain.length > i) {
        run(chain[i++]);
      } // variable length - can't use forEach
  
  
      promise._c = [];
      promise._n = false;
      if (isReject && !promise._h) onUnhandled(promise);
    });
  };
  
  var onUnhandled = function onUnhandled(promise) {
    task.call(global, function () {
      var value = promise._v;
      var unhandled = isUnhandled(promise);
      var result, handler, console;
  
      if (unhandled) {
        result = perform(function () {
          if (isNode) {
            process.emit('unhandledRejection', value, promise);
          } else if (handler = global.onunhandledrejection) {
            handler({
              promise: promise,
              reason: value
            });
          } else if ((console = global.console) && console.error) {
            console.error('Unhandled promise rejection', value);
          }
        }); // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
  
        promise._h = isNode || isUnhandled(promise) ? 2 : 1;
      }
  
      promise._a = undefined;
      if (unhandled && result.e) throw result.v;
    });
  };
  
  var isUnhandled = function isUnhandled(promise) {
    return promise._h !== 1 && (promise._a || promise._c).length === 0;
  };
  
  var onHandleUnhandled = function onHandleUnhandled(promise) {
    task.call(global, function () {
      var handler;
  
      if (isNode) {
        process.emit('rejectionHandled', promise);
      } else if (handler = global.onrejectionhandled) {
        handler({
          promise: promise,
          reason: promise._v
        });
      }
    });
  };
  
  var $reject = function $reject(value) {
    var promise = this;
    if (promise._d) return;
    promise._d = true;
    promise = promise._w || promise; // unwrap
  
    promise._v = value;
    promise._s = 2;
    if (!promise._a) promise._a = promise._c.slice();
    notify(promise, true);
  };
  
  var $resolve = function $resolve(value) {
    var promise = this;
    var then;
    if (promise._d) return;
    promise._d = true;
    promise = promise._w || promise; // unwrap
  
    try {
      if (promise === value) throw TypeError("Promise can't be resolved itself");
  
      if (then = isThenable(value)) {
        microtask(function () {
          var wrapper = {
            _w: promise,
            _d: false
          }; // wrap
  
          try {
            then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
          } catch (e) {
            $reject.call(wrapper, e);
          }
        });
      } else {
        promise._v = value;
        promise._s = 1;
        notify(promise, false);
      }
    } catch (e) {
      $reject.call({
        _w: promise,
        _d: false
      }, e); // wrap
    }
  }; // constructor polyfill
  
  
  if (!USE_NATIVE) {
    // 25.4.3.1 Promise(executor)
    $Promise = function Promise(executor) {
      anInstance(this, $Promise, PROMISE, '_h');
      aFunction(executor);
      Internal.call(this);
  
      try {
        executor(ctx($resolve, this, 1), ctx($reject, this, 1));
      } catch (err) {
        $reject.call(this, err);
      }
    }; // eslint-disable-next-line no-unused-vars
  
  
    Internal = function Promise(executor) {
      this._c = []; // <- awaiting reactions
  
      this._a = undefined; // <- checked in isUnhandled reactions
  
      this._s = 0; // <- state
  
      this._d = false; // <- done
  
      this._v = undefined; // <- value
  
      this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
  
      this._n = false; // <- notify
    };
  
    Internal.prototype = __webpack_require__(9128)($Promise.prototype, {
      // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
      then: function then(onFulfilled, onRejected) {
        var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
        reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
        reaction.fail = typeof onRejected == 'function' && onRejected;
        reaction.domain = isNode ? process.domain : undefined;
  
        this._c.push(reaction);
  
        if (this._a) this._a.push(reaction);
        if (this._s) notify(this, false);
        return reaction.promise;
      },
      // 25.4.5.1 Promise.prototype.catch(onRejected)
      'catch': function _catch(onRejected) {
        return this.then(undefined, onRejected);
      }
    });
  
    OwnPromiseCapability = function OwnPromiseCapability() {
      var promise = new Internal();
      this.promise = promise;
      this.resolve = ctx($resolve, promise, 1);
      this.reject = ctx($reject, promise, 1);
    };
  
    newPromiseCapabilityModule.f = newPromiseCapability = function newPromiseCapability(C) {
      return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
    };
  }
  
  $export($export.G + $export.W + $export.F * !USE_NATIVE, {
    Promise: $Promise
  });
  
  __webpack_require__(6556)($Promise, PROMISE);
  
  __webpack_require__(2415)(PROMISE);
  
  Wrapper = __webpack_require__(195)[PROMISE]; // statics
  
  $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
    // 25.4.4.5 Promise.reject(r)
    reject: function reject(r) {
      var capability = newPromiseCapability(this);
      var $$reject = capability.reject;
      $$reject(r);
      return capability.promise;
    }
  });
  $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
    // 25.4.4.6 Promise.resolve(x)
    resolve: function resolve(x) {
      return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
    }
  });
  $export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(7633)(function (iter) {
    $Promise.all(iter)['catch'](empty);
  })), PROMISE, {
    // 25.4.4.1 Promise.all(iterable)
    all: function all(iterable) {
      var C = this;
      var capability = newPromiseCapability(C);
      var resolve = capability.resolve;
      var reject = capability.reject;
      var result = perform(function () {
        var values = [];
        var index = 0;
        var remaining = 1;
        forOf(iterable, false, function (promise) {
          var $index = index++;
          var alreadyCalled = false;
          values.push(undefined);
          remaining++;
          C.resolve(promise).then(function (value) {
            if (alreadyCalled) return;
            alreadyCalled = true;
            values[$index] = value;
            --remaining || resolve(values);
          }, reject);
        });
        --remaining || resolve(values);
      });
      if (result.e) reject(result.v);
      return capability.promise;
    },
    // 25.4.4.4 Promise.race(iterable)
    race: function race(iterable) {
      var C = this;
      var capability = newPromiseCapability(C);
      var reject = capability.reject;
      var result = perform(function () {
        forOf(iterable, false, function (promise) {
          C.resolve(promise).then(capability.resolve, reject);
        });
      });
      if (result.e) reject(result.v);
      return capability.promise;
    }
  });
  
  /***/ }),
  
  /***/ 1876:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
  var $export = __webpack_require__(2583);
  
  var aFunction = __webpack_require__(4133);
  
  var anObject = __webpack_require__(9598);
  
  var rApply = ((__webpack_require__(4319).Reflect) || {}).apply;
  var fApply = Function.apply; // MS Edge argumentsList argument is optional
  
  $export($export.S + $export.F * !__webpack_require__(8164)(function () {
    rApply(function () {
      /* empty */
    });
  }), 'Reflect', {
    apply: function apply(target, thisArgument, argumentsList) {
      var T = aFunction(target);
      var L = anObject(argumentsList);
      return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
    }
  });
  
  /***/ }),
  
  /***/ 5428:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
  var $export = __webpack_require__(2583);
  
  var create = __webpack_require__(2851);
  
  var aFunction = __webpack_require__(4133);
  
  var anObject = __webpack_require__(9598);
  
  var isObject = __webpack_require__(1541);
  
  var fails = __webpack_require__(8164);
  
  var bind = __webpack_require__(825);
  
  var rConstruct = ((__webpack_require__(4319).Reflect) || {}).construct; // MS Edge supports only 2 arguments and argumentsList argument is optional
  // FF Nightly sets third argument as `new.target`, but does not create `this` from it
  
  var NEW_TARGET_BUG = fails(function () {
    function F() {
      /* empty */
    }
  
    return !(rConstruct(function () {
      /* empty */
    }, [], F) instanceof F);
  });
  var ARGS_BUG = !fails(function () {
    rConstruct(function () {
      /* empty */
    });
  });
  $export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
    construct: function construct(Target, args
    /* , newTarget */
    ) {
      aFunction(Target);
      anObject(args);
      var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
      if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
  
      if (Target == newTarget) {
        // w/o altered newTarget, optimization for 0-4 arguments
        switch (args.length) {
          case 0:
            return new Target();
  
          case 1:
            return new Target(args[0]);
  
          case 2:
            return new Target(args[0], args[1]);
  
          case 3:
            return new Target(args[0], args[1], args[2]);
  
          case 4:
            return new Target(args[0], args[1], args[2], args[3]);
        } // w/o altered newTarget, lot of arguments case
  
  
        var $args = [null];
        $args.push.apply($args, args);
        return new (bind.apply(Target, $args))();
      } // with altered newTarget, not support built-in constructors
  
  
      var proto = newTarget.prototype;
      var instance = create(isObject(proto) ? proto : Object.prototype);
      var result = Function.apply.call(Target, instance, args);
      return isObject(result) ? result : instance;
    }
  });
  
  /***/ }),
  
  /***/ 7167:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
  var dP = __webpack_require__(4770);
  
  var $export = __webpack_require__(2583);
  
  var anObject = __webpack_require__(9598);
  
  var toPrimitive = __webpack_require__(5848); // MS Edge has broken Reflect.defineProperty - throwing instead of returning false
  
  
  $export($export.S + $export.F * __webpack_require__(8164)(function () {
    // eslint-disable-next-line no-undef
    Reflect.defineProperty(dP.f({}, 1, {
      value: 1
    }), 1, {
      value: 2
    });
  }), 'Reflect', {
    defineProperty: function defineProperty(target, propertyKey, attributes) {
      anObject(target);
      propertyKey = toPrimitive(propertyKey, true);
      anObject(attributes);
  
      try {
        dP.f(target, propertyKey, attributes);
        return true;
      } catch (e) {
        return false;
      }
    }
  });
  
  /***/ }),
  
  /***/ 2133:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 26.1.4 Reflect.deleteProperty(target, propertyKey)
  var $export = __webpack_require__(2583);
  
  var gOPD = (__webpack_require__(4254).f);
  
  var anObject = __webpack_require__(9598);
  
  $export($export.S, 'Reflect', {
    deleteProperty: function deleteProperty(target, propertyKey) {
      var desc = gOPD(anObject(target), propertyKey);
      return desc && !desc.configurable ? false : delete target[propertyKey];
    }
  });
  
  /***/ }),
  
  /***/ 3451:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // 26.1.5 Reflect.enumerate(target)
  
  var $export = __webpack_require__(2583);
  
  var anObject = __webpack_require__(9598);
  
  var Enumerate = function Enumerate(iterated) {
    this._t = anObject(iterated); // target
  
    this._i = 0; // next index
  
    var keys = this._k = []; // keys
  
    var key;
  
    for (key in iterated) {
      keys.push(key);
    }
  };
  
  __webpack_require__(7487)(Enumerate, 'Object', function () {
    var that = this;
    var keys = that._k;
    var key;
  
    do {
      if (that._i >= keys.length) return {
        value: undefined,
        done: true
      };
    } while (!((key = keys[that._i++]) in that._t));
  
    return {
      value: key,
      done: false
    };
  });
  
  $export($export.S, 'Reflect', {
    enumerate: function enumerate(target) {
      return new Enumerate(target);
    }
  });
  
  /***/ }),
  
  /***/ 2329:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
  var gOPD = __webpack_require__(4254);
  
  var $export = __webpack_require__(2583);
  
  var anObject = __webpack_require__(9598);
  
  $export($export.S, 'Reflect', {
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
      return gOPD.f(anObject(target), propertyKey);
    }
  });
  
  /***/ }),
  
  /***/ 3759:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 26.1.8 Reflect.getPrototypeOf(target)
  var $export = __webpack_require__(2583);
  
  var getProto = __webpack_require__(9750);
  
  var anObject = __webpack_require__(9598);
  
  $export($export.S, 'Reflect', {
    getPrototypeOf: function getPrototypeOf(target) {
      return getProto(anObject(target));
    }
  });
  
  /***/ }),
  
  /***/ 1368:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 26.1.6 Reflect.get(target, propertyKey [, receiver])
  var gOPD = __webpack_require__(4254);
  
  var getPrototypeOf = __webpack_require__(9750);
  
  var has = __webpack_require__(6547);
  
  var $export = __webpack_require__(2583);
  
  var isObject = __webpack_require__(1541);
  
  var anObject = __webpack_require__(9598);
  
  function get(target, propertyKey
  /* , receiver */
  ) {
    var receiver = arguments.length < 3 ? target : arguments[2];
    var desc, proto;
    if (anObject(target) === receiver) return target[propertyKey];
    if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
    if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
  }
  
  $export($export.S, 'Reflect', {
    get: get
  });
  
  /***/ }),
  
  /***/ 6681:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 26.1.9 Reflect.has(target, propertyKey)
  var $export = __webpack_require__(2583);
  
  $export($export.S, 'Reflect', {
    has: function has(target, propertyKey) {
      return propertyKey in target;
    }
  });
  
  /***/ }),
  
  /***/ 6712:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 26.1.10 Reflect.isExtensible(target)
  var $export = __webpack_require__(2583);
  
  var anObject = __webpack_require__(9598);
  
  var $isExtensible = Object.isExtensible;
  $export($export.S, 'Reflect', {
    isExtensible: function isExtensible(target) {
      anObject(target);
      return $isExtensible ? $isExtensible(target) : true;
    }
  });
  
  /***/ }),
  
  /***/ 2686:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 26.1.11 Reflect.ownKeys(target)
  var $export = __webpack_require__(2583);
  
  $export($export.S, 'Reflect', {
    ownKeys: __webpack_require__(7367)
  });
  
  /***/ }),
  
  /***/ 949:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 26.1.12 Reflect.preventExtensions(target)
  var $export = __webpack_require__(2583);
  
  var anObject = __webpack_require__(9598);
  
  var $preventExtensions = Object.preventExtensions;
  $export($export.S, 'Reflect', {
    preventExtensions: function preventExtensions(target) {
      anObject(target);
  
      try {
        if ($preventExtensions) $preventExtensions(target);
        return true;
      } catch (e) {
        return false;
      }
    }
  });
  
  /***/ }),
  
  /***/ 7021:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 26.1.14 Reflect.setPrototypeOf(target, proto)
  var $export = __webpack_require__(2583);
  
  var setProto = __webpack_require__(5945);
  
  if (setProto) $export($export.S, 'Reflect', {
    setPrototypeOf: function setPrototypeOf(target, proto) {
      setProto.check(target, proto);
  
      try {
        setProto.set(target, proto);
        return true;
      } catch (e) {
        return false;
      }
    }
  });
  
  /***/ }),
  
  /***/ 8204:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
  var dP = __webpack_require__(4770);
  
  var gOPD = __webpack_require__(4254);
  
  var getPrototypeOf = __webpack_require__(9750);
  
  var has = __webpack_require__(6547);
  
  var $export = __webpack_require__(2583);
  
  var createDesc = __webpack_require__(5583);
  
  var anObject = __webpack_require__(9598);
  
  var isObject = __webpack_require__(1541);
  
  function set(target, propertyKey, V
  /* , receiver */
  ) {
    var receiver = arguments.length < 4 ? target : arguments[3];
    var ownDesc = gOPD.f(anObject(target), propertyKey);
    var existingDescriptor, proto;
  
    if (!ownDesc) {
      if (isObject(proto = getPrototypeOf(target))) {
        return set(proto, propertyKey, V, receiver);
      }
  
      ownDesc = createDesc(0);
    }
  
    if (has(ownDesc, 'value')) {
      if (ownDesc.writable === false || !isObject(receiver)) return false;
  
      if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
        if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
        existingDescriptor.value = V;
        dP.f(receiver, propertyKey, existingDescriptor);
      } else dP.f(receiver, propertyKey, createDesc(0, V));
  
      return true;
    }
  
    return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
  }
  
  $export($export.S, 'Reflect', {
    set: set
  });
  
  /***/ }),
  
  /***/ 1733:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  var global = __webpack_require__(4319);
  
  var inheritIfRequired = __webpack_require__(3914);
  
  var dP = (__webpack_require__(4770).f);
  
  var gOPN = (__webpack_require__(2762).f);
  
  var isRegExp = __webpack_require__(4667);
  
  var $flags = __webpack_require__(1333);
  
  var $RegExp = global.RegExp;
  var Base = $RegExp;
  var proto = $RegExp.prototype;
  var re1 = /a/g;
  var re2 = /a/g; // "new" creates a new object, old webkit buggy here
  
  var CORRECT_NEW = new $RegExp(re1) !== re1;
  
  if (__webpack_require__(6628) && (!CORRECT_NEW || __webpack_require__(8164)(function () {
    re2[__webpack_require__(1032)('match')] = false; // RegExp constructor can alter flags and IsRegExp works correct with @@match
  
    return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
  }))) {
    $RegExp = function RegExp(p, f) {
      var tiRE = this instanceof $RegExp;
      var piRE = isRegExp(p);
      var fiU = f === undefined;
      return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : inheritIfRequired(CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f), tiRE ? this : proto, $RegExp);
    };
  
    var proxy = function proxy(key) {
      key in $RegExp || dP($RegExp, key, {
        configurable: true,
        get: function get() {
          return Base[key];
        },
        set: function set(it) {
          Base[key] = it;
        }
      });
    };
  
    for (var keys = gOPN(Base), i = 0; keys.length > i;) {
      proxy(keys[i++]);
    }
  
    proto.constructor = $RegExp;
    $RegExp.prototype = proto;
  
    __webpack_require__(7070)(global, 'RegExp', $RegExp);
  }
  
  __webpack_require__(2415)('RegExp');
  
  /***/ }),
  
  /***/ 487:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var regexpExec = __webpack_require__(3910);
  
  __webpack_require__(2583)({
    target: 'RegExp',
    proto: true,
    forced: regexpExec !== /./.exec
  }, {
    exec: regexpExec
  });
  
  /***/ }),
  
  /***/ 8996:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // 21.2.5.3 get RegExp.prototype.flags()
  if (__webpack_require__(6628) && /./g.flags != 'g') (__webpack_require__(4770).f)(RegExp.prototype, 'flags', {
    configurable: true,
    get: __webpack_require__(1333)
  });
  
  /***/ }),
  
  /***/ 6232:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var anObject = __webpack_require__(9598);
  
  var toLength = __webpack_require__(4677);
  
  var advanceStringIndex = __webpack_require__(5573);
  
  var regExpExec = __webpack_require__(7570); // @@match logic
  
  
  __webpack_require__(7904)('match', 1, function (defined, MATCH, $match, maybeCallNative) {
    return [// `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    }, // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
  
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
  
      return n === 0 ? null : A;
    }];
  });
  
  /***/ }),
  
  /***/ 1958:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var anObject = __webpack_require__(9598);
  
  var toObject = __webpack_require__(120);
  
  var toLength = __webpack_require__(4677);
  
  var toInteger = __webpack_require__(2836);
  
  var advanceStringIndex = __webpack_require__(5573);
  
  var regExpExec = __webpack_require__(7570);
  
  var max = Math.max;
  var min = Math.min;
  var floor = Math.floor;
  var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
  var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;
  
  var maybeToString = function maybeToString(it) {
    return it === undefined ? it : String(it);
  }; // @@replace logic
  
  
  __webpack_require__(7904)('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
    return [// `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
    }, // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
  
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
  
      var results = [];
  
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }
  
      var accumulatedResult = '';
      var nextSourcePosition = 0;
  
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = []; // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
  
        for (var j = 1; j < result.length; j++) {
          captures.push(maybeToString(result[j]));
        }
  
        var namedCaptures = result.groups;
  
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
  
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
  
      return accumulatedResult + S.slice(nextSourcePosition);
    }]; // https://tc39.github.io/ecma262/#sec-getsubstitution
  
    function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
      var tailPos = position + matched.length;
      var m = captures.length;
      var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
  
      if (namedCaptures !== undefined) {
        namedCaptures = toObject(namedCaptures);
        symbols = SUBSTITUTION_SYMBOLS;
      }
  
      return $replace.call(replacement, symbols, function (match, ch) {
        var capture;
  
        switch (ch.charAt(0)) {
          case '$':
            return '$';
  
          case '&':
            return matched;
  
          case '`':
            return str.slice(0, position);
  
          case "'":
            return str.slice(tailPos);
  
          case '<':
            capture = namedCaptures[ch.slice(1, -1)];
            break;
  
          default:
            // \d\d?
            var n = +ch;
            if (n === 0) return match;
  
            if (n > m) {
              var f = floor(n / 10);
              if (f === 0) return match;
              if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
              return match;
            }
  
            capture = captures[n - 1];
        }
  
        return capture === undefined ? '' : capture;
      });
    }
  });
  
  /***/ }),
  
  /***/ 873:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var anObject = __webpack_require__(9598);
  
  var sameValue = __webpack_require__(437);
  
  var regExpExec = __webpack_require__(7570); // @@search logic
  
  
  __webpack_require__(7904)('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
    return [// `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    }, // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative($search, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }];
  });
  
  /***/ }),
  
  /***/ 4157:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var isRegExp = __webpack_require__(4667);
  
  var anObject = __webpack_require__(9598);
  
  var speciesConstructor = __webpack_require__(1822);
  
  var advanceStringIndex = __webpack_require__(5573);
  
  var toLength = __webpack_require__(4677);
  
  var callRegExpExec = __webpack_require__(7570);
  
  var regexpExec = __webpack_require__(3910);
  
  var fails = __webpack_require__(8164);
  
  var $min = Math.min;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX = 'lastIndex';
  var MAX_UINT32 = 0xffffffff; // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
  
  var SUPPORTS_Y = !fails(function () {
    RegExp(MAX_UINT32, 'y');
  }); // @@split logic
  
  __webpack_require__(7904)('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
    var internalSplit;
  
    if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {
      // based on es5-shim implementation, need to rework it
      internalSplit = function internalSplit(separator, limit) {
        var string = String(this);
        if (separator === undefined && limit === 0) return []; // If `separator` is not a regex, use native split
  
        if (!isRegExp(separator)) return $split.call(string, separator, limit);
        var output = [];
        var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
        var lastLastIndex = 0;
        var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0; // Make `global` and avoid `lastIndex` issues by working with a copy
  
        var separatorCopy = new RegExp(separator.source, flags + 'g');
        var match, lastIndex, lastLength;
  
        while (match = regexpExec.call(separatorCopy, string)) {
          lastIndex = separatorCopy[LAST_INDEX];
  
          if (lastIndex > lastLastIndex) {
            output.push(string.slice(lastLastIndex, match.index));
            if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
            lastLength = match[0][LENGTH];
            lastLastIndex = lastIndex;
            if (output[LENGTH] >= splitLimit) break;
          }
  
          if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
        }
  
        if (lastLastIndex === string[LENGTH]) {
          if (lastLength || !separatorCopy.test('')) output.push('');
        } else output.push(string.slice(lastLastIndex));
  
        return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
      }; // Chakra, V8
  
    } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
      internalSplit = function internalSplit(separator, limit) {
        return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
      };
    } else {
      internalSplit = $split;
    }
  
    return [// `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
    }, // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);
      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (SUPPORTS_Y ? 'y' : 'g'); // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
  
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
  
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
  
        if (z === null || (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
  
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
  
          q = p = e;
        }
      }
  
      A.push(S.slice(p));
      return A;
    }];
  });
  
  /***/ }),
  
  /***/ 6146:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  __webpack_require__(8996);
  
  var anObject = __webpack_require__(9598);
  
  var $flags = __webpack_require__(1333);
  
  var DESCRIPTORS = __webpack_require__(6628);
  
  var TO_STRING = 'toString';
  var $toString = /./[TO_STRING];
  
  var define = function define(fn) {
    __webpack_require__(7070)(RegExp.prototype, TO_STRING, fn, true);
  }; // 21.2.5.14 RegExp.prototype.toString()
  
  
  if (__webpack_require__(8164)(function () {
    return $toString.call({
      source: 'a',
      flags: 'b'
    }) != '/a/b';
  })) {
    define(function toString() {
      var R = anObject(this);
      return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
    }); // FF44- RegExp#toString has a wrong name
  } else if ($toString.name != TO_STRING) {
    define(function toString() {
      return $toString.call(this);
    });
  }
  
  /***/ }),
  
  /***/ 6551:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var strong = __webpack_require__(2878);
  
  var validate = __webpack_require__(9668);
  
  var SET = 'Set'; // 23.2 Set Objects
  
  module.exports = __webpack_require__(2411)(SET, function (get) {
    return function Set() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  }, {
    // 23.2.3.1 Set.prototype.add(value)
    add: function add(value) {
      return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
    }
  }, strong);
  
  /***/ }),
  
  /***/ 6879:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // B.2.3.2 String.prototype.anchor(name)
  
  __webpack_require__(7264)('anchor', function (createHTML) {
    return function anchor(name) {
      return createHTML(this, 'a', 'name', name);
    };
  });
  
  /***/ }),
  
  /***/ 2038:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // B.2.3.3 String.prototype.big()
  
  __webpack_require__(7264)('big', function (createHTML) {
    return function big() {
      return createHTML(this, 'big', '', '');
    };
  });
  
  /***/ }),
  
  /***/ 4392:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // B.2.3.4 String.prototype.blink()
  
  __webpack_require__(7264)('blink', function (createHTML) {
    return function blink() {
      return createHTML(this, 'blink', '', '');
    };
  });
  
  /***/ }),
  
  /***/ 6676:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // B.2.3.5 String.prototype.bold()
  
  __webpack_require__(7264)('bold', function (createHTML) {
    return function bold() {
      return createHTML(this, 'b', '', '');
    };
  });
  
  /***/ }),
  
  /***/ 393:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $export = __webpack_require__(2583);
  
  var $at = __webpack_require__(1510)(false);
  
  $export($export.P, 'String', {
    // 21.1.3.3 String.prototype.codePointAt(pos)
    codePointAt: function codePointAt(pos) {
      return $at(this, pos);
    }
  });
  
  /***/ }),
  
  /***/ 9321:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
  
  
  var $export = __webpack_require__(2583);
  
  var toLength = __webpack_require__(4677);
  
  var context = __webpack_require__(1657);
  
  var ENDS_WITH = 'endsWith';
  var $endsWith = ''[ENDS_WITH];
  $export($export.P + $export.F * __webpack_require__(5358)(ENDS_WITH), 'String', {
    endsWith: function endsWith(searchString
    /* , endPosition = @length */
    ) {
      var that = context(this, searchString, ENDS_WITH);
      var endPosition = arguments.length > 1 ? arguments[1] : undefined;
      var len = toLength(that.length);
      var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
      var search = String(searchString);
      return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
    }
  });
  
  /***/ }),
  
  /***/ 4321:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // B.2.3.6 String.prototype.fixed()
  
  __webpack_require__(7264)('fixed', function (createHTML) {
    return function fixed() {
      return createHTML(this, 'tt', '', '');
    };
  });
  
  /***/ }),
  
  /***/ 8400:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // B.2.3.7 String.prototype.fontcolor(color)
  
  __webpack_require__(7264)('fontcolor', function (createHTML) {
    return function fontcolor(color) {
      return createHTML(this, 'font', 'color', color);
    };
  });
  
  /***/ }),
  
  /***/ 5690:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // B.2.3.8 String.prototype.fontsize(size)
  
  __webpack_require__(7264)('fontsize', function (createHTML) {
    return function fontsize(size) {
      return createHTML(this, 'font', 'size', size);
    };
  });
  
  /***/ }),
  
  /***/ 9275:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  var $export = __webpack_require__(2583);
  
  var toAbsoluteIndex = __webpack_require__(724);
  
  var fromCharCode = String.fromCharCode;
  var $fromCodePoint = String.fromCodePoint; // length should be 1, old FF problem
  
  $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
    // 21.1.2.2 String.fromCodePoint(...codePoints)
    fromCodePoint: function fromCodePoint(x) {
      // eslint-disable-line no-unused-vars
      var res = [];
      var aLen = arguments.length;
      var i = 0;
      var code;
  
      while (aLen > i) {
        code = +arguments[i++];
        if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
        res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
      }
  
      return res.join('');
    }
  });
  
  /***/ }),
  
  /***/ 7661:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  // 21.1.3.7 String.prototype.includes(searchString, position = 0)
  
  
  var $export = __webpack_require__(2583);
  
  var context = __webpack_require__(1657);
  
  var INCLUDES = 'includes';
  $export($export.P + $export.F * __webpack_require__(5358)(INCLUDES), 'String', {
    includes: function includes(searchString
    /* , position = 0 */
    ) {
      return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
    }
  });
  
  /***/ }),
  
  /***/ 7422:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // B.2.3.9 String.prototype.italics()
  
  __webpack_require__(7264)('italics', function (createHTML) {
    return function italics() {
      return createHTML(this, 'i', '', '');
    };
  });
  
  /***/ }),
  
  /***/ 8687:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $at = __webpack_require__(1510)(true); // 21.1.3.27 String.prototype[@@iterator]()
  
  
  __webpack_require__(9857)(String, 'String', function (iterated) {
    this._t = String(iterated); // target
  
    this._i = 0; // next index
    // 21.1.5.2.1 %StringIteratorPrototype%.next()
  }, function () {
    var O = this._t;
    var index = this._i;
    var point;
    if (index >= O.length) return {
      value: undefined,
      done: true
    };
    point = $at(O, index);
    this._i += point.length;
    return {
      value: point,
      done: false
    };
  });
  
  /***/ }),
  
  /***/ 1493:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // B.2.3.10 String.prototype.link(url)
  
  __webpack_require__(7264)('link', function (createHTML) {
    return function link(url) {
      return createHTML(this, 'a', 'href', url);
    };
  });
  
  /***/ }),
  
  /***/ 2236:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  var $export = __webpack_require__(2583);
  
  var toIObject = __webpack_require__(3165);
  
  var toLength = __webpack_require__(4677);
  
  $export($export.S, 'String', {
    // 21.1.2.4 String.raw(callSite, ...substitutions)
    raw: function raw(callSite) {
      var tpl = toIObject(callSite.raw);
      var len = toLength(tpl.length);
      var aLen = arguments.length;
      var res = [];
      var i = 0;
  
      while (len > i) {
        res.push(String(tpl[i++]));
        if (i < aLen) res.push(String(arguments[i]));
      }
  
      return res.join('');
    }
  });
  
  /***/ }),
  
  /***/ 7779:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  var $export = __webpack_require__(2583);
  
  $export($export.P, 'String', {
    // 21.1.3.13 String.prototype.repeat(count)
    repeat: __webpack_require__(9891)
  });
  
  /***/ }),
  
  /***/ 5883:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // B.2.3.11 String.prototype.small()
  
  __webpack_require__(7264)('small', function (createHTML) {
    return function small() {
      return createHTML(this, 'small', '', '');
    };
  });
  
  /***/ }),
  
  /***/ 6091:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  // 21.1.3.18 String.prototype.startsWith(searchString [, position ])
  
  
  var $export = __webpack_require__(2583);
  
  var toLength = __webpack_require__(4677);
  
  var context = __webpack_require__(1657);
  
  var STARTS_WITH = 'startsWith';
  var $startsWith = ''[STARTS_WITH];
  $export($export.P + $export.F * __webpack_require__(5358)(STARTS_WITH), 'String', {
    startsWith: function startsWith(searchString
    /* , position = 0 */
    ) {
      var that = context(this, searchString, STARTS_WITH);
      var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
      var search = String(searchString);
      return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
    }
  });
  
  /***/ }),
  
  /***/ 5267:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // B.2.3.12 String.prototype.strike()
  
  __webpack_require__(7264)('strike', function (createHTML) {
    return function strike() {
      return createHTML(this, 'strike', '', '');
    };
  });
  
  /***/ }),
  
  /***/ 7615:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // B.2.3.13 String.prototype.sub()
  
  __webpack_require__(7264)('sub', function (createHTML) {
    return function sub() {
      return createHTML(this, 'sub', '', '');
    };
  });
  
  /***/ }),
  
  /***/ 1269:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // B.2.3.14 String.prototype.sup()
  
  __webpack_require__(7264)('sup', function (createHTML) {
    return function sup() {
      return createHTML(this, 'sup', '', '');
    };
  });
  
  /***/ }),
  
  /***/ 9986:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // 21.1.3.25 String.prototype.trim()
  
  __webpack_require__(9565)('trim', function ($trim) {
    return function trim() {
      return $trim(this, 3);
    };
  });
  
  /***/ }),
  
  /***/ 3838:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // ECMAScript 6 symbols shim
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  var global = __webpack_require__(4319);
  
  var has = __webpack_require__(6547);
  
  var DESCRIPTORS = __webpack_require__(6628);
  
  var $export = __webpack_require__(2583);
  
  var redefine = __webpack_require__(7070);
  
  var META = (__webpack_require__(4207).KEY);
  
  var $fails = __webpack_require__(8164);
  
  var shared = __webpack_require__(1400);
  
  var setToStringTag = __webpack_require__(6556);
  
  var uid = __webpack_require__(8376);
  
  var wks = __webpack_require__(1032);
  
  var wksExt = __webpack_require__(5634);
  
  var wksDefine = __webpack_require__(5765);
  
  var enumKeys = __webpack_require__(7400);
  
  var isArray = __webpack_require__(8859);
  
  var anObject = __webpack_require__(9598);
  
  var isObject = __webpack_require__(1541);
  
  var toObject = __webpack_require__(120);
  
  var toIObject = __webpack_require__(3165);
  
  var toPrimitive = __webpack_require__(5848);
  
  var createDesc = __webpack_require__(5583);
  
  var _create = __webpack_require__(2851);
  
  var gOPNExt = __webpack_require__(5607);
  
  var $GOPD = __webpack_require__(4254);
  
  var $GOPS = __webpack_require__(4866);
  
  var $DP = __webpack_require__(4770);
  
  var $keys = __webpack_require__(6875);
  
  var gOPD = $GOPD.f;
  var dP = $DP.f;
  var gOPN = gOPNExt.f;
  var $Symbol = global.Symbol;
  var $JSON = global.JSON;
  
  var _stringify = $JSON && $JSON.stringify;
  
  var PROTOTYPE = 'prototype';
  var HIDDEN = wks('_hidden');
  var TO_PRIMITIVE = wks('toPrimitive');
  var isEnum = {}.propertyIsEnumerable;
  var SymbolRegistry = shared('symbol-registry');
  var AllSymbols = shared('symbols');
  var OPSymbols = shared('op-symbols');
  var ObjectProto = Object[PROTOTYPE];
  var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
  var QObject = global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
  
  var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
  
  var setSymbolDesc = DESCRIPTORS && $fails(function () {
    return _create(dP({}, 'a', {
      get: function get() {
        return dP(this, 'a', {
          value: 7
        }).a;
      }
    })).a != 7;
  }) ? function (it, key, D) {
    var protoDesc = gOPD(ObjectProto, key);
    if (protoDesc) delete ObjectProto[key];
    dP(it, key, D);
    if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
  } : dP;
  
  var wrap = function wrap(tag) {
    var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  
    sym._k = tag;
    return sym;
  };
  
  var isSymbol = USE_NATIVE && _typeof($Symbol.iterator) == 'symbol' ? function (it) {
    return _typeof(it) == 'symbol';
  } : function (it) {
    return it instanceof $Symbol;
  };
  
  var $defineProperty = function defineProperty(it, key, D) {
    if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
    anObject(it);
    key = toPrimitive(key, true);
    anObject(D);
  
    if (has(AllSymbols, key)) {
      if (!D.enumerable) {
        if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
        it[HIDDEN][key] = true;
      } else {
        if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
        D = _create(D, {
          enumerable: createDesc(0, false)
        });
      }
  
      return setSymbolDesc(it, key, D);
    }
  
    return dP(it, key, D);
  };
  
  var $defineProperties = function defineProperties(it, P) {
    anObject(it);
    var keys = enumKeys(P = toIObject(P));
    var i = 0;
    var l = keys.length;
    var key;
  
    while (l > i) {
      $defineProperty(it, key = keys[i++], P[key]);
    }
  
    return it;
  };
  
  var $create = function create(it, P) {
    return P === undefined ? _create(it) : $defineProperties(_create(it), P);
  };
  
  var $propertyIsEnumerable = function propertyIsEnumerable(key) {
    var E = isEnum.call(this, key = toPrimitive(key, true));
    if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
    return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
  };
  
  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
    it = toIObject(it);
    key = toPrimitive(key, true);
    if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
    var D = gOPD(it, key);
    if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
    return D;
  };
  
  var $getOwnPropertyNames = function getOwnPropertyNames(it) {
    var names = gOPN(toIObject(it));
    var result = [];
    var i = 0;
    var key;
  
    while (names.length > i) {
      if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
    }
  
    return result;
  };
  
  var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
    var IS_OP = it === ObjectProto;
    var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
    var result = [];
    var i = 0;
    var key;
  
    while (names.length > i) {
      if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
    }
  
    return result;
  }; // 19.4.1.1 Symbol([description])
  
  
  if (!USE_NATIVE) {
    $Symbol = function _Symbol() {
      if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
      var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
  
      var $set = function $set(value) {
        if (this === ObjectProto) $set.call(OPSymbols, value);
        if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
        setSymbolDesc(this, tag, createDesc(1, value));
      };
  
      if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, {
        configurable: true,
        set: $set
      });
      return wrap(tag);
    };
  
    redefine($Symbol[PROTOTYPE], 'toString', function toString() {
      return this._k;
    });
    $GOPD.f = $getOwnPropertyDescriptor;
    $DP.f = $defineProperty;
    (__webpack_require__(2762).f) = gOPNExt.f = $getOwnPropertyNames;
    (__webpack_require__(8931).f) = $propertyIsEnumerable;
    $GOPS.f = $getOwnPropertySymbols;
  
    if (DESCRIPTORS && !__webpack_require__(3381)) {
      redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
    }
  
    wksExt.f = function (name) {
      return wrap(wks(name));
    };
  }
  
  $export($export.G + $export.W + $export.F * !USE_NATIVE, {
    Symbol: $Symbol
  });
  
  for (var es6Symbols = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
    wks(es6Symbols[j++]);
  }
  
  for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) {
    wksDefine(wellKnownSymbols[k++]);
  }
  
  $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
    // 19.4.2.1 Symbol.for(key)
    'for': function _for(key) {
      return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
    },
    // 19.4.2.5 Symbol.keyFor(sym)
    keyFor: function keyFor(sym) {
      if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
  
      for (var key in SymbolRegistry) {
        if (SymbolRegistry[key] === sym) return key;
      }
    },
    useSetter: function useSetter() {
      setter = true;
    },
    useSimple: function useSimple() {
      setter = false;
    }
  });
  $export($export.S + $export.F * !USE_NATIVE, 'Object', {
    // 19.1.2.2 Object.create(O [, Properties])
    create: $create,
    // 19.1.2.4 Object.defineProperty(O, P, Attributes)
    defineProperty: $defineProperty,
    // 19.1.2.3 Object.defineProperties(O, Properties)
    defineProperties: $defineProperties,
    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    // 19.1.2.7 Object.getOwnPropertyNames(O)
    getOwnPropertyNames: $getOwnPropertyNames,
    // 19.1.2.8 Object.getOwnPropertySymbols(O)
    getOwnPropertySymbols: $getOwnPropertySymbols
  }); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
  // https://bugs.chromium.org/p/v8/issues/detail?id=3443
  
  var FAILS_ON_PRIMITIVES = $fails(function () {
    $GOPS.f(1);
  });
  $export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
    getOwnPropertySymbols: function getOwnPropertySymbols(it) {
      return $GOPS.f(toObject(it));
    }
  }); // 24.3.2 JSON.stringify(value [, replacer [, space]])
  
  $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
    var S = $Symbol(); // MS Edge converts symbol values to JSON as {}
    // WebKit converts symbol values to JSON as null
    // V8 throws on boxed symbols
  
    return _stringify([S]) != '[null]' || _stringify({
      a: S
    }) != '{}' || _stringify(Object(S)) != '{}';
  })), 'JSON', {
    stringify: function stringify(it) {
      var args = [it];
      var i = 1;
      var replacer, $replacer;
  
      while (arguments.length > i) {
        args.push(arguments[i++]);
      }
  
      $replacer = replacer = args[1];
      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
  
      if (!isArray(replacer)) replacer = function replacer(key, value) {
        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return _stringify.apply($JSON, args);
    }
  }); // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
  
  $Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(3817)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf); // 19.4.3.5 Symbol.prototype[@@toStringTag]
  
  setToStringTag($Symbol, 'Symbol'); // 20.2.1.9 Math[@@toStringTag]
  
  setToStringTag(Math, 'Math', true); // 24.3.3 JSON[@@toStringTag]
  
  setToStringTag(global.JSON, 'JSON', true);
  
  /***/ }),
  
  /***/ 5076:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var $export = __webpack_require__(2583);
  
  var $typed = __webpack_require__(9833);
  
  var buffer = __webpack_require__(5730);
  
  var anObject = __webpack_require__(9598);
  
  var toAbsoluteIndex = __webpack_require__(724);
  
  var toLength = __webpack_require__(4677);
  
  var isObject = __webpack_require__(1541);
  
  var ArrayBuffer = (__webpack_require__(4319).ArrayBuffer);
  
  var speciesConstructor = __webpack_require__(1822);
  
  var $ArrayBuffer = buffer.ArrayBuffer;
  var $DataView = buffer.DataView;
  var $isView = $typed.ABV && ArrayBuffer.isView;
  var $slice = $ArrayBuffer.prototype.slice;
  var VIEW = $typed.VIEW;
  var ARRAY_BUFFER = 'ArrayBuffer';
  $export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {
    ArrayBuffer: $ArrayBuffer
  });
  $export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
    // 24.1.3.1 ArrayBuffer.isView(arg)
    isView: function isView(it) {
      return $isView && $isView(it) || isObject(it) && VIEW in it;
    }
  });
  $export($export.P + $export.U + $export.F * __webpack_require__(8164)(function () {
    return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
  }), ARRAY_BUFFER, {
    // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
    slice: function slice(start, end) {
      if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
  
      var len = anObject(this).byteLength;
      var first = toAbsoluteIndex(start, len);
      var fin = toAbsoluteIndex(end === undefined ? len : end, len);
      var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
      var viewS = new $DataView(this);
      var viewT = new $DataView(result);
      var index = 0;
  
      while (first < fin) {
        viewT.setUint8(index++, viewS.getUint8(first++));
      }
  
      return result;
    }
  });
  
  __webpack_require__(2415)(ARRAY_BUFFER);
  
  /***/ }),
  
  /***/ 1751:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  var $export = __webpack_require__(2583);
  
  $export($export.G + $export.W + $export.F * !(__webpack_require__(9833).ABV), {
    DataView: (__webpack_require__(5730).DataView)
  });
  
  /***/ }),
  
  /***/ 6056:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(3136)('Float32', 4, function (init) {
    return function Float32Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
  
  /***/ }),
  
  /***/ 290:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(3136)('Float64', 8, function (init) {
    return function Float64Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
  
  /***/ }),
  
  /***/ 6654:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(3136)('Int16', 2, function (init) {
    return function Int16Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
  
  /***/ }),
  
  /***/ 7258:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(3136)('Int32', 4, function (init) {
    return function Int32Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
  
  /***/ }),
  
  /***/ 44:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(3136)('Int8', 1, function (init) {
    return function Int8Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
  
  /***/ }),
  
  /***/ 6736:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(3136)('Uint16', 2, function (init) {
    return function Uint16Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
  
  /***/ }),
  
  /***/ 3618:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(3136)('Uint32', 4, function (init) {
    return function Uint32Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
  
  /***/ }),
  
  /***/ 517:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(3136)('Uint8', 1, function (init) {
    return function Uint8Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
  
  /***/ }),
  
  /***/ 5295:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(3136)('Uint8', 1, function (init) {
    return function Uint8ClampedArray(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  }, true);
  
  /***/ }),
  
  /***/ 8535:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var global = __webpack_require__(4319);
  
  var each = __webpack_require__(3263)(0);
  
  var redefine = __webpack_require__(7070);
  
  var meta = __webpack_require__(4207);
  
  var assign = __webpack_require__(4515);
  
  var weak = __webpack_require__(687);
  
  var isObject = __webpack_require__(1541);
  
  var validate = __webpack_require__(9668);
  
  var NATIVE_WEAK_MAP = __webpack_require__(9668);
  
  var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
  var WEAK_MAP = 'WeakMap';
  var getWeak = meta.getWeak;
  var isExtensible = Object.isExtensible;
  var uncaughtFrozenStore = weak.ufstore;
  var InternalMap;
  
  var wrapper = function wrapper(get) {
    return function WeakMap() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  };
  
  var methods = {
    // 23.3.3.3 WeakMap.prototype.get(key)
    get: function get(key) {
      if (isObject(key)) {
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
        return data ? data[this._i] : undefined;
      }
    },
    // 23.3.3.5 WeakMap.prototype.set(key, value)
    set: function set(key, value) {
      return weak.def(validate(this, WEAK_MAP), key, value);
    }
  }; // 23.3 WeakMap Objects
  
  var $WeakMap = module.exports = __webpack_require__(2411)(WEAK_MAP, wrapper, methods, weak, true, true); // IE11 WeakMap frozen keys fix
  
  
  if (NATIVE_WEAK_MAP && IS_IE11) {
    InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
    assign(InternalMap.prototype, methods);
    meta.NEED = true;
    each(['delete', 'has', 'get', 'set'], function (key) {
      var proto = $WeakMap.prototype;
      var method = proto[key];
      redefine(proto, key, function (a, b) {
        // store frozen objects on internal weakmap shim
        if (isObject(a) && !isExtensible(a)) {
          if (!this._f) this._f = new InternalMap();
  
          var result = this._f[key](a, b);
  
          return key == 'set' ? this : result; // store all the rest on native weakmap
        }
  
        return method.call(this, a, b);
      });
    });
  }
  
  /***/ }),
  
  /***/ 1164:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var weak = __webpack_require__(687);
  
  var validate = __webpack_require__(9668);
  
  var WEAK_SET = 'WeakSet'; // 23.4 WeakSet Objects
  
  __webpack_require__(2411)(WEAK_SET, function (get) {
    return function WeakSet() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  }, {
    // 23.4.3.1 WeakSet.prototype.add(value)
    add: function add(value) {
      return weak.def(validate(this, WEAK_SET), value, true);
    }
  }, weak, false, true);
  
  /***/ }),
  
  /***/ 7197:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
  
  var $export = __webpack_require__(2583);
  
  var flattenIntoArray = __webpack_require__(9301);
  
  var toObject = __webpack_require__(120);
  
  var toLength = __webpack_require__(4677);
  
  var aFunction = __webpack_require__(4133);
  
  var arraySpeciesCreate = __webpack_require__(4787);
  
  $export($export.P, 'Array', {
    flatMap: function flatMap(callbackfn
    /* , thisArg */
    ) {
      var O = toObject(this);
      var sourceLen, A;
      aFunction(callbackfn);
      sourceLen = toLength(O.length);
      A = arraySpeciesCreate(O, 0);
      flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
      return A;
    }
  });
  
  __webpack_require__(6717)('flatMap');
  
  /***/ }),
  
  /***/ 6924:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // https://github.com/tc39/Array.prototype.includes
  
  var $export = __webpack_require__(2583);
  
  var $includes = __webpack_require__(1408)(true);
  
  $export($export.P, 'Array', {
    includes: function includes(el
    /* , fromIndex = 0 */
    ) {
      return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
    }
  });
  
  __webpack_require__(6717)('includes');
  
  /***/ }),
  
  /***/ 1515:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // https://github.com/tc39/proposal-object-values-entries
  var $export = __webpack_require__(2583);
  
  var $entries = __webpack_require__(9540)(true);
  
  $export($export.S, 'Object', {
    entries: function entries(it) {
      return $entries(it);
    }
  });
  
  /***/ }),
  
  /***/ 3110:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // https://github.com/tc39/proposal-object-getownpropertydescriptors
  var $export = __webpack_require__(2583);
  
  var ownKeys = __webpack_require__(7367);
  
  var toIObject = __webpack_require__(3165);
  
  var gOPD = __webpack_require__(4254);
  
  var createProperty = __webpack_require__(7875);
  
  $export($export.S, 'Object', {
    getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
      var O = toIObject(object);
      var getDesc = gOPD.f;
      var keys = ownKeys(O);
      var result = {};
      var i = 0;
      var key, desc;
  
      while (keys.length > i) {
        desc = getDesc(O, key = keys[i++]);
        if (desc !== undefined) createProperty(result, key, desc);
      }
  
      return result;
    }
  });
  
  /***/ }),
  
  /***/ 1171:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // https://github.com/tc39/proposal-object-values-entries
  var $export = __webpack_require__(2583);
  
  var $values = __webpack_require__(9540)(false);
  
  $export($export.S, 'Object', {
    values: function values(it) {
      return $values(it);
    }
  });
  
  /***/ }),
  
  /***/ 4979:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  // https://github.com/tc39/proposal-promise-finally
  
  
  var $export = __webpack_require__(2583);
  
  var core = __webpack_require__(195);
  
  var global = __webpack_require__(4319);
  
  var speciesConstructor = __webpack_require__(1822);
  
  var promiseResolve = __webpack_require__(9013);
  
  $export($export.P + $export.R, 'Promise', {
    'finally': function _finally(onFinally) {
      var C = speciesConstructor(this, core.Promise || global.Promise);
      var isFunction = typeof onFinally == 'function';
      return this.then(isFunction ? function (x) {
        return promiseResolve(C, onFinally()).then(function () {
          return x;
        });
      } : onFinally, isFunction ? function (e) {
        return promiseResolve(C, onFinally()).then(function () {
          throw e;
        });
      } : onFinally);
    }
  });
  
  /***/ }),
  
  /***/ 4109:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // https://github.com/tc39/proposal-string-pad-start-end
  
  var $export = __webpack_require__(2583);
  
  var $pad = __webpack_require__(9484);
  
  var userAgent = __webpack_require__(5752); // https://github.com/zloirock/core-js/issues/280
  
  
  var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);
  $export($export.P + $export.F * WEBKIT_BUG, 'String', {
    padEnd: function padEnd(maxLength
    /* , fillString = ' ' */
    ) {
      return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
    }
  });
  
  /***/ }),
  
  /***/ 7834:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // https://github.com/tc39/proposal-string-pad-start-end
  
  var $export = __webpack_require__(2583);
  
  var $pad = __webpack_require__(9484);
  
  var userAgent = __webpack_require__(5752); // https://github.com/zloirock/core-js/issues/280
  
  
  var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);
  $export($export.P + $export.F * WEBKIT_BUG, 'String', {
    padStart: function padStart(maxLength
    /* , fillString = ' ' */
    ) {
      return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
    }
  });
  
  /***/ }),
  
  /***/ 749:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // https://github.com/sebmarkbage/ecmascript-string-left-right-trim
  
  __webpack_require__(9565)('trimLeft', function ($trim) {
    return function trimLeft() {
      return $trim(this, 1);
    };
  }, 'trimStart');
  
  /***/ }),
  
  /***/ 6241:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
   // https://github.com/sebmarkbage/ecmascript-string-left-right-trim
  
  __webpack_require__(9565)('trimRight', function ($trim) {
    return function trimRight() {
      return $trim(this, 2);
    };
  }, 'trimEnd');
  
  /***/ }),
  
  /***/ 1445:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(5765)('asyncIterator');
  
  /***/ }),
  
  /***/ 6509:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  var $iterators = __webpack_require__(8735);
  
  var getKeys = __webpack_require__(6875);
  
  var redefine = __webpack_require__(7070);
  
  var global = __webpack_require__(4319);
  
  var hide = __webpack_require__(3817);
  
  var Iterators = __webpack_require__(9223);
  
  var wks = __webpack_require__(1032);
  
  var ITERATOR = wks('iterator');
  var TO_STRING_TAG = wks('toStringTag');
  var ArrayValues = Iterators.Array;
  var DOMIterables = {
    CSSRuleList: true,
    // TODO: Not spec compliant, should be false.
    CSSStyleDeclaration: false,
    CSSValueList: false,
    ClientRectList: false,
    DOMRectList: false,
    DOMStringList: false,
    DOMTokenList: true,
    DataTransferItemList: false,
    FileList: false,
    HTMLAllCollection: false,
    HTMLCollection: false,
    HTMLFormElement: false,
    HTMLSelectElement: false,
    MediaList: true,
    // TODO: Not spec compliant, should be false.
    MimeTypeArray: false,
    NamedNodeMap: false,
    NodeList: true,
    PaintRequestList: false,
    Plugin: false,
    PluginArray: false,
    SVGLengthList: false,
    SVGNumberList: false,
    SVGPathSegList: false,
    SVGPointList: false,
    SVGStringList: false,
    SVGTransformList: false,
    SourceBufferList: false,
    StyleSheetList: true,
    // TODO: Not spec compliant, should be false.
    TextTrackCueList: false,
    TextTrackList: false,
    TouchList: false
  };
  
  for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
    var NAME = collections[i];
    var explicit = DOMIterables[NAME];
    var Collection = global[NAME];
    var proto = Collection && Collection.prototype;
    var key;
  
    if (proto) {
      if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
      if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
      Iterators[NAME] = ArrayValues;
      if (explicit) for (key in $iterators) {
        if (!proto[key]) redefine(proto, key, $iterators[key], true);
      }
    }
  }
  
  /***/ }),
  
  /***/ 2486:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  var $export = __webpack_require__(2583);
  
  var $task = __webpack_require__(719);
  
  $export($export.G + $export.B, {
    setImmediate: $task.set,
    clearImmediate: $task.clear
  });
  
  /***/ }),
  
  /***/ 2240:
  /***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
  
  // ie9- setTimeout & setInterval additional parameters fix
  var global = __webpack_require__(4319);
  
  var $export = __webpack_require__(2583);
  
  var userAgent = __webpack_require__(5752);
  
  var slice = [].slice;
  var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
  
  var wrap = function wrap(set) {
    return function (fn, time
    /* , ...args */
    ) {
      var boundArgs = arguments.length > 2;
      var args = boundArgs ? slice.call(arguments, 2) : false;
      return set(boundArgs ? function () {
        // eslint-disable-next-line no-new-func
        (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
      } : fn, time);
    };
  };
  
  $export($export.G + $export.B + $export.F * MSIE, {
    setTimeout: wrap(global.setTimeout),
    setInterval: wrap(global.setInterval)
  });
  
  /***/ }),
  
  /***/ 8778:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  __webpack_require__(2240);
  
  __webpack_require__(2486);
  
  __webpack_require__(6509);
  
  module.exports = __webpack_require__(195);
  
  /***/ }),
  
  /***/ 4566:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  var debug = __webpack_require__(1837)('serialport/binding-abstract');
  /**
   * @name Binding
   * @type {AbstractBinding}
   * @since 5.0.0
   * @description The `Binding` is how Node-SerialPort talks to the underlying system. By default, we auto detect Windows, Linux and OS X, and load the appropriate module for your system. You can assign `SerialPort.Binding` to any binding you like. Find more by searching at [npm](https://npmjs.org/).
    Prevent auto loading the default bindings by requiring SerialPort with:
    ```js
    var SerialPort = require('@serialport/stream');
    SerialPort.Binding = MyBindingClass;
    ```
   */
  
  /**
   * You never have to use `Binding` objects directly. SerialPort uses them to access the underlying hardware. This documentation is geared towards people who are making bindings for different platforms. This class can be inherited from to get type checking for each method.
   * @class AbstractBinding
   * @param {object} options options for the binding
   * @property {boolean} isOpen Required property. `true` if the port is open, `false` otherwise. Should be read-only.
   * @throws {TypeError} When given invalid arguments, a `TypeError` is thrown.
   * @since 5.0.0
   */
  
  
  var AbstractBinding = /*#__PURE__*/function () {
    function AbstractBinding() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  
      _classCallCheck(this, AbstractBinding);
  
      if (_typeof(opt) !== 'object') {
        throw new TypeError('"options" is not an object');
      }
    }
    /**
     * Opens a connection to the serial port referenced by the path.
     * @param {string} path the path or com port to open
     * @param {openOptions} options openOptions for the serialport
     * @returns {Promise} Resolves after the port is opened and configured.
     * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
     */
  
  
    _createClass(AbstractBinding, [{
      key: "open",
      value: function () {
        var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path, options) {
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (path) {
                    _context.next = 2;
                    break;
                  }
  
                  throw new TypeError('"path" is not a valid port');
  
                case 2:
                  if (!(_typeof(options) !== 'object')) {
                    _context.next = 4;
                    break;
                  }
  
                  throw new TypeError('"options" is not an object');
  
                case 4:
                  debug('open');
  
                  if (!this.isOpen) {
                    _context.next = 7;
                    break;
                  }
  
                  throw new Error('Already open');
  
                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));
  
        function open(_x, _x2) {
          return _open.apply(this, arguments);
        }
  
        return open;
      }()
      /**
       * Closes an open connection
       * @returns {Promise} Resolves once the connection is closed.
       * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
       */
  
    }, {
      key: "close",
      value: function () {
        var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  debug('close');
  
                  if (this.isOpen) {
                    _context2.next = 3;
                    break;
                  }
  
                  throw new Error('Port is not open');
  
                case 3:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));
  
        function close() {
          return _close.apply(this, arguments);
        }
  
        return close;
      }()
      /**
       * Request a number of bytes from the SerialPort. This function is similar to Node's [`fs.read`](http://nodejs.org/api/fs.html#fs_fs_read_fd_buffer_offset_length_position_callback) except it will always return at least one byte.
      The in progress reads must error when the port is closed with an error object that has the property `canceled` equal to `true`. Any other error will cause a disconnection.
        * @param {buffer} buffer Accepts a [`Buffer`](http://nodejs.org/api/buffer.html) object.
       * @param {integer} offset The offset in the buffer to start writing at.
       * @param {integer} length Specifies the maximum number of bytes to read.
       * @returns {Promise} Resolves with the number of bytes read after a read operation.
       * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
       */
  
    }, {
      key: "read",
      value: function () {
        var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(buffer, offset, length) {
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (Buffer.isBuffer(buffer)) {
                    _context3.next = 2;
                    break;
                  }
  
                  throw new TypeError('"buffer" is not a Buffer');
  
                case 2:
                  if (!(typeof offset !== 'number' || isNaN(offset))) {
                    _context3.next = 4;
                    break;
                  }
  
                  throw new TypeError("\"offset\" is not an integer got \"".concat(isNaN(offset) ? 'NaN' : _typeof(offset), "\""));
  
                case 4:
                  if (!(typeof length !== 'number' || isNaN(length))) {
                    _context3.next = 6;
                    break;
                  }
  
                  throw new TypeError("\"length\" is not an integer got \"".concat(isNaN(length) ? 'NaN' : _typeof(length), "\""));
  
                case 6:
                  debug('read');
  
                  if (!(buffer.length < offset + length)) {
                    _context3.next = 9;
                    break;
                  }
  
                  throw new Error('buffer is too small');
  
                case 9:
                  if (this.isOpen) {
                    _context3.next = 11;
                    break;
                  }
  
                  throw new Error('Port is not open');
  
                case 11:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));
  
        function read(_x3, _x4, _x5) {
          return _read.apply(this, arguments);
        }
  
        return read;
      }()
      /**
       * Write bytes to the SerialPort. Only called when there is no pending write operation.
      The in progress writes must error when the port is closed with an error object that has the property `canceled` equal to `true`. Any other error will cause a disconnection.
        * @param {buffer} buffer - Accepts a [`Buffer`](http://nodejs.org/api/buffer.html) object.
       * @returns {Promise} Resolves after the data is passed to the operating system for writing.
       * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
       */
  
    }, {
      key: "write",
      value: function () {
        var _write = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(buffer) {
          return _regeneratorRuntime().wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  if (Buffer.isBuffer(buffer)) {
                    _context4.next = 2;
                    break;
                  }
  
                  throw new TypeError('"buffer" is not a Buffer');
  
                case 2:
                  debug('write', buffer.length, 'bytes');
  
                  if (this.isOpen) {
                    _context4.next = 6;
                    break;
                  }
  
                  debug('write', 'error port is not open');
                  throw new Error('Port is not open');
  
                case 6:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));
  
        function write(_x6) {
          return _write.apply(this, arguments);
        }
  
        return write;
      }()
      /**
       * Changes connection settings on an open port. Only `baudRate` is supported.
       * @param {object=} options Only supports `baudRate`.
       * @param {number=} [options.baudRate] If provided a baud rate that the bindings do not support, it should reject.
       * @returns {Promise} Resolves once the port's baud rate changes.
       * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
       */
  
    }, {
      key: "update",
      value: function () {
        var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(options) {
          return _regeneratorRuntime().wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  if (!(_typeof(options) !== 'object')) {
                    _context5.next = 2;
                    break;
                  }
  
                  throw TypeError('"options" is not an object');
  
                case 2:
                  if (!(typeof options.baudRate !== 'number')) {
                    _context5.next = 4;
                    break;
                  }
  
                  throw new TypeError('"options.baudRate" is not a number');
  
                case 4:
                  debug('update');
  
                  if (this.isOpen) {
                    _context5.next = 7;
                    break;
                  }
  
                  throw new Error('Port is not open');
  
                case 7:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));
  
        function update(_x7) {
          return _update.apply(this, arguments);
        }
  
        return update;
      }()
      /**
       * Set control flags on an open port.
       * @param {object=} options All options are operating system default when the port is opened. Every flag is set on each call to the provided or default values. All options are always provided.
       * @param {Boolean} [options.brk=false] flag for brk
       * @param {Boolean} [options.cts=false] flag for cts
       * @param {Boolean} [options.dsr=false] flag for dsr
       * @param {Boolean} [options.dtr=true] flag for dtr
       * @param {Boolean} [options.rts=true] flag for rts
       * @param {Boolean} [options.lowLatency=false] flag for lowLatency mode on Linux
       * @returns {Promise} Resolves once the port's flags are set.
       * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
       */
  
    }, {
      key: "set",
      value: function () {
        var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(options) {
          return _regeneratorRuntime().wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  if (!(_typeof(options) !== 'object')) {
                    _context6.next = 2;
                    break;
                  }
  
                  throw new TypeError('"options" is not an object');
  
                case 2:
                  debug('set');
  
                  if (this.isOpen) {
                    _context6.next = 5;
                    break;
                  }
  
                  throw new Error('Port is not open');
  
                case 5:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));
  
        function set(_x8) {
          return _set.apply(this, arguments);
        }
  
        return set;
      }()
      /**
       * Get the control flags (CTS, DSR, DCD) on the open port.
       * @returns {Promise} Resolves with the retrieved flags.
       * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
       */
  
    }, {
      key: "get",
      value: function () {
        var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
          return _regeneratorRuntime().wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  debug('get');
  
                  if (this.isOpen) {
                    _context7.next = 3;
                    break;
                  }
  
                  throw new Error('Port is not open');
  
                case 3:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));
  
        function get() {
          return _get.apply(this, arguments);
        }
  
        return get;
      }()
      /**
       * Get the OS reported baud rate for the open port.
       * Used mostly for debugging custom baud rates.
       * @returns {Promise} Resolves with the current baud rate.
       * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
       */
  
    }, {
      key: "getBaudRate",
      value: function () {
        var _getBaudRate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
          return _regeneratorRuntime().wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  debug('getbaudRate');
  
                  if (this.isOpen) {
                    _context8.next = 3;
                    break;
                  }
  
                  throw new Error('Port is not open');
  
                case 3:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));
  
        function getBaudRate() {
          return _getBaudRate.apply(this, arguments);
        }
  
        return getBaudRate;
      }()
      /**
       * Flush (discard) data received but not read, and written but not transmitted.
       * @returns {Promise} Resolves once the flush operation finishes.
       * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
       */
  
    }, {
      key: "flush",
      value: function () {
        var _flush = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
          return _regeneratorRuntime().wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  debug('flush');
  
                  if (this.isOpen) {
                    _context9.next = 3;
                    break;
                  }
  
                  throw new Error('Port is not open');
  
                case 3:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));
  
        function flush() {
          return _flush.apply(this, arguments);
        }
  
        return flush;
      }()
      /**
       * Drain waits until all output data is transmitted to the serial port. An in progress write should be completed before this returns.
       * @returns {Promise} Resolves once the drain operation finishes.
       * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
       */
  
    }, {
      key: "drain",
      value: function () {
        var _drain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
          return _regeneratorRuntime().wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  debug('drain');
  
                  if (this.isOpen) {
                    _context10.next = 3;
                    break;
                  }
  
                  throw new Error('Port is not open');
  
                case 3:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this);
        }));
  
        function drain() {
          return _drain.apply(this, arguments);
        }
  
        return drain;
      }()
    }], [{
      key: "list",
      value:
      /**
       * Retrieves a list of available serial ports with metadata. The `path` must be guaranteed, and all other fields should be undefined if unavailable. The `path` is either the path or an identifier (eg `COM1`) used to open the serialport.
       * @returns {Promise} resolves to an array of port [info objects](#module_serialport--SerialPort.list).
       */
      function () {
        var _list = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
          return _regeneratorRuntime().wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  debug('list');
  
                case 1:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11);
        }));
  
        function list() {
          return _list.apply(this, arguments);
        }
  
        return list;
      }()
    }]);
  
    return AbstractBinding;
  }();
  
  module.exports = AbstractBinding;
  
  /***/ }),
  
  /***/ 6771:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
  
  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
  
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  
  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
  
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  
  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
  
  var _require = __webpack_require__(7440),
      promisify = _require.promisify;
  
  var binding = __webpack_require__(9343)('bindings.node');
  
  var AbstractBinding = __webpack_require__(4566);
  
  var Poller = __webpack_require__(7286);
  
  var unixRead = __webpack_require__(1208);
  
  var unixWrite = __webpack_require__(7383);
  
  var _require2 = __webpack_require__(376),
      wrapWithHiddenComName = _require2.wrapWithHiddenComName;
  
  var defaultBindingOptions = Object.freeze({
    vmin: 1,
    vtime: 0
  });
  var asyncList = promisify(binding.list);
  var asyncOpen = promisify(binding.open);
  var asyncClose = promisify(binding.close);
  var asyncUpdate = promisify(binding.update);
  var asyncSet = promisify(binding.set);
  var asyncGet = promisify(binding.get);
  var asyncGetBaudRate = promisify(binding.getBaudRate);
  var asyncDrain = promisify(binding.drain);
  var asyncFlush = promisify(binding.flush);
  /**
   * The Darwin binding layer for OSX
   */
  
  var DarwinBinding = /*#__PURE__*/function (_AbstractBinding) {
    _inherits(DarwinBinding, _AbstractBinding);
  
    var _super = _createSuper(DarwinBinding);
  
    function DarwinBinding() {
      var _this;
  
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  
      _classCallCheck(this, DarwinBinding);
  
      _this = _super.call(this, opt);
      _this.bindingOptions = _objectSpread(_objectSpread({}, defaultBindingOptions), opt.bindingOptions);
      _this.fd = null;
      _this.writeOperation = null;
      return _this;
    }
  
    _createClass(DarwinBinding, [{
      key: "isOpen",
      get: function get() {
        return this.fd !== null;
      }
    }, {
      key: "open",
      value: function () {
        var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path, options) {
          var fd;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _get(_getPrototypeOf(DarwinBinding.prototype), "open", this).call(this, path, options);
  
                case 2:
                  this.openOptions = _objectSpread(_objectSpread({}, this.bindingOptions), options);
                  _context.next = 5;
                  return asyncOpen(path, this.openOptions);
  
                case 5:
                  fd = _context.sent;
                  this.fd = fd;
                  this.poller = new Poller(fd);
  
                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));
  
        function open(_x, _x2) {
          return _open.apply(this, arguments);
        }
  
        return open;
      }()
    }, {
      key: "close",
      value: function () {
        var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          var fd;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _get(_getPrototypeOf(DarwinBinding.prototype), "close", this).call(this);
  
                case 2:
                  fd = this.fd;
                  this.poller.stop();
                  this.poller.destroy();
                  this.poller = null;
                  this.openOptions = null;
                  this.fd = null;
                  return _context2.abrupt("return", asyncClose(fd));
  
                case 9:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));
  
        function close() {
          return _close.apply(this, arguments);
        }
  
        return close;
      }()
    }, {
      key: "read",
      value: function () {
        var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(buffer, offset, length) {
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return _get(_getPrototypeOf(DarwinBinding.prototype), "read", this).call(this, buffer, offset, length);
  
                case 2:
                  return _context3.abrupt("return", unixRead({
                    binding: this,
                    buffer: buffer,
                    offset: offset,
                    length: length
                  }));
  
                case 3:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));
  
        function read(_x3, _x4, _x5) {
          return _read.apply(this, arguments);
        }
  
        return read;
      }()
    }, {
      key: "write",
      value: function () {
        var _write = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(buffer) {
          var _this2 = this;
  
          return _regeneratorRuntime().wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  this.writeOperation = _get(_getPrototypeOf(DarwinBinding.prototype), "write", this).call(this, buffer).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
                    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            if (!(buffer.length === 0)) {
                              _context4.next = 2;
                              break;
                            }
  
                            return _context4.abrupt("return");
  
                          case 2:
                            _context4.next = 4;
                            return unixWrite({
                              binding: _this2,
                              buffer: buffer
                            });
  
                          case 4:
                            _this2.writeOperation = null;
  
                          case 5:
                          case "end":
                            return _context4.stop();
                        }
                      }
                    }, _callee4);
                  })));
                  return _context5.abrupt("return", this.writeOperation);
  
                case 2:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));
  
        function write(_x6) {
          return _write.apply(this, arguments);
        }
  
        return write;
      }()
    }, {
      key: "update",
      value: function () {
        var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(options) {
          return _regeneratorRuntime().wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return _get(_getPrototypeOf(DarwinBinding.prototype), "update", this).call(this, options);
  
                case 2:
                  return _context6.abrupt("return", asyncUpdate(this.fd, options));
  
                case 3:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));
  
        function update(_x7) {
          return _update.apply(this, arguments);
        }
  
        return update;
      }()
    }, {
      key: "set",
      value: function () {
        var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(options) {
          return _regeneratorRuntime().wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _context7.next = 2;
                  return _get(_getPrototypeOf(DarwinBinding.prototype), "set", this).call(this, options);
  
                case 2:
                  return _context7.abrupt("return", asyncSet(this.fd, options));
  
                case 3:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));
  
        function set(_x8) {
          return _set.apply(this, arguments);
        }
  
        return set;
      }()
    }, {
      key: "get",
      value: function () {
        var _get2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
          return _regeneratorRuntime().wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  _context8.next = 2;
                  return _get(_getPrototypeOf(DarwinBinding.prototype), "get", this).call(this);
  
                case 2:
                  return _context8.abrupt("return", asyncGet(this.fd));
  
                case 3:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));
  
        function get() {
          return _get2.apply(this, arguments);
        }
  
        return get;
      }()
    }, {
      key: "getBaudRate",
      value: function () {
        var _getBaudRate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
          return _regeneratorRuntime().wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _context9.next = 2;
                  return _get(_getPrototypeOf(DarwinBinding.prototype), "get", this).call(this);
  
                case 2:
                  return _context9.abrupt("return", asyncGetBaudRate(this.fd));
  
                case 3:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));
  
        function getBaudRate() {
          return _getBaudRate.apply(this, arguments);
        }
  
        return getBaudRate;
      }()
    }, {
      key: "drain",
      value: function () {
        var _drain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
          return _regeneratorRuntime().wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  _context10.next = 2;
                  return _get(_getPrototypeOf(DarwinBinding.prototype), "drain", this).call(this);
  
                case 2:
                  _context10.next = 4;
                  return this.writeOperation;
  
                case 4:
                  return _context10.abrupt("return", asyncDrain(this.fd));
  
                case 5:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this);
        }));
  
        function drain() {
          return _drain.apply(this, arguments);
        }
  
        return drain;
      }()
    }, {
      key: "flush",
      value: function () {
        var _flush = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
          return _regeneratorRuntime().wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  _context11.next = 2;
                  return _get(_getPrototypeOf(DarwinBinding.prototype), "flush", this).call(this);
  
                case 2:
                  return _context11.abrupt("return", asyncFlush(this.fd));
  
                case 3:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11, this);
        }));
  
        function flush() {
          return _flush.apply(this, arguments);
        }
  
        return flush;
      }()
    }], [{
      key: "list",
      value: function list() {
        return wrapWithHiddenComName(asyncList());
      }
    }]);
  
    return DarwinBinding;
  }(AbstractBinding);
  
  module.exports = DarwinBinding;
  
  /***/ }),
  
  /***/ 5488:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  /* provided dependency */ var process = __webpack_require__(7844);
  var debug = __webpack_require__(1837)('serialport/bindings');
  
  switch (process.platform) {
    case 'win32':
      debug('loading WindowsBinding');
      module.exports = __webpack_require__(6285);
      break;
  
    case 'darwin':
      debug('loading DarwinBinding');
      module.exports = __webpack_require__(6771);
      break;
  
    default:
      debug('loading LinuxBinding');
      module.exports = __webpack_require__(2750);
  }
  
  /***/ }),
  
  /***/ 376:
  /***/ (function(module) {
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  
  var warningSent = false;
  
  var wrapWithHiddenComName = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(portsPromise) {
      var ports;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return portsPromise;
  
            case 2:
              ports = _context.sent;
              return _context.abrupt("return", ports.map(function (port) {
                var newPort = _objectSpread({}, port);
  
                return Object.defineProperties(newPort, {
                  comName: {
                    get: function get() {
                      if (!warningSent) {
                        warningSent = true;
                        console.warn("\"PortInfo.comName\" has been deprecated. You should now use \"PortInfo.path\". The property will be removed in the next major release.");
                      }
  
                      return newPort.path;
                    },
                    enumerable: false
                  }
                });
              }));
  
            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
  
    return function wrapWithHiddenComName(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  
  module.exports = {
    wrapWithHiddenComName: wrapWithHiddenComName
  };
  
  /***/ }),
  
  /***/ 5633:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var childProcess = __webpack_require__(1365);
  
  var Readline = __webpack_require__(4682); // get only serial port names
  
  
  function checkPathOfDevice(path) {
    return /(tty(S|WCH|ACM|USB|AMA|MFD|O|XRUSB)|rfcomm)/.test(path) && path;
  }
  
  function propName(name) {
    return {
      DEVNAME: 'path',
      ID_VENDOR_ENC: 'manufacturer',
      ID_SERIAL_SHORT: 'serialNumber',
      ID_VENDOR_ID: 'vendorId',
      ID_MODEL_ID: 'productId',
      DEVLINKS: 'pnpId'
    }[name.toUpperCase()];
  }
  
  function decodeHexEscape(str) {
    return str.replace(/\\x([a-fA-F0-9]{2})/g, function (a, b) {
      return String.fromCharCode(parseInt(b, 16));
    });
  }
  
  function propVal(name, val) {
    if (name === 'pnpId') {
      var match = val.match(/\/by-id\/([^\s]+)/);
      return match && match[1] || undefined;
    }
  
    if (name === 'manufacturer') {
      return decodeHexEscape(val);
    }
  
    if (/^0x/.test(val)) {
      return val.substr(2);
    }
  
    return val;
  }
  
  function listLinux() {
    return new Promise(function (resolve, reject) {
      var ports = [];
      var ude = childProcess.spawn('udevadm', ['info', '-e']);
      var lines = ude.stdout.pipe(new Readline());
      ude.on('close', function (code) {
        return code && reject(new Error("Error listing ports udevadm exited with error code: ".concat(code)));
      });
      ude.on('error', reject);
      lines.on('error', reject);
      var port = {};
      var skipPort = false;
      lines.on('data', function (line) {
        var lineType = line.slice(0, 1);
        var data = line.slice(3); // new port entry
  
        if (lineType === 'P') {
          port = {
            manufacturer: undefined,
            serialNumber: undefined,
            pnpId: undefined,
            locationId: undefined,
            vendorId: undefined,
            productId: undefined
          };
          skipPort = false;
          return;
        }
  
        if (skipPort) {
          return;
        } // Check dev name and save port if it matches flag to skip the rest of the data if not
  
  
        if (lineType === 'N') {
          if (checkPathOfDevice(data)) {
            ports.push(port);
          } else {
            skipPort = true;
          }
  
          return;
        } // parse data about each port
  
  
        if (lineType === 'E') {
          var keyValue = data.match(/^(.+)=(.*)/);
  
          if (!keyValue) {
            return;
          }
  
          var key = propName(keyValue[1]);
  
          if (!key) {
            return;
          }
  
          port[key] = propVal(key, keyValue[2]);
        }
      });
      lines.on('finish', function () {
        return resolve(ports);
      });
    });
  }
  
  module.exports = listLinux;
  
  /***/ }),
  
  /***/ 2750:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
  
  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
  
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  
  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
  
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  
  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
  
  var _require = __webpack_require__(7440),
      promisify = _require.promisify;
  
  var binding = __webpack_require__(9343)('bindings.node');
  
  var AbstractBinding = __webpack_require__(4566);
  
  var linuxList = __webpack_require__(5633);
  
  var Poller = __webpack_require__(7286);
  
  var unixRead = __webpack_require__(1208);
  
  var unixWrite = __webpack_require__(7383);
  
  var _require2 = __webpack_require__(376),
      wrapWithHiddenComName = _require2.wrapWithHiddenComName;
  
  var defaultBindingOptions = Object.freeze({
    vmin: 1,
    vtime: 0
  });
  var asyncOpen = promisify(binding.open);
  var asyncClose = promisify(binding.close);
  var asyncUpdate = promisify(binding.update);
  var asyncSet = promisify(binding.set);
  var asyncGet = promisify(binding.get);
  var asyncGetBaudRate = promisify(binding.getBaudRate);
  var asyncDrain = promisify(binding.drain);
  var asyncFlush = promisify(binding.flush);
  /**
   * The linux binding layer
   */
  
  var LinuxBinding = /*#__PURE__*/function (_AbstractBinding) {
    _inherits(LinuxBinding, _AbstractBinding);
  
    var _super = _createSuper(LinuxBinding);
  
    function LinuxBinding() {
      var _this;
  
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  
      _classCallCheck(this, LinuxBinding);
  
      _this = _super.call(this, opt);
      _this.bindingOptions = _objectSpread(_objectSpread({}, defaultBindingOptions), opt.bindingOptions);
      _this.fd = null;
      _this.writeOperation = null;
      return _this;
    }
  
    _createClass(LinuxBinding, [{
      key: "isOpen",
      get: function get() {
        return this.fd !== null;
      }
    }, {
      key: "open",
      value: function () {
        var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path, options) {
          var fd;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _get(_getPrototypeOf(LinuxBinding.prototype), "open", this).call(this, path, options);
  
                case 2:
                  this.openOptions = _objectSpread(_objectSpread({}, this.bindingOptions), options);
                  _context.next = 5;
                  return asyncOpen(path, this.openOptions);
  
                case 5:
                  fd = _context.sent;
                  this.fd = fd;
                  this.poller = new Poller(fd);
  
                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));
  
        function open(_x, _x2) {
          return _open.apply(this, arguments);
        }
  
        return open;
      }()
    }, {
      key: "close",
      value: function () {
        var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          var fd;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _get(_getPrototypeOf(LinuxBinding.prototype), "close", this).call(this);
  
                case 2:
                  fd = this.fd;
                  this.poller.stop();
                  this.poller.destroy();
                  this.poller = null;
                  this.openOptions = null;
                  this.fd = null;
                  return _context2.abrupt("return", asyncClose(fd));
  
                case 9:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));
  
        function close() {
          return _close.apply(this, arguments);
        }
  
        return close;
      }()
    }, {
      key: "read",
      value: function () {
        var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(buffer, offset, length) {
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return _get(_getPrototypeOf(LinuxBinding.prototype), "read", this).call(this, buffer, offset, length);
  
                case 2:
                  return _context3.abrupt("return", unixRead({
                    binding: this,
                    buffer: buffer,
                    offset: offset,
                    length: length
                  }));
  
                case 3:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));
  
        function read(_x3, _x4, _x5) {
          return _read.apply(this, arguments);
        }
  
        return read;
      }()
    }, {
      key: "write",
      value: function () {
        var _write = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(buffer) {
          var _this2 = this;
  
          return _regeneratorRuntime().wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  this.writeOperation = _get(_getPrototypeOf(LinuxBinding.prototype), "write", this).call(this, buffer).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
                    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            if (!(buffer.length === 0)) {
                              _context4.next = 2;
                              break;
                            }
  
                            return _context4.abrupt("return");
  
                          case 2:
                            _context4.next = 4;
                            return unixWrite({
                              binding: _this2,
                              buffer: buffer
                            });
  
                          case 4:
                            _this2.writeOperation = null;
  
                          case 5:
                          case "end":
                            return _context4.stop();
                        }
                      }
                    }, _callee4);
                  })));
                  return _context5.abrupt("return", this.writeOperation);
  
                case 2:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));
  
        function write(_x6) {
          return _write.apply(this, arguments);
        }
  
        return write;
      }()
    }, {
      key: "update",
      value: function () {
        var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(options) {
          return _regeneratorRuntime().wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return _get(_getPrototypeOf(LinuxBinding.prototype), "update", this).call(this, options);
  
                case 2:
                  return _context6.abrupt("return", asyncUpdate(this.fd, options));
  
                case 3:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));
  
        function update(_x7) {
          return _update.apply(this, arguments);
        }
  
        return update;
      }()
    }, {
      key: "set",
      value: function () {
        var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(options) {
          return _regeneratorRuntime().wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _context7.next = 2;
                  return _get(_getPrototypeOf(LinuxBinding.prototype), "set", this).call(this, options);
  
                case 2:
                  return _context7.abrupt("return", asyncSet(this.fd, options));
  
                case 3:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));
  
        function set(_x8) {
          return _set.apply(this, arguments);
        }
  
        return set;
      }()
    }, {
      key: "get",
      value: function () {
        var _get2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
          return _regeneratorRuntime().wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  _context8.next = 2;
                  return _get(_getPrototypeOf(LinuxBinding.prototype), "get", this).call(this);
  
                case 2:
                  return _context8.abrupt("return", asyncGet(this.fd));
  
                case 3:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));
  
        function get() {
          return _get2.apply(this, arguments);
        }
  
        return get;
      }()
    }, {
      key: "getBaudRate",
      value: function () {
        var _getBaudRate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
          return _regeneratorRuntime().wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _context9.next = 2;
                  return _get(_getPrototypeOf(LinuxBinding.prototype), "get", this).call(this);
  
                case 2:
                  return _context9.abrupt("return", asyncGetBaudRate(this.fd));
  
                case 3:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));
  
        function getBaudRate() {
          return _getBaudRate.apply(this, arguments);
        }
  
        return getBaudRate;
      }()
    }, {
      key: "drain",
      value: function () {
        var _drain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
          return _regeneratorRuntime().wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  _context10.next = 2;
                  return _get(_getPrototypeOf(LinuxBinding.prototype), "drain", this).call(this);
  
                case 2:
                  _context10.next = 4;
                  return this.writeOperation;
  
                case 4:
                  return _context10.abrupt("return", asyncDrain(this.fd));
  
                case 5:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this);
        }));
  
        function drain() {
          return _drain.apply(this, arguments);
        }
  
        return drain;
      }()
    }, {
      key: "flush",
      value: function () {
        var _flush = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
          return _regeneratorRuntime().wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  _context11.next = 2;
                  return _get(_getPrototypeOf(LinuxBinding.prototype), "flush", this).call(this);
  
                case 2:
                  return _context11.abrupt("return", asyncFlush(this.fd));
  
                case 3:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11, this);
        }));
  
        function flush() {
          return _flush.apply(this, arguments);
        }
  
        return flush;
      }()
    }], [{
      key: "list",
      value: function list() {
        return wrapWithHiddenComName(linuxList());
      }
    }]);
  
    return LinuxBinding;
  }(AbstractBinding);
  
  module.exports = LinuxBinding;
  
  /***/ }),
  
  /***/ 7286:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
  
  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
  
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  
  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
  
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  
  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
  
  var debug = __webpack_require__(1837);
  
  var logger = debug('serialport/bindings/poller');
  
  var EventEmitter = __webpack_require__(3359);
  
  var PollerBindings = __webpack_require__(9343)('bindings.node').Poller;
  
  var EVENTS = {
    UV_READABLE: 1,
    UV_WRITABLE: 2,
    UV_DISCONNECT: 4
  };
  
  function handleEvent(error, eventFlag) {
    if (error) {
      logger('error', error);
      this.emit('readable', error);
      this.emit('writable', error);
      this.emit('disconnect', error);
      return;
    }
  
    if (eventFlag & EVENTS.UV_READABLE) {
      logger('received "readable"');
      this.emit('readable', null);
    }
  
    if (eventFlag & EVENTS.UV_WRITABLE) {
      logger('received "writable"');
      this.emit('writable', null);
    }
  
    if (eventFlag & EVENTS.UV_DISCONNECT) {
      logger('received "disconnect"');
      this.emit('disconnect', null);
    }
  }
  /**
   * Polls unix systems for readable or writable states of a file or serialport
   */
  
  
  var Poller = /*#__PURE__*/function (_EventEmitter) {
    _inherits(Poller, _EventEmitter);
  
    var _super = _createSuper(Poller);
  
    function Poller(fd) {
      var _this;
  
      var FDPoller = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PollerBindings;
  
      _classCallCheck(this, Poller);
  
      logger('Creating poller');
      _this = _super.call(this);
      _this.poller = new FDPoller(fd, handleEvent.bind(_assertThisInitialized(_this)));
      return _this;
    }
    /**
     * Wait for the next event to occur
     * @param {string} event ('readable'|'writable'|'disconnect')
     * @returns {Poller} returns itself
     */
  
  
    _createClass(Poller, [{
      key: "once",
      value: function once(event, callback) {
        switch (event) {
          case 'readable':
            this.poll(EVENTS.UV_READABLE);
            break;
  
          case 'writable':
            this.poll(EVENTS.UV_WRITABLE);
            break;
  
          case 'disconnect':
            this.poll(EVENTS.UV_DISCONNECT);
            break;
        }
  
        return _get(_getPrototypeOf(Poller.prototype), "once", this).call(this, event, callback);
      }
      /**
       * Ask the bindings to listen for an event, it is recommend to use `.once()` for easy use
       * @param {EVENTS} eventFlag polls for an event or group of events based upon a flag.
       * @returns {undefined}
       */
  
    }, {
      key: "poll",
      value: function poll(eventFlag) {
        eventFlag = eventFlag || 0;
  
        if (eventFlag & EVENTS.UV_READABLE) {
          logger('Polling for "readable"');
        }
  
        if (eventFlag & EVENTS.UV_WRITABLE) {
          logger('Polling for "writable"');
        }
  
        if (eventFlag & EVENTS.UV_DISCONNECT) {
          logger('Polling for "disconnect"');
        }
  
        this.poller.poll(eventFlag);
      }
      /**
       * Stop listening for events and cancel all outstanding listening with an error
       * @returns {undefined}
       */
  
    }, {
      key: "stop",
      value: function stop() {
        logger('Stopping poller');
        this.poller.stop();
        this.emitCanceled();
      }
    }, {
      key: "destroy",
      value: function destroy() {
        logger('Destroying poller');
        this.poller.destroy();
        this.emitCanceled();
      }
    }, {
      key: "emitCanceled",
      value: function emitCanceled() {
        var err = new Error('Canceled');
        err.canceled = true;
        this.emit('readable', err);
        this.emit('writable', err);
        this.emit('disconnect', err);
      }
    }]);
  
    return Poller;
  }(EventEmitter);
  
  Poller.EVENTS = EVENTS;
  module.exports = Poller;
  
  /***/ }),
  
  /***/ 1208:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  
  var fs = __webpack_require__(3144);
  
  var debug = __webpack_require__(1837);
  
  var logger = debug('serialport/bindings/unixRead');
  
  var _require = __webpack_require__(7440),
      promisify = _require.promisify;
  
  var readAsync = promisify(fs.read);
  
  var readable = function readable(binding) {
    return new Promise(function (resolve, reject) {
      binding.poller.once('readable', function (err) {
        return err ? reject(err) : resolve();
      });
    });
  };
  
  var unixRead = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {
      var binding, buffer, offset, length, _ref$fsReadAsync, fsReadAsync, err, _yield$fsReadAsync, bytesRead, _err, disconnectError;
  
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              binding = _ref.binding, buffer = _ref.buffer, offset = _ref.offset, length = _ref.length, _ref$fsReadAsync = _ref.fsReadAsync, fsReadAsync = _ref$fsReadAsync === void 0 ? readAsync : _ref$fsReadAsync;
              logger('Starting read');
  
              if (binding.isOpen) {
                _context.next = 6;
                break;
              }
  
              err = new Error('Port is not open');
              err.canceled = true;
              throw err;
  
            case 6:
              _context.prev = 6;
              _context.next = 9;
              return fsReadAsync(binding.fd, buffer, offset, length, null);
  
            case 9:
              _yield$fsReadAsync = _context.sent;
              bytesRead = _yield$fsReadAsync.bytesRead;
  
              if (!(bytesRead === 0)) {
                _context.next = 13;
                break;
              }
  
              return _context.abrupt("return", unixRead({
                binding: binding,
                buffer: buffer,
                offset: offset,
                length: length,
                fsReadAsync: fsReadAsync
              }));
  
            case 13:
              logger('Finished read', bytesRead, 'bytes');
              return _context.abrupt("return", {
                bytesRead: bytesRead,
                buffer: buffer
              });
  
            case 17:
              _context.prev = 17;
              _context.t0 = _context["catch"](6);
              logger('read error', _context.t0);
  
              if (!(_context.t0.code === 'EAGAIN' || _context.t0.code === 'EWOULDBLOCK' || _context.t0.code === 'EINTR')) {
                _context.next = 29;
                break;
              }
  
              if (binding.isOpen) {
                _context.next = 25;
                break;
              }
  
              _err = new Error('Port is not open');
              _err.canceled = true;
              throw _err;
  
            case 25:
              logger('waiting for readable because of code:', _context.t0.code);
              _context.next = 28;
              return readable(binding);
  
            case 28:
              return _context.abrupt("return", unixRead({
                binding: binding,
                buffer: buffer,
                offset: offset,
                length: length,
                fsReadAsync: fsReadAsync
              }));
  
            case 29:
              disconnectError = _context.t0.code === 'EBADF' || // Bad file number means we got closed
              _context.t0.code === 'ENXIO' || // No such device or address probably usb disconnect
              _context.t0.code === 'UNKNOWN' || _context.t0.errno === -1; // generic error
  
              if (disconnectError) {
                _context.t0.disconnect = true;
                logger('disconnecting', _context.t0);
              }
  
              throw _context.t0;
  
            case 32:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[6, 17]]);
    }));
  
    return function unixRead(_x) {
      return _ref2.apply(this, arguments);
    };
  }();
  
  module.exports = unixRead;
  
  /***/ }),
  
  /***/ 7383:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  
  var fs = __webpack_require__(3144);
  
  var debug = __webpack_require__(1837);
  
  var logger = debug('serialport/bindings/unixWrite');
  
  var _require = __webpack_require__(7440),
      promisify = _require.promisify;
  
  var writeAsync = promisify(fs.write);
  
  var writable = function writable(binding) {
    return new Promise(function (resolve, reject) {
      binding.poller.once('writable', function (err) {
        return err ? reject(err) : resolve();
      });
    });
  };
  
  var unixWrite = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {
      var binding, buffer, _ref$offset, offset, _ref$fsWriteAsync, fsWriteAsync, bytesToWrite, _yield$fsWriteAsync, bytesWritten, disconnectError;
  
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              binding = _ref.binding, buffer = _ref.buffer, _ref$offset = _ref.offset, offset = _ref$offset === void 0 ? 0 : _ref$offset, _ref$fsWriteAsync = _ref.fsWriteAsync, fsWriteAsync = _ref$fsWriteAsync === void 0 ? writeAsync : _ref$fsWriteAsync;
              bytesToWrite = buffer.length - offset;
              logger('Starting write', buffer.length, 'bytes offset', offset, 'bytesToWrite', bytesToWrite);
  
              if (binding.isOpen) {
                _context.next = 5;
                break;
              }
  
              throw new Error('Port is not open');
  
            case 5:
              _context.prev = 5;
              _context.next = 8;
              return fsWriteAsync(binding.fd, buffer, offset, bytesToWrite);
  
            case 8:
              _yield$fsWriteAsync = _context.sent;
              bytesWritten = _yield$fsWriteAsync.bytesWritten;
              logger('write returned: wrote', bytesWritten, 'bytes');
  
              if (!(bytesWritten + offset < buffer.length)) {
                _context.next = 15;
                break;
              }
  
              if (binding.isOpen) {
                _context.next = 14;
                break;
              }
  
              throw new Error('Port is not open');
  
            case 14:
              return _context.abrupt("return", unixWrite({
                binding: binding,
                buffer: buffer,
                offset: bytesWritten + offset,
                fsWriteAsync: fsWriteAsync
              }));
  
            case 15:
              logger('Finished writing', bytesWritten + offset, 'bytes');
              _context.next = 32;
              break;
  
            case 18:
              _context.prev = 18;
              _context.t0 = _context["catch"](5);
              logger('write errored', _context.t0);
  
              if (!(_context.t0.code === 'EAGAIN' || _context.t0.code === 'EWOULDBLOCK' || _context.t0.code === 'EINTR')) {
                _context.next = 28;
                break;
              }
  
              if (binding.isOpen) {
                _context.next = 24;
                break;
              }
  
              throw new Error('Port is not open');
  
            case 24:
              logger('waiting for writable because of code:', _context.t0.code);
              _context.next = 27;
              return writable(binding);
  
            case 27:
              return _context.abrupt("return", unixWrite({
                binding: binding,
                buffer: buffer,
                offset: offset,
                fsWriteAsync: fsWriteAsync
              }));
  
            case 28:
              disconnectError = _context.t0.code === 'EBADF' || // Bad file number means we got closed
              _context.t0.code === 'ENXIO' || // No such device or address probably usb disconnect
              _context.t0.code === 'UNKNOWN' || _context.t0.errno === -1; // generic error
  
              if (disconnectError) {
                _context.t0.disconnect = true;
                logger('disconnecting', _context.t0);
              }
  
              logger('error', _context.t0);
              throw _context.t0;
  
            case 32:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[5, 18]]);
    }));
  
    return function unixWrite(_x) {
      return _ref2.apply(this, arguments);
    };
  }();
  
  module.exports = unixWrite;
  
  /***/ }),
  
  /***/ 2618:
  /***/ (function(module) {
  
  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
  
  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
  
  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  var PARSERS = [/USB\\(?:.+)\\(.+)/, /FTDIBUS\\(?:.+)\+(.+?)A?\\.+/];
  
  module.exports = function (pnpId) {
    if (!pnpId) {
      return null;
    }
  
    var _iterator = _createForOfIteratorHelper(PARSERS),
        _step;
  
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var parser = _step.value;
        var sn = pnpId.match(parser);
  
        if (sn) {
          return sn[1];
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  
    return null;
  };
  
  /***/ }),
  
  /***/ 6285:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
  
  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
  
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  
  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
  
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  
  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
  
  var binding = __webpack_require__(9343)('bindings.node');
  
  var AbstractBinding = __webpack_require__(4566);
  
  var _require = __webpack_require__(7440),
      promisify = _require.promisify;
  
  var serialNumParser = __webpack_require__(2618);
  
  var asyncList = promisify(binding.list);
  var asyncOpen = promisify(binding.open);
  var asyncClose = promisify(binding.close);
  var asyncRead = promisify(binding.read);
  var asyncWrite = promisify(binding.write);
  var asyncUpdate = promisify(binding.update);
  var asyncSet = promisify(binding.set);
  var asyncGet = promisify(binding.get);
  var asyncGetBaudRate = promisify(binding.getBaudRate);
  var asyncDrain = promisify(binding.drain);
  var asyncFlush = promisify(binding.flush);
  
  var _require2 = __webpack_require__(376),
      wrapWithHiddenComName = _require2.wrapWithHiddenComName;
  /**
   * The Windows binding layer
   */
  
  
  var WindowsBinding = /*#__PURE__*/function (_AbstractBinding) {
    _inherits(WindowsBinding, _AbstractBinding);
  
    var _super = _createSuper(WindowsBinding);
  
    function WindowsBinding() {
      var _this;
  
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  
      _classCallCheck(this, WindowsBinding);
  
      _this = _super.call(this, opt);
      _this.bindingOptions = _objectSpread({}, opt.bindingOptions);
      _this.fd = null;
      _this.writeOperation = null;
      return _this;
    }
  
    _createClass(WindowsBinding, [{
      key: "isOpen",
      get: function get() {
        return this.fd !== null;
      }
    }, {
      key: "open",
      value: function () {
        var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path, options) {
          var fd;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _get(_getPrototypeOf(WindowsBinding.prototype), "open", this).call(this, path, options);
  
                case 2:
                  this.openOptions = _objectSpread(_objectSpread({}, this.bindingOptions), options);
                  _context.next = 5;
                  return asyncOpen(path, this.openOptions);
  
                case 5:
                  fd = _context.sent;
                  this.fd = fd;
  
                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));
  
        function open(_x, _x2) {
          return _open.apply(this, arguments);
        }
  
        return open;
      }()
    }, {
      key: "close",
      value: function () {
        var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          var fd;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _get(_getPrototypeOf(WindowsBinding.prototype), "close", this).call(this);
  
                case 2:
                  fd = this.fd;
                  this.fd = null;
                  return _context2.abrupt("return", asyncClose(fd));
  
                case 5:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));
  
        function close() {
          return _close.apply(this, arguments);
        }
  
        return close;
      }()
    }, {
      key: "read",
      value: function () {
        var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(buffer, offset, length) {
          var bytesRead;
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return _get(_getPrototypeOf(WindowsBinding.prototype), "read", this).call(this, buffer, offset, length);
  
                case 2:
                  _context3.prev = 2;
                  _context3.next = 5;
                  return asyncRead(this.fd, buffer, offset, length);
  
                case 5:
                  bytesRead = _context3.sent;
                  return _context3.abrupt("return", {
                    bytesRead: bytesRead,
                    buffer: buffer
                  });
  
                case 9:
                  _context3.prev = 9;
                  _context3.t0 = _context3["catch"](2);
  
                  if (!this.isOpen) {
                    _context3.t0.canceled = true;
                  }
  
                  throw _context3.t0;
  
                case 13:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this, [[2, 9]]);
        }));
  
        function read(_x3, _x4, _x5) {
          return _read.apply(this, arguments);
        }
  
        return read;
      }()
    }, {
      key: "write",
      value: function () {
        var _write = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(buffer) {
          var _this2 = this;
  
          return _regeneratorRuntime().wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  this.writeOperation = _get(_getPrototypeOf(WindowsBinding.prototype), "write", this).call(this, buffer).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
                    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            if (!(buffer.length === 0)) {
                              _context4.next = 2;
                              break;
                            }
  
                            return _context4.abrupt("return");
  
                          case 2:
                            _context4.next = 4;
                            return asyncWrite(_this2.fd, buffer);
  
                          case 4:
                            _this2.writeOperation = null;
  
                          case 5:
                          case "end":
                            return _context4.stop();
                        }
                      }
                    }, _callee4);
                  })));
                  return _context5.abrupt("return", this.writeOperation);
  
                case 2:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));
  
        function write(_x6) {
          return _write.apply(this, arguments);
        }
  
        return write;
      }()
    }, {
      key: "update",
      value: function () {
        var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(options) {
          return _regeneratorRuntime().wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return _get(_getPrototypeOf(WindowsBinding.prototype), "update", this).call(this, options);
  
                case 2:
                  return _context6.abrupt("return", asyncUpdate(this.fd, options));
  
                case 3:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));
  
        function update(_x7) {
          return _update.apply(this, arguments);
        }
  
        return update;
      }()
    }, {
      key: "set",
      value: function () {
        var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(options) {
          return _regeneratorRuntime().wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _context7.next = 2;
                  return _get(_getPrototypeOf(WindowsBinding.prototype), "set", this).call(this, options);
  
                case 2:
                  return _context7.abrupt("return", asyncSet(this.fd, options));
  
                case 3:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));
  
        function set(_x8) {
          return _set.apply(this, arguments);
        }
  
        return set;
      }()
    }, {
      key: "get",
      value: function () {
        var _get2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
          return _regeneratorRuntime().wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  _context8.next = 2;
                  return _get(_getPrototypeOf(WindowsBinding.prototype), "get", this).call(this);
  
                case 2:
                  return _context8.abrupt("return", asyncGet(this.fd));
  
                case 3:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));
  
        function get() {
          return _get2.apply(this, arguments);
        }
  
        return get;
      }()
    }, {
      key: "getBaudRate",
      value: function () {
        var _getBaudRate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
          return _regeneratorRuntime().wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _context9.next = 2;
                  return _get(_getPrototypeOf(WindowsBinding.prototype), "get", this).call(this);
  
                case 2:
                  return _context9.abrupt("return", asyncGetBaudRate(this.fd));
  
                case 3:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));
  
        function getBaudRate() {
          return _getBaudRate.apply(this, arguments);
        }
  
        return getBaudRate;
      }()
    }, {
      key: "drain",
      value: function () {
        var _drain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
          return _regeneratorRuntime().wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  _context10.next = 2;
                  return _get(_getPrototypeOf(WindowsBinding.prototype), "drain", this).call(this);
  
                case 2:
                  _context10.next = 4;
                  return this.writeOperation;
  
                case 4:
                  return _context10.abrupt("return", asyncDrain(this.fd));
  
                case 5:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this);
        }));
  
        function drain() {
          return _drain.apply(this, arguments);
        }
  
        return drain;
      }()
    }, {
      key: "flush",
      value: function () {
        var _flush = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
          return _regeneratorRuntime().wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  _context11.next = 2;
                  return _get(_getPrototypeOf(WindowsBinding.prototype), "flush", this).call(this);
  
                case 2:
                  return _context11.abrupt("return", asyncFlush(this.fd));
  
                case 3:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11, this);
        }));
  
        function flush() {
          return _flush.apply(this, arguments);
        }
  
        return flush;
      }()
    }], [{
      key: "list",
      value: function () {
        var _list = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
          var ports;
          return _regeneratorRuntime().wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  _context12.next = 2;
                  return asyncList();
  
                case 2:
                  ports = _context12.sent;
                  return _context12.abrupt("return", wrapWithHiddenComName(ports.map(function (port) {
                    if (port.pnpId && !port.serialNumber) {
                      var serialNumber = serialNumParser(port.pnpId);
  
                      if (serialNumber) {
                        return _objectSpread(_objectSpread({}, port), {}, {
                          serialNumber: serialNumber
                        });
                      }
                    }
  
                    return port;
                  })));
  
                case 4:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12);
        }));
  
        function list() {
          return _list.apply(this, arguments);
        }
  
        return list;
      }()
    }]);
  
    return WindowsBinding;
  }(AbstractBinding);
  
  module.exports = WindowsBinding;
  
  /***/ }),
  
  /***/ 5953:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
  
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  
  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
  
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  
  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
  
  var _require = __webpack_require__(5253),
      Transform = _require.Transform;
  /**
   * Emit data every number of bytes
   * @extends Transform
   * @param {Object} options parser options object
   * @param {Number} options.length the number of bytes on each data event
   * @summary A transform stream that emits data as a buffer after a specific number of bytes are received. Runs in O(n) time.
   * @example
  const SerialPort = require('serialport')
  const ByteLength = require('@serialport/parser-byte-length')
  const port = new SerialPort('/dev/tty-usbserial1')
  const parser = port.pipe(new ByteLength({length: 8}))
  parser.on('data', console.log) // will have 8 bytes per data event
   */
  
  
  var ByteLengthParser = /*#__PURE__*/function (_Transform) {
    _inherits(ByteLengthParser, _Transform);
  
    var _super = _createSuper(ByteLengthParser);
  
    function ByteLengthParser() {
      var _this;
  
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  
      _classCallCheck(this, ByteLengthParser);
  
      _this = _super.call(this, options);
  
      if (typeof options.length !== 'number') {
        throw new TypeError('"length" is not a number');
      }
  
      if (options.length < 1) {
        throw new TypeError('"length" is not greater than 0');
      }
  
      _this.length = options.length;
      _this.position = 0;
      _this.buffer = Buffer.alloc(_this.length);
      return _this;
    }
  
    _createClass(ByteLengthParser, [{
      key: "_transform",
      value: function _transform(chunk, encoding, cb) {
        var cursor = 0;
  
        while (cursor < chunk.length) {
          this.buffer[this.position] = chunk[cursor];
          cursor++;
          this.position++;
  
          if (this.position === this.length) {
            this.push(this.buffer);
            this.buffer = Buffer.alloc(this.length);
            this.position = 0;
          }
        }
  
        cb();
      }
    }, {
      key: "_flush",
      value: function _flush(cb) {
        this.push(this.buffer.slice(0, this.position));
        this.buffer = Buffer.alloc(this.length);
        cb();
      }
    }]);
  
    return ByteLengthParser;
  }(Transform);
  
  module.exports = ByteLengthParser;
  
  /***/ }),
  
  /***/ 973:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
  
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  
  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
  
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  
  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
  
  var _require = __webpack_require__(5253),
      Transform = _require.Transform;
  /**
   * Parse the CCTalk protocol
   * @extends Transform
   * @summary A transform stream that emits CCTalk packets as they are received.
   * @example
  const SerialPort = require('serialport')
  const CCTalk = require('@serialport/parser-cctalk')
  const port = new SerialPort('/dev/ttyUSB0')
  const parser = port.pipe(new CCtalk())
  parser.on('data', console.log)
   */
  
  
  var CCTalkParser = /*#__PURE__*/function (_Transform) {
    _inherits(CCTalkParser, _Transform);
  
    var _super = _createSuper(CCTalkParser);
  
    function CCTalkParser() {
      var _this;
  
      var maxDelayBetweenBytesMs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;
  
      _classCallCheck(this, CCTalkParser);
  
      _this = _super.call(this);
      _this.array = [];
      _this.cursor = 0;
      _this.lastByteFetchTime = 0;
      _this.maxDelayBetweenBytesMs = maxDelayBetweenBytesMs;
      return _this;
    }
  
    _createClass(CCTalkParser, [{
      key: "_transform",
      value: function _transform(buffer, _, cb) {
        var _this2 = this;
  
        if (this.maxDelayBetweenBytesMs > 0) {
          var now = Date.now();
  
          if (now - this.lastByteFetchTime > this.maxDelayBetweenBytesMs) {
            this.array = [];
            this.cursor = 0;
          }
  
          this.lastByteFetchTime = now;
        }
  
        this.cursor += buffer.length; // TODO: Better Faster es7 no supported by node 4
        // ES7 allows directly push [...buffer]
        // this.array = this.array.concat(Array.from(buffer)) //Slower ?!?
  
        Array.from(buffer).map(function (_byte) {
          return _this2.array.push(_byte);
        });
  
        while (this.cursor > 1 && this.cursor >= this.array[1] + 5) {
          // full frame accumulated
          // copy command from the array
          var FullMsgLength = this.array[1] + 5;
          var frame = Buffer.from(this.array.slice(0, FullMsgLength)); // Preserve Extra Data
  
          this.array = this.array.slice(frame.length, this.array.length);
          this.cursor -= FullMsgLength;
          this.push(frame);
        }
  
        cb();
      }
    }]);
  
    return CCTalkParser;
  }(Transform);
  
  module.exports = CCTalkParser;
  
  /***/ }),
  
  /***/ 6240:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
  
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  
  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
  
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  
  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
  
  var _require = __webpack_require__(5253),
      Transform = _require.Transform;
  /**
   * A transform stream that emits data each time a byte sequence is received.
   * @extends Transform
   * @summary To use the `Delimiter` parser, provide a delimiter as a string, buffer, or array of bytes. Runs in O(n) time.
   * @example
  const SerialPort = require('serialport')
  const Delimiter = require('@serialport/parser-delimiter')
  const port = new SerialPort('/dev/tty-usbserial1')
  const parser = port.pipe(new Delimiter({ delimiter: '\n' }))
  parser.on('data', console.log)
   */
  
  
  var DelimiterParser = /*#__PURE__*/function (_Transform) {
    _inherits(DelimiterParser, _Transform);
  
    var _super = _createSuper(DelimiterParser);
  
    function DelimiterParser() {
      var _this;
  
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  
      _classCallCheck(this, DelimiterParser);
  
      _this = _super.call(this, options);
  
      if (options.delimiter === undefined) {
        throw new TypeError('"delimiter" is not a bufferable object');
      }
  
      if (options.delimiter.length === 0) {
        throw new TypeError('"delimiter" has a 0 or undefined length');
      }
  
      _this.includeDelimiter = options.includeDelimiter !== undefined ? options.includeDelimiter : false;
      _this.delimiter = Buffer.from(options.delimiter);
      _this.buffer = Buffer.alloc(0);
      return _this;
    }
  
    _createClass(DelimiterParser, [{
      key: "_transform",
      value: function _transform(chunk, encoding, cb) {
        var data = Buffer.concat([this.buffer, chunk]);
        var position;
  
        while ((position = data.indexOf(this.delimiter)) !== -1) {
          this.push(data.slice(0, position + (this.includeDelimiter ? this.delimiter.length : 0)));
          data = data.slice(position + this.delimiter.length);
        }
  
        this.buffer = data;
        cb();
      }
    }, {
      key: "_flush",
      value: function _flush(cb) {
        this.push(this.buffer);
        this.buffer = Buffer.alloc(0);
        cb();
      }
    }]);
  
    return DelimiterParser;
  }(Transform);
  
  module.exports = DelimiterParser;
  
  /***/ }),
  
  /***/ 1284:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
  
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  
  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
  
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  
  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
  
  var _require = __webpack_require__(5253),
      Transform = _require.Transform;
  /**
   * Emits data if there is a pause between packets for the specified amount of time.
   * @extends Transform
   * @param {Object} options parser options object
   * @param {Number} options.interval the period of silence in milliseconds after which data is emited
   * @param {Number} options.maxBufferSize the maximum number of bytes after which data will be emited. Defaults to 65536.
   * @summary A transform stream that emits data as a buffer after not receiving any bytes for the specified amount of time.
   * @example
  const SerialPort = require('serialport')
  const InterByteTimeout = require('@serialport/parser-inter-byte-timeout')
  const port = new SerialPort('/dev/tty-usbserial1')
  const parser = port.pipe(new InterByteTimeout({interval: 30}))
  parser.on('data', console.log) // will emit data if there is a pause between packets greater than 30ms
   */
  
  
  var InterByteTimeoutParser = /*#__PURE__*/function (_Transform) {
    _inherits(InterByteTimeoutParser, _Transform);
  
    var _super = _createSuper(InterByteTimeoutParser);
  
    function InterByteTimeoutParser(options) {
      var _this;
  
      _classCallCheck(this, InterByteTimeoutParser);
  
      _this = _super.call(this);
      options = _objectSpread({
        maxBufferSize: 65536
      }, options);
  
      if (!options.interval) {
        throw new TypeError('"interval" is required');
      }
  
      if (typeof options.interval !== 'number' || Number.isNaN(options.interval)) {
        throw new TypeError('"interval" is not a number');
      }
  
      if (options.interval < 1) {
        throw new TypeError('"interval" is not greater than 0');
      }
  
      if (typeof options.maxBufferSize !== 'number' || Number.isNaN(options.maxBufferSize)) {
        throw new TypeError('"maxBufferSize" is not a number');
      }
  
      if (options.maxBufferSize < 1) {
        throw new TypeError('"maxBufferSize" is not greater than 0');
      }
  
      _this.maxBufferSize = options.maxBufferSize;
      _this.currentPacket = [];
      _this.interval = options.interval;
      _this.intervalID = -1;
      return _this;
    }
  
    _createClass(InterByteTimeoutParser, [{
      key: "_transform",
      value: function _transform(chunk, encoding, cb) {
        clearTimeout(this.intervalID);
  
        for (var offset = 0; offset < chunk.length; offset++) {
          this.currentPacket.push(chunk[offset]);
  
          if (this.currentPacket.length >= this.maxBufferSize) {
            this.emitPacket();
          }
        }
  
        this.intervalID = setTimeout(this.emitPacket.bind(this), this.interval);
        cb();
      }
    }, {
      key: "emitPacket",
      value: function emitPacket() {
        clearTimeout(this.intervalID);
  
        if (this.currentPacket.length > 0) {
          this.push(Buffer.from(this.currentPacket));
        }
  
        this.currentPacket = [];
      }
    }, {
      key: "_flush",
      value: function _flush(cb) {
        this.emitPacket();
        cb();
      }
    }]);
  
    return InterByteTimeoutParser;
  }(Transform);
  
  module.exports = InterByteTimeoutParser;
  
  /***/ }),
  
  /***/ 4682:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
  
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  
  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
  
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  
  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
  
  var DelimiterParser = __webpack_require__(6240);
  /**
   *  A transform stream that emits data after a newline delimiter is received.
   * @summary To use the `Readline` parser, provide a delimiter (defaults to `\n`). Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).
   * @extends DelimiterParser
   * @example
  const SerialPort = require('serialport')
  const Readline = require('@serialport/parser-readline')
  const port = new SerialPort('/dev/tty-usbserial1')
  const parser = port.pipe(new Readline({ delimiter: '\r\n' }))
  parser.on('data', console.log)
  */
  
  
  var ReadLineParser = /*#__PURE__*/function (_DelimiterParser) {
    _inherits(ReadLineParser, _DelimiterParser);
  
    var _super = _createSuper(ReadLineParser);
  
    function ReadLineParser(options) {
      _classCallCheck(this, ReadLineParser);
  
      var opts = _objectSpread({
        delimiter: Buffer.from('\n', 'utf8'),
        encoding: 'utf8'
      }, options);
  
      if (typeof opts.delimiter === 'string') {
        opts.delimiter = Buffer.from(opts.delimiter, opts.encoding);
      }
  
      return _super.call(this, opts);
    }
  
    return _createClass(ReadLineParser);
  }(DelimiterParser);
  
  module.exports = ReadLineParser;
  
  /***/ }),
  
  /***/ 6506:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
  
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  
  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
  
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  
  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
  
  var _require = __webpack_require__(5253),
      Transform = _require.Transform;
  /**
   * A transform stream that waits for a sequence of "ready" bytes before emitting a ready event and emitting data events
   * @summary To use the `Ready` parser provide a byte start sequence. After the bytes have been received a ready event is fired and data events are passed through.
   * @extends Transform
   * @example
  const SerialPort = require('serialport')
  const Ready = require('@serialport/parser-ready')
  const port = new SerialPort('/dev/tty-usbserial1')
  const parser = port.pipe(new Ready({ delimiter: 'READY' }))
  parser.on('ready', () => console.log('the ready byte sequence has been received'))
  parser.on('data', console.log) // all data after READY is received
   */
  
  
  var ReadyParser = /*#__PURE__*/function (_Transform) {
    _inherits(ReadyParser, _Transform);
  
    var _super = _createSuper(ReadyParser);
  
    /**
     *
     * @param {object} options options for the parser
     * @param {string|Buffer|array} options.delimiter data to look for before emitted "ready"
     */
    function ReadyParser() {
      var _this;
  
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  
      _classCallCheck(this, ReadyParser);
  
      if (options.delimiter === undefined) {
        throw new TypeError('"delimiter" is not a bufferable object');
      }
  
      if (options.delimiter.length === 0) {
        throw new TypeError('"delimiter" has a 0 or undefined length');
      }
  
      _this = _super.call(this, options);
      _this.delimiter = Buffer.from(options.delimiter);
      _this.readOffset = 0;
      _this.ready = false;
      return _this;
    }
  
    _createClass(ReadyParser, [{
      key: "_transform",
      value: function _transform(chunk, encoding, cb) {
        if (this.ready) {
          this.push(chunk);
          return cb();
        }
  
        var delimiter = this.delimiter;
        var chunkOffset = 0;
  
        while (this.readOffset < delimiter.length && chunkOffset < chunk.length) {
          if (delimiter[this.readOffset] === chunk[chunkOffset]) {
            this.readOffset++;
          } else {
            this.readOffset = 0;
          }
  
          chunkOffset++;
        }
  
        if (this.readOffset === delimiter.length) {
          this.ready = true;
          this.emit('ready');
          var chunkRest = chunk.slice(chunkOffset);
  
          if (chunkRest.length > 0) {
            this.push(chunkRest);
          }
        }
  
        cb();
      }
    }]);
  
    return ReadyParser;
  }(Transform);
  
  module.exports = ReadyParser;
  
  /***/ }),
  
  /***/ 3664:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
  
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  
  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
  
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  
  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
  
  var _require = __webpack_require__(5253),
      Transform = _require.Transform;
  /**
   * A transform stream that uses a regular expression to split the incoming text upon.
   *
   * To use the `Regex` parser provide a regular expression to split the incoming text upon. Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).
   * @extends Transform
   * @example
  const SerialPort = require('serialport')
  const Regex = require('@serialport/parser-regex')
  const port = new SerialPort('/dev/tty-usbserial1')
  const parser = port.pipe(new Regex({ regex: /[\r\n]+/ }))
  parser.on('data', console.log)
   */
  
  
  var RegexParser = /*#__PURE__*/function (_Transform) {
    _inherits(RegexParser, _Transform);
  
    var _super = _createSuper(RegexParser);
  
    function RegexParser(options) {
      var _this;
  
      _classCallCheck(this, RegexParser);
  
      var opts = _objectSpread({
        encoding: 'utf8'
      }, options);
  
      if (opts.regex === undefined) {
        throw new TypeError('"options.regex" must be a regular expression pattern or object');
      }
  
      if (!(opts.regex instanceof RegExp)) {
        opts.regex = new RegExp(opts.regex);
      }
  
      _this = _super.call(this, opts);
      _this.regex = opts.regex;
      _this.data = '';
      return _this;
    }
  
    _createClass(RegexParser, [{
      key: "_transform",
      value: function _transform(chunk, encoding, cb) {
        var _this2 = this;
  
        var data = this.data + chunk;
        var parts = data.split(this.regex);
        this.data = parts.pop();
        parts.forEach(function (part) {
          _this2.push(part);
        });
        cb();
      }
    }, {
      key: "_flush",
      value: function _flush(cb) {
        this.push(this.data);
        this.data = '';
        cb();
      }
    }]);
  
    return RegexParser;
  }(Transform);
  
  module.exports = RegexParser;
  
  /***/ }),
  
  /***/ 1978:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  /* provided dependency */ var process = __webpack_require__(7844);
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  var stream = __webpack_require__(5253);
  
  var util = __webpack_require__(7440);
  
  var debug = __webpack_require__(1837)('serialport/stream'); //  VALIDATION
  
  
  var DATABITS = Object.freeze([5, 6, 7, 8]);
  var STOPBITS = Object.freeze([1, 1.5, 2]);
  var PARITY = Object.freeze(['none', 'even', 'mark', 'odd', 'space']);
  var FLOWCONTROLS = Object.freeze(['xon', 'xoff', 'xany', 'rtscts']);
  var defaultSettings = Object.freeze({
    autoOpen: true,
    endOnClose: false,
    baudRate: 9600,
    dataBits: 8,
    hupcl: true,
    lock: true,
    parity: 'none',
    rtscts: false,
    stopBits: 1,
    xany: false,
    xoff: false,
    xon: false,
    highWaterMark: 64 * 1024
  });
  var defaultSetFlags = Object.freeze({
    brk: false,
    cts: false,
    dtr: true,
    dts: false,
    rts: true
  });
  
  function allocNewReadPool(poolSize) {
    var pool = Buffer.allocUnsafe(poolSize);
    pool.used = 0;
    return pool;
  }
  /**
   * A callback called with an error or null.
   * @typedef {function} errorCallback
   * @param {?error} error
   */
  
  /**
   * A callback called with an error or an object with the modem line values (cts, dsr, dcd).
   * @typedef {function} modemBitsCallback
   * @param {?error} error
   * @param {?object} status
   * @param {boolean} [status.cts=false]
   * @param {boolean} [status.dsr=false]
   * @param {boolean} [status.dcd=false]
   */
  
  /**
   * @typedef {Object} openOptions
   * @property {boolean} [autoOpen=true] Automatically opens the port on `nextTick`.
   * @property {number=} [baudRate=9600] The baud rate of the port to be opened. This should match one of the commonly available baud rates, such as 110, 300, 1200, 2400, 4800, 9600, 14400, 19200, 38400, 57600, or 115200. Custom rates are supported best effort per platform. The device connected to the serial port is not guaranteed to support the requested baud rate, even if the port itself supports that baud rate.
   * @property {number} [dataBits=8] Must be one of these: 8, 7, 6, or 5.
   * @property {number} [highWaterMark=65536] The size of the read and write buffers defaults to 64k.
   * @property {boolean} [lock=true] Prevent other processes from opening the port. Windows does not currently support `false`.
   * @property {number} [stopBits=1] Must be one of these: 1 or 2.
   * @property {string} [parity=none] Must be one of these: 'none', 'even', 'mark', 'odd', 'space'.
   * @property {boolean} [rtscts=false] flow control setting
   * @property {boolean} [xon=false] flow control setting
   * @property {boolean} [xoff=false] flow control setting
   * @property {boolean} [xany=false] flow control setting
   * @property {object=} bindingOptions sets binding-specific options
   * @property {Binding=} binding The hardware access binding. `Bindings` are how Node-Serialport talks to the underlying system. By default we auto detect Windows (`WindowsBinding`), Linux (`LinuxBinding`) and OS X (`DarwinBinding`) and load the appropriate module for your system.
   * @property {number} [bindingOptions.vmin=1] see [`man termios`](http://linux.die.net/man/3/termios) LinuxBinding and DarwinBinding
   * @property {number} [bindingOptions.vtime=0] see [`man termios`](http://linux.die.net/man/3/termios) LinuxBinding and DarwinBinding
   */
  
  /**
   * Create a new serial port object for the `path`. In the case of invalid arguments or invalid options, when constructing a new SerialPort it will throw an error. The port will open automatically by default, which is the equivalent of calling `port.open(openCallback)` in the next tick. You can disable this by setting the option `autoOpen` to `false`.
   * @class SerialPort
   * @param {string} path - The system path of the serial port you want to open. For example, `/dev/tty.XXX` on Mac/Linux, or `COM1` on Windows.
   * @param {openOptions=} options - Port configuration options
   * @param {errorCallback=} openCallback - Called after a connection is opened. If this is not provided and an error occurs, it will be emitted on the port's `error` event. The callback will NOT be called if `autoOpen` is set to `false` in the `openOptions` as the open will not be performed.
   * @property {number} baudRate The port's baudRate. Use `.update` to change it. Read-only.
   * @property {object} binding The binding object backing the port. Read-only.
   * @property {boolean} isOpen `true` if the port is open, `false` otherwise. Read-only. (`since 5.0.0`)
   * @property {string} path The system path or name of the serial port. Read-only.
   * @throws {TypeError} When given invalid arguments, a `TypeError` will be thrown.
   * @emits open
   * @emits data
   * @emits close
   * @emits error
   * @alias module:serialport
   */
  
  
  function SerialPort(path, options, openCallback) {
    if (!(this instanceof SerialPort)) {
      return new SerialPort(path, options, openCallback);
    }
  
    if (options instanceof Function) {
      openCallback = options;
      options = {};
    }
  
    var settings = _objectSpread(_objectSpread({}, defaultSettings), options);
  
    stream.Duplex.call(this, {
      highWaterMark: settings.highWaterMark
    });
    var Binding = settings.binding || SerialPort.Binding;
  
    if (!Binding) {
      throw new TypeError('"Bindings" is invalid pass it as `options.binding` or set it on `SerialPort.Binding`');
    }
  
    if (!path) {
      throw new TypeError("\"path\" is not defined: ".concat(path));
    }
  
    if (settings.baudrate) {
      throw new TypeError("\"baudrate\" is an unknown option, did you mean \"baudRate\"?");
    }
  
    if (typeof settings.baudRate !== 'number') {
      throw new TypeError("\"baudRate\" must be a number: ".concat(settings.baudRate));
    }
  
    if (DATABITS.indexOf(settings.dataBits) === -1) {
      throw new TypeError("\"databits\" is invalid: ".concat(settings.dataBits));
    }
  
    if (STOPBITS.indexOf(settings.stopBits) === -1) {
      throw new TypeError("\"stopbits\" is invalid: ".concat(settings.stopbits));
    }
  
    if (PARITY.indexOf(settings.parity) === -1) {
      throw new TypeError("\"parity\" is invalid: ".concat(settings.parity));
    }
  
    FLOWCONTROLS.forEach(function (control) {
      if (typeof settings[control] !== 'boolean') {
        throw new TypeError("\"".concat(control, "\" is not boolean: ").concat(settings[control]));
      }
    });
    var binding = new Binding({
      bindingOptions: settings.bindingOptions
    });
    Object.defineProperties(this, {
      binding: {
        enumerable: true,
        value: binding
      },
      path: {
        enumerable: true,
        value: path
      },
      settings: {
        enumerable: true,
        value: settings
      }
    });
    this.opening = false;
    this.closing = false;
    this._pool = allocNewReadPool(this.settings.highWaterMark);
    this._kMinPoolSpace = 128;
  
    if (this.settings.autoOpen) {
      this.open(openCallback);
    }
  }
  
  util.inherits(SerialPort, stream.Duplex);
  Object.defineProperties(SerialPort.prototype, {
    isOpen: {
      enumerable: true,
      get: function get() {
        return this.binding.isOpen && !this.closing;
      }
    },
    baudRate: {
      enumerable: true,
      get: function get() {
        return this.settings.baudRate;
      }
    }
  });
  /**
   * The `error` event's callback is called with an error object whenever there is an error.
   * @event error
   */
  
  SerialPort.prototype._error = function (error, callback) {
    if (callback) {
      callback.call(this, error);
    } else {
      this.emit('error', error);
    }
  };
  
  SerialPort.prototype._asyncError = function (error, callback) {
    var _this = this;
  
    process.nextTick(function () {
      return _this._error(error, callback);
    });
  };
  /**
   * The `open` event's callback is called with no arguments when the port is opened and ready for writing. This happens if you have the constructor open immediately (which opens in the next tick) or if you open the port manually with `open()`. See [Useage/Opening a Port](#opening-a-port) for more information.
   * @event open
   */
  
  /**
   * Opens a connection to the given serial port.
   * @param {errorCallback=} openCallback - Called after a connection is opened. If this is not provided and an error occurs, it will be emitted on the port's `error` event.
   * @emits open
   * @returns {undefined}
   */
  
  
  SerialPort.prototype.open = function (openCallback) {
    var _this2 = this;
  
    if (this.isOpen) {
      return this._asyncError(new Error('Port is already open'), openCallback);
    }
  
    if (this.opening) {
      return this._asyncError(new Error('Port is opening'), openCallback);
    }
  
    this.opening = true;
    debug('opening', "path: ".concat(this.path));
    this.binding.open(this.path, this.settings).then(function () {
      debug('opened', "path: ".concat(_this2.path));
      _this2.opening = false;
  
      _this2.emit('open');
  
      if (openCallback) {
        openCallback.call(_this2, null);
      }
    }, function (err) {
      _this2.opening = false;
      debug('Binding #open had an error', err);
  
      _this2._error(err, openCallback);
    });
  };
  /**
   * Changes the baud rate for an open port. Throws if you provide a bad argument. Emits an error or calls the callback if the baud rate isn't supported.
   * @param {object=} options Only supports `baudRate`.
   * @param {number=} [options.baudRate] The baud rate of the port to be opened. This should match one of the commonly available baud rates, such as 110, 300, 1200, 2400, 4800, 9600, 14400, 19200, 38400, 57600, or 115200. Custom rates are supported best effort per platform. The device connected to the serial port is not guaranteed to support the requested baud rate, even if the port itself supports that baud rate.
   * @param {errorCallback=} [callback] Called once the port's baud rate changes. If `.update` is called without a callback, and there is an error, an error event is emitted.
   * @returns {undefined}
   */
  
  
  SerialPort.prototype.update = function (options, callback) {
    var _this3 = this;
  
    if (_typeof(options) !== 'object') {
      throw TypeError('"options" is not an object');
    }
  
    if (!this.isOpen) {
      debug('update attempted, but port is not open');
      return this._asyncError(new Error('Port is not open'), callback);
    }
  
    var settings = _objectSpread(_objectSpread({}, defaultSettings), options);
  
    this.settings.baudRate = settings.baudRate;
    debug('update', "baudRate: ".concat(settings.baudRate));
    this.binding.update(this.settings).then(function () {
      debug('binding.update', 'finished');
  
      if (callback) {
        callback.call(_this3, null);
      }
    }, function (err) {
      debug('binding.update', 'error', err);
      return _this3._error(err, callback);
    });
  };
  /**
   * Writes data to the given serial port. Buffers written data if the port is not open.
  
  The write operation is non-blocking. When it returns, data might still not have been written to the serial port. See `drain()`.
  
  Some devices, like the Arduino, reset when you open a connection to them. In such cases, immediately writing to the device will cause lost data as they wont be ready to receive the data. This is often worked around by having the Arduino send a "ready" byte that your Node program waits for before writing. You can also often get away with waiting around 400ms.
  
  If a port is disconnected during a write, the write will error in addition to the `close` event.
  
  From the [stream docs](https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback) write errors don't always provide the error in the callback, sometimes they use the error event.
  > If an error occurs, the callback may or may not be called with the error as its first argument. To reliably detect write errors, add a listener for the 'error' event.
  
  In addition to the usual `stream.write` arguments (`String` and `Buffer`), `write()` can accept arrays of bytes (positive numbers under 256) which is passed to `Buffer.from([])` for conversion. This extra functionality is pretty sweet.
   * @method SerialPort.prototype.write
   * @param  {(string|array|buffer)} data Accepts a [`Buffer`](http://nodejs.org/api/buffer.html) object, or a type that is accepted by the `Buffer` constructor (e.g. an array of bytes or a string).
   * @param  {string=} encoding The encoding, if chunk is a string. Defaults to `'utf8'`. Also accepts `'ascii'`, `'base64'`, `'binary'`, and `'hex'` See [Buffers and Character Encodings](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) for all available options.
   * @param  {function=} callback Called once the write operation finishes. Data may not yet be flushed to the underlying port. No arguments.
   * @returns {boolean} `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.
   * @since 5.0.0
   */
  
  
  var superWrite = SerialPort.prototype.write;
  
  SerialPort.prototype.write = function (data, encoding, callback) {
    if (Array.isArray(data)) {
      data = Buffer.from(data);
    }
  
    return superWrite.call(this, data, encoding, callback);
  };
  
  SerialPort.prototype._write = function (data, encoding, callback) {
    var _this4 = this;
  
    if (!this.isOpen) {
      return this.once('open', function afterOpenWrite() {
        this._write(data, encoding, callback);
      });
    }
  
    debug('_write', "".concat(data.length, " bytes of data"));
    this.binding.write(data).then(function () {
      debug('binding.write', 'write finished');
      callback(null);
    }, function (err) {
      debug('binding.write', 'error', err);
  
      if (!err.canceled) {
        _this4._disconnected(err);
      }
  
      callback(err);
    });
  };
  
  SerialPort.prototype._writev = function (data, callback) {
    debug('_writev', "".concat(data.length, " chunks of data"));
    var dataV = data.map(function (write) {
      return write.chunk;
    });
  
    this._write(Buffer.concat(dataV), null, callback);
  };
  /**
   * Request a number of bytes from the SerialPort. The `read()` method pulls some data out of the internal buffer and returns it. If no data is available to be read, null is returned. By default, the data is returned as a `Buffer` object unless an encoding has been specified using the `.setEncoding()` method.
   * @method SerialPort.prototype.read
   * @param {number=} size Specify how many bytes of data to return, if available
   * @returns {(string|Buffer|null)} The data from internal buffers
   * @since 5.0.0
   */
  
  /**
   * Listening for the `data` event puts the port in flowing mode. Data is emitted as soon as it's received. Data is a `Buffer` object with a varying amount of data in it. The `readLine` parser converts the data into string lines. See the [parsers](https://serialport.io/docs/api-parsers-overview) section for more information on parsers, and the [Node.js stream documentation](https://nodejs.org/api/stream.html#stream_event_data) for more information on the data event.
   * @event data
   */
  
  
  SerialPort.prototype._read = function (bytesToRead) {
    var _this5 = this;
  
    if (!this.isOpen) {
      debug('_read', 'queueing _read for after open');
      this.once('open', function () {
        _this5._read(bytesToRead);
      });
      return;
    }
  
    if (!this._pool || this._pool.length - this._pool.used < this._kMinPoolSpace) {
      debug('_read', 'discarding the read buffer pool because it is below kMinPoolSpace');
      this._pool = allocNewReadPool(this.settings.highWaterMark);
    } // Grab another reference to the pool in the case that while we're
    // in the thread pool another read() finishes up the pool, and
    // allocates a new one.
  
  
    var pool = this._pool; // Read the smaller of rest of the pool or however many bytes we want
  
    var toRead = Math.min(pool.length - pool.used, bytesToRead);
    var start = pool.used; // the actual read.
  
    debug('_read', "reading", {
      start: start,
      toRead: toRead
    });
    this.binding.read(pool, start, toRead).then(function (_ref) {
      var bytesRead = _ref.bytesRead;
      debug('binding.read', "finished", {
        bytesRead: bytesRead
      }); // zero bytes means read means we've hit EOF? Maybe this should be an error
  
      if (bytesRead === 0) {
        debug('binding.read', 'Zero bytes read closing readable stream');
  
        _this5.push(null);
  
        return;
      }
  
      pool.used += bytesRead;
  
      _this5.push(pool.slice(start, start + bytesRead));
    }, function (err) {
      debug('binding.read', "error", err);
  
      if (!err.canceled) {
        _this5._disconnected(err);
      }
  
      _this5._read(bytesToRead); // prime to read more once we're reconnected
  
    });
  };
  
  SerialPort.prototype._disconnected = function (err) {
    if (!this.isOpen) {
      debug('disconnected aborted because already closed', err);
      return;
    }
  
    debug('disconnected', err);
    err.disconnected = true;
    this.close(null, err);
  };
  /**
   * The `close` event's callback is called with no arguments when the port is closed. In the case of a disconnect it will be called with a Disconnect Error object (`err.disconnected == true`). In the event of a close error (unlikely), an error event is triggered.
   * @event close
   */
  
  /**
   * Closes an open connection.
   *
   * If there are in progress writes when the port is closed the writes will error.
   * @param {errorCallback} callback Called once a connection is closed.
   * @param {Error} disconnectError used internally to propagate a disconnect error
   * @emits close
   * @returns {undefined}
   */
  
  
  SerialPort.prototype.close = function (callback, disconnectError) {
    var _this6 = this;
  
    disconnectError = disconnectError || null;
  
    if (!this.isOpen) {
      debug('close attempted, but port is not open');
      return this._asyncError(new Error('Port is not open'), callback);
    }
  
    this.closing = true;
    debug('#close');
    this.binding.close().then(function () {
      _this6.closing = false;
      debug('binding.close', 'finished');
  
      _this6.emit('close', disconnectError);
  
      if (_this6.settings.endOnClose) {
        _this6.emit('end');
      }
  
      if (callback) {
        callback.call(_this6, disconnectError);
      }
    }, function (err) {
      _this6.closing = false;
      debug('binding.close', 'had an error', err);
      return _this6._error(err, callback);
    });
  };
  /**
   * Set control flags on an open port. Uses [`SetCommMask`](https://msdn.microsoft.com/en-us/library/windows/desktop/aa363257(v=vs.85).aspx) for Windows and [`ioctl`](http://linux.die.net/man/4/tty_ioctl) for OS X and Linux.
   * @param {object=} options All options are operating system default when the port is opened. Every flag is set on each call to the provided or default values. If options isn't provided default options is used.
   * @param {Boolean} [options.brk=false] sets the brk flag
   * @param {Boolean} [options.cts=false] sets the cts flag
   * @param {Boolean} [options.dsr=false] sets the dsr flag
   * @param {Boolean} [options.dtr=true] sets the dtr flag
   * @param {Boolean} [options.rts=true] sets the rts flag
   * @param {errorCallback=} callback Called once the port's flags have been set.
   * @since 5.0.0
   * @returns {undefined}
   */
  
  
  SerialPort.prototype.set = function (options, callback) {
    var _this7 = this;
  
    if (_typeof(options) !== 'object') {
      throw TypeError('"options" is not an object');
    }
  
    if (!this.isOpen) {
      debug('set attempted, but port is not open');
      return this._asyncError(new Error('Port is not open'), callback);
    }
  
    var settings = _objectSpread(_objectSpread({}, defaultSetFlags), options);
  
    debug('#set', settings);
    this.binding.set(settings).then(function () {
      debug('binding.set', 'finished');
  
      if (callback) {
        callback.call(_this7, null);
      }
    }, function (err) {
      debug('binding.set', 'had an error', err);
      return _this7._error(err, callback);
    });
  };
  /**
   * Returns the control flags (CTS, DSR, DCD) on the open port.
   * Uses [`GetCommModemStatus`](https://msdn.microsoft.com/en-us/library/windows/desktop/aa363258(v=vs.85).aspx) for Windows and [`ioctl`](http://linux.die.net/man/4/tty_ioctl) for mac and linux.
   * @param {modemBitsCallback=} callback Called once the modem bits are retrieved.
   * @returns {undefined}
   */
  
  
  SerialPort.prototype.get = function (callback) {
    var _this8 = this;
  
    if (!this.isOpen) {
      debug('get attempted, but port is not open');
      return this._asyncError(new Error('Port is not open'), callback);
    }
  
    debug('#get');
    this.binding.get().then(function (status) {
      debug('binding.get', 'finished');
  
      if (callback) {
        callback.call(_this8, null, status);
      }
    }, function (err) {
      debug('binding.get', 'had an error', err);
      return _this8._error(err, callback);
    });
  };
  /**
   * Flush discards data received but not read, and written but not transmitted by the operating system. For more technical details, see [`tcflush(fd, TCIOFLUSH)`](http://linux.die.net/man/3/tcflush) for Mac/Linux and [`FlushFileBuffers`](http://msdn.microsoft.com/en-us/library/windows/desktop/aa364439) for Windows.
   * @param  {errorCallback=} callback Called once the flush operation finishes.
   * @returns {undefined}
   */
  
  
  SerialPort.prototype.flush = function (callback) {
    var _this9 = this;
  
    if (!this.isOpen) {
      debug('flush attempted, but port is not open');
      return this._asyncError(new Error('Port is not open'), callback);
    }
  
    debug('#flush');
    this.binding.flush().then(function () {
      debug('binding.flush', 'finished');
  
      if (callback) {
        callback.call(_this9, null);
      }
    }, function (err) {
      debug('binding.flush', 'had an error', err);
      return _this9._error(err, callback);
    });
  };
  /**
   * Waits until all output data is transmitted to the serial port. After any pending write has completed it calls [`tcdrain()`](http://linux.die.net/man/3/tcdrain) or [FlushFileBuffers()](https://msdn.microsoft.com/en-us/library/windows/desktop/aa364439(v=vs.85).aspx) to ensure it has been written to the device.
   * @param {errorCallback=} callback Called once the drain operation returns.
   * @returns {undefined}
   * @example
  Write the `data` and wait until it has finished transmitting to the target serial port before calling the callback. This will queue until the port is open and writes are finished.
  
  ```js
  function writeAndDrain (data, callback) {
    port.write(data);
    port.drain(callback);
  }
  ```
   */
  
  
  SerialPort.prototype.drain = function (callback) {
    var _this10 = this;
  
    debug('drain');
  
    if (!this.isOpen) {
      debug('drain queuing on port open');
      return this.once('open', function () {
        _this10.drain(callback);
      });
    }
  
    this.binding.drain().then(function () {
      debug('binding.drain', 'finished');
  
      if (callback) {
        callback.call(_this10, null);
      }
    }, function (err) {
      debug('binding.drain', 'had an error', err);
      return _this10._error(err, callback);
    });
  };
  /**
   * The `pause()` method causes a stream in flowing mode to stop emitting 'data' events, switching out of flowing mode. Any data that becomes available remains in the internal buffer.
   * @method SerialPort.prototype.pause
   * @see resume
   * @since 5.0.0
   * @returns `this`
   */
  
  /**
   * The `resume()` method causes an explicitly paused, `Readable` stream to resume emitting 'data' events, switching the stream into flowing mode.
   * @method SerialPort.prototype.resume
   * @see pause
   * @since 5.0.0
   * @returns `this`
   */
  
  /**
   * Retrieves a list of available serial ports with metadata. Only the `path` is guaranteed. If unavailable the other fields will be undefined. The `path` is either the path or an identifier (eg `COM1`) used to open the SerialPort.
   *
   * We make an effort to identify the hardware attached and have consistent results between systems. Linux and OS X are mostly consistent. Windows relies on 3rd party device drivers for the information and is unable to guarantee the information. On windows If you have a USB connected device can we provide a serial number otherwise it will be `undefined`. The `pnpId` and `locationId` are not the same or present on all systems. The examples below were run with the same Arduino Uno.
   * @type {function}
   * @returns {Promise} Resolves with the list of available serial ports.
   * @example
  ```js
  // OSX example port
  {
    path: '/dev/tty.usbmodem1421',
    manufacturer: 'Arduino (www.arduino.cc)',
    serialNumber: '752303138333518011C1',
    pnpId: undefined,
    locationId: '14500000',
    productId: '0043',
    vendorId: '2341'
  }
  
  // Linux example port
  {
    path: '/dev/ttyACM0',
    manufacturer: 'Arduino (www.arduino.cc)',
    serialNumber: '752303138333518011C1',
    pnpId: 'usb-Arduino__www.arduino.cc__0043_752303138333518011C1-if00',
    locationId: undefined,
    productId: '0043',
    vendorId: '2341'
  }
  
  // Windows example port
  {
    path: 'COM3',
    manufacturer: 'Arduino LLC (www.arduino.cc)',
    serialNumber: '752303138333518011C1',
    pnpId: 'USB\\VID_2341&PID_0043\\752303138333518011C1',
    locationId: 'Port_#0003.Hub_#0001',
    productId: '0043',
    vendorId: '2341'
  }
  ```
  
  ```js
  var SerialPort = require('serialport');
  
  // promise approach
  SerialPort.list()
    .then(ports) {...});
    .catch(err) {...});
  ```
   */
  
  
  SerialPort.list = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(callback) {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              debug('.list');
  
              if (SerialPort.Binding) {
                _context.next = 3;
                break;
              }
  
              throw new TypeError('No Binding set on `SerialPort.Binding`');
  
            case 3:
              if (!callback) {
                _context.next = 5;
                break;
              }
  
              throw new TypeError('SerialPort.list no longer takes a callback and only returns a promise');
  
            case 5:
              return _context.abrupt("return", SerialPort.Binding.list());
  
            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
  
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }();
  
  module.exports = SerialPort;
  
  /***/ }),
  
  /***/ 6299:
  /***/ (function(__unused_webpack_module, exports) {
  
  "use strict";
  
  
  exports.byteLength = byteLength;
  exports.toByteArray = toByteArray;
  exports.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  } // Support decoding URL-safe base64 strings, as Node.js does.
  // See: https://en.wikipedia.org/wiki/Base64#URL_applications
  
  
  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;
  
  function getLens(b64) {
    var len = b64.length;
  
    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4');
    } // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
  
  
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  } // base64 is 4/3 + up to two characters of the original data
  
  
  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  
  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  
  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars
  
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
  
    for (i = 0; i < len; i += 4) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[curByte++] = tmp >> 16 & 0xFF;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }
  
    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[curByte++] = tmp & 0xFF;
    }
  
    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }
  
    return arr;
  }
  
  function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
  }
  
  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
  
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
      output.push(tripletToBase64(tmp));
    }
  
    return output.join('');
  }
  
  function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3
    // go through the array every three bytes, we'll deal with trailing stuff later
  
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    } // pad the end with zeros, but make sure to not forget the extra bytes
  
  
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
    }
  
    return parts.join('');
  }
  
  /***/ }),
  
  /***/ 9343:
  /***/ (function(module, exports, __webpack_require__) {
  
  var __filename = "/index.js";
  /* provided dependency */ var process = __webpack_require__(7844);
  /**
   * Module dependencies.
   */
  var fs = __webpack_require__(8486),
      path = __webpack_require__(9522),
      fileURLToPath = __webpack_require__(3534),
      join = path.join,
      dirname = path.dirname,
      exists = fs.accessSync && function (path) {
    try {
      fs.accessSync(path);
    } catch (e) {
      return false;
    }
  
    return true;
  } || fs.existsSync || path.existsSync,
      defaults = {
    arrow: process.env.NODE_BINDINGS_ARROW || ' → ',
    compiled: process.env.NODE_BINDINGS_COMPILED_DIR || 'compiled',
    platform: process.platform,
    arch: process.arch,
    nodePreGyp: 'node-v' + process.versions.modules + '-' + process.platform + '-' + process.arch,
    version: process.versions.node,
    bindings: 'bindings.node',
    "try": [// node-gyp's linked version in the "build" dir
    ['module_root', 'build', 'bindings'], // node-waf and gyp_addon (a.k.a node-gyp)
    ['module_root', 'build', 'Debug', 'bindings'], ['module_root', 'build', 'Release', 'bindings'], // Debug files, for development (legacy behavior, remove for node v0.9)
    ['module_root', 'out', 'Debug', 'bindings'], ['module_root', 'Debug', 'bindings'], // Release files, but manually compiled (legacy behavior, remove for node v0.9)
    ['module_root', 'out', 'Release', 'bindings'], ['module_root', 'Release', 'bindings'], // Legacy from node-waf, node <= 0.4.x
    ['module_root', 'build', 'default', 'bindings'], // Production "Release" buildtype binary (meh...)
    ['module_root', 'compiled', 'version', 'platform', 'arch', 'bindings'], // node-qbs builds
    ['module_root', 'addon-build', 'release', 'install-root', 'bindings'], ['module_root', 'addon-build', 'debug', 'install-root', 'bindings'], ['module_root', 'addon-build', 'default', 'install-root', 'bindings'], // node-pre-gyp path ./lib/binding/{node_abi}-{platform}-{arch}
    ['module_root', 'lib', 'binding', 'nodePreGyp', 'bindings']]
  };
  /**
   * The main `bindings()` function loads the compiled bindings for a given module.
   * It uses V8's Error API to determine the parent filename that this function is
   * being invoked from, which is then used to find the root directory.
   */
  
  
  function bindings(opts) {
    // Argument surgery
    if (typeof opts == 'string') {
      opts = {
        bindings: opts
      };
    } else if (!opts) {
      opts = {};
    } // maps `defaults` onto `opts` object
  
  
    Object.keys(defaults).map(function (i) {
      if (!(i in opts)) opts[i] = defaults[i];
    }); // Get the module root
  
    if (!opts.module_root) {
      opts.module_root = exports.getRoot(exports.getFileName());
    } // Ensure the given bindings name ends with .node
  
  
    if (path.extname(opts.bindings) != '.node') {
      opts.bindings += '.node';
    } // https://github.com/webpack/webpack/issues/4175#issuecomment-342931035
  
  
    var requireFunc =  true ? require : 0;
    var tries = [],
        i = 0,
        l = opts["try"].length,
        n,
        b,
        err;
  
    for (; i < l; i++) {
      n = join.apply(null, opts["try"][i].map(function (p) {
        return opts[p] || p;
      }));
      tries.push(n);
  
      try {
        b = opts.path ? requireFunc.resolve(n) : requireFunc(n);
  
        if (!opts.path) {
          b.path = n;
        }
  
        return b;
      } catch (e) {
        if (e.code !== 'MODULE_NOT_FOUND' && e.code !== 'QUALIFIED_PATH_RESOLUTION_FAILED' && !/not find/i.test(e.message)) {
          throw e;
        }
      }
    }
  
    err = new Error('Could not locate the bindings file. Tried:\n' + tries.map(function (a) {
      return opts.arrow + a;
    }).join('\n'));
    err.tries = tries;
    throw err;
  }
  
  module.exports = exports = bindings;
  /**
   * Gets the filename of the JavaScript file that invokes this function.
   * Used to help find the root directory of a module.
   * Optionally accepts an filename argument to skip when searching for the invoking filename
   */
  
  exports.getFileName = function getFileName(calling_file) {
    var origPST = Error.prepareStackTrace,
        origSTL = Error.stackTraceLimit,
        dummy = {},
        fileName;
    Error.stackTraceLimit = 10;
  
    Error.prepareStackTrace = function (e, st) {
      for (var i = 0, l = st.length; i < l; i++) {
        fileName = st[i].getFileName();
  
        if (fileName !== __filename) {
          if (calling_file) {
            if (fileName !== calling_file) {
              return;
            }
          } else {
            return;
          }
        }
      }
    }; // run the 'prepareStackTrace' function above
  
  
    //Error.captureStackTrace(dummy);
    dummy.stack; // cleanup
  
    Error.prepareStackTrace = origPST;
    Error.stackTraceLimit = origSTL; // handle filename that starts with "file://"
  
    var fileSchema = 'file://';
  
    if (fileName.indexOf(fileSchema) === 0) {
      fileName = fileURLToPath(fileName);
    }
  
    return fileName;
  };
  /**
   * Gets the root directory of a module, given an arbitrary filename
   * somewhere in the module tree. The "root directory" is the directory
   * containing the `package.json` file.
   *
   *   In:  /home/nate/node-native-module/lib/index.js
   *   Out: /home/nate/node-native-module
   */
  
  
  exports.getRoot = function getRoot(file) {
    var dir = dirname(file),
        prev;
  
    while (true) {
      if (dir === '.') {
        // Avoids an infinite loop in rare cases, like the REPL
        dir = process.cwd();
      }
  
      if (exists(join(dir, 'package.json')) || exists(join(dir, 'node_modules'))) {
        // Found the 'package.json' file or 'node_modules' dir; we're done
        return dir;
      }
  
      if (prev === dir) {
        // Got to the top
        throw new Error('Could not find module root given file: "' + file + '". Do you have a `package.json` file? ');
      } // Try the parent dir next
  
  
      prev = dir;
      dir = join(dir, '..');
    }
  };
  
  /***/ }),
  
  /***/ 5494:
  /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
  
  "use strict";
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
  
  /* eslint-disable no-proto */
  
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  var base64 = __webpack_require__(6299);
  
  var ieee754 = __webpack_require__(1816);
  
  var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' // eslint-disable-line dot-notation
  ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
  : null;
  exports.Buffer = Buffer;
  exports.SlowBuffer = SlowBuffer;
  exports.INSPECT_MAX_BYTES = 50;
  var K_MAX_LENGTH = 0x7fffffff;
  exports.kMaxLength = K_MAX_LENGTH;
  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Print warning and recommend using `buffer` v4.x which has an Object
   *               implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * We report that the browser does not support typed arrays if the are not subclassable
   * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
   * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
   * for __proto__ and has a buggy typed array implementation.
   */
  
  Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
  
  if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
  }
  
  function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
      var arr = new Uint8Array(1);
      var proto = {
        foo: function foo() {
          return 42;
        }
      };
      Object.setPrototypeOf(proto, Uint8Array.prototype);
      Object.setPrototypeOf(arr, proto);
      return arr.foo() === 42;
    } catch (e) {
      return false;
    }
  }
  
  Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function get() {
      if (!Buffer.isBuffer(this)) return undefined;
      return this.buffer;
    }
  });
  Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function get() {
      if (!Buffer.isBuffer(this)) return undefined;
      return this.byteOffset;
    }
  });
  
  function createBuffer(length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"');
    } // Return an augmented `Uint8Array` instance
  
  
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
  }
  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */
  
  
  function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new TypeError('The "string" argument must be of type string. Received type number');
      }
  
      return allocUnsafe(arg);
    }
  
    return from(arg, encodingOrOffset, length);
  }
  
  Buffer.poolSize = 8192; // not used by this implementation
  
  function from(value, encodingOrOffset, length) {
    if (typeof value === 'string') {
      return fromString(value, encodingOrOffset);
    }
  
    if (ArrayBuffer.isView(value)) {
      return fromArrayView(value);
    }
  
    if (value == null) {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + _typeof(value));
    }
  
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
  
    if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
  
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type number');
    }
  
    var valueOf = value.valueOf && value.valueOf();
  
    if (valueOf != null && valueOf !== value) {
      return Buffer.from(valueOf, encodingOrOffset, length);
    }
  
    var b = fromObject(value);
    if (b) return b;
  
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
      return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    }
  
    throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + _typeof(value));
  }
  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  
  
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
  }; // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
  // https://github.com/feross/buffer/pull/148
  
  
  Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
  Object.setPrototypeOf(Buffer, Uint8Array);
  
  function assertSize(size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be of type number');
    } else if (size < 0) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }
  }
  
  function alloc(size, fill, encoding) {
    assertSize(size);
  
    if (size <= 0) {
      return createBuffer(size);
    }
  
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpreted as a start offset.
      return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    }
  
    return createBuffer(size);
  }
  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  
  
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(size, fill, encoding);
  };
  
  function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
  }
  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  
  
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(size);
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  
  
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(size);
  };
  
  function fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }
  
    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  
    var length = byteLength(string, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string, encoding);
  
    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      buf = buf.slice(0, actual);
    }
  
    return buf;
  }
  
  function fromArrayLike(array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);
  
    for (var i = 0; i < length; i += 1) {
      buf[i] = array[i] & 255;
    }
  
    return buf;
  }
  
  function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
      var copy = new Uint8Array(arrayView);
      return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
  
    return fromArrayLike(arrayView);
  }
  
  function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds');
    }
  
    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds');
    }
  
    var buf;
  
    if (byteOffset === undefined && length === undefined) {
      buf = new Uint8Array(array);
    } else if (length === undefined) {
      buf = new Uint8Array(array, byteOffset);
    } else {
      buf = new Uint8Array(array, byteOffset, length);
    } // Return an augmented `Uint8Array` instance
  
  
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
  }
  
  function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
      var len = checked(obj.length) | 0;
      var buf = createBuffer(len);
  
      if (buf.length === 0) {
        return buf;
      }
  
      obj.copy(buf, 0, 0, len);
      return buf;
    }
  
    if (obj.length !== undefined) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0);
      }
  
      return fromArrayLike(obj);
    }
  
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data);
    }
  }
  
  function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
    }
  
    return length | 0;
  }
  
  function SlowBuffer(length) {
    if (+length != length) {
      // eslint-disable-line eqeqeq
      length = 0;
    }
  
    return Buffer.alloc(+length);
  }
  
  Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
  };
  
  Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
  
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
      throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    }
  
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
  
    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }
  
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  };
  
  Buffer.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true;
  
      default:
        return false;
    }
  };
  
  Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
  
    if (list.length === 0) {
      return Buffer.alloc(0);
    }
  
    var i;
  
    if (length === undefined) {
      length = 0;
  
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }
  
    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
  
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
  
      if (isInstance(buf, Uint8Array)) {
        if (pos + buf.length > buffer.length) {
          Buffer.from(buf).copy(buffer, pos);
        } else {
          Uint8Array.prototype.set.call(buffer, buf, pos);
        }
      } else if (!Buffer.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      } else {
        buf.copy(buffer, pos);
      }
  
      pos += buf.length;
    }
  
    return buffer;
  };
  
  function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) {
      return string.length;
    }
  
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
      return string.byteLength;
    }
  
    if (typeof string !== 'string') {
      throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + _typeof(string));
    }
  
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0; // Use a for loop to avoid recursion
  
    var loweredCase = false;
  
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len;
  
        case 'utf8':
        case 'utf-8':
          return utf8ToBytes(string).length;
  
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2;
  
        case 'hex':
          return len >>> 1;
  
        case 'base64':
          return base64ToBytes(string).length;
  
        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
          }
  
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  
  Buffer.byteLength = byteLength;
  
  function slowToString(encoding, start, end) {
    var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  
    if (start === undefined || start < 0) {
      start = 0;
    } // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
  
  
    if (start > this.length) {
      return '';
    }
  
    if (end === undefined || end > this.length) {
      end = this.length;
    }
  
    if (end <= 0) {
      return '';
    } // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  
  
    end >>>= 0;
    start >>>= 0;
  
    if (end <= start) {
      return '';
    }
  
    if (!encoding) encoding = 'utf8';
  
    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end);
  
        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end);
  
        case 'ascii':
          return asciiSlice(this, start, end);
  
        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end);
  
        case 'base64':
          return base64Slice(this, start, end);
  
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end);
  
        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  } // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
  // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
  // reliably in a browserify context because there could be multiple different
  // copies of the 'buffer' package in use. This method works even for Buffer
  // instances that were created from another copy of the `buffer` package.
  // See: https://github.com/feross/buffer/issues/154
  
  
  Buffer.prototype._isBuffer = true;
  
  function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }
  
  Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
  
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits');
    }
  
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
  
    return this;
  };
  
  Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
  
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits');
    }
  
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
  
    return this;
  };
  
  Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
  
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits');
    }
  
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
  
    return this;
  };
  
  Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };
  
  Buffer.prototype.toLocaleString = Buffer.prototype.toString;
  
  Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
  };
  
  Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = exports.INSPECT_MAX_BYTES;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
  };
  
  if (customInspectSymbol) {
    Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
  }
  
  Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
      target = Buffer.from(target, target.offset, target.byteLength);
    }
  
    if (!Buffer.isBuffer(target)) {
      throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + _typeof(target));
    }
  
    if (start === undefined) {
      start = 0;
    }
  
    if (end === undefined) {
      end = target ? target.length : 0;
    }
  
    if (thisStart === undefined) {
      thisStart = 0;
    }
  
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }
  
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index');
    }
  
    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }
  
    if (thisStart >= thisEnd) {
      return -1;
    }
  
    if (start >= end) {
      return 1;
    }
  
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
  
    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
      }
    }
  
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  
  
  function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1; // Normalize byteOffset
  
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }
  
    byteOffset = +byteOffset; // Coerce to Number.
  
    if (numberIsNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : buffer.length - 1;
    } // Normalize byteOffset: negative offsets start from the end of the buffer
  
  
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  
    if (byteOffset >= buffer.length) {
      if (dir) return -1;else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;else return -1;
    } // Normalize val
  
  
    if (typeof val === 'string') {
      val = Buffer.from(val, encoding);
    } // Finally, search either indexOf (if dir is true) or lastIndexOf
  
  
    if (Buffer.isBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1;
      }
  
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
  
      if (typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
      }
  
      return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
    }
  
    throw new TypeError('val must be string, number or Buffer');
  }
  
  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
  
    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
  
      if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }
  
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }
  
    function read(buf, i) {
      if (indexSize === 1) {
        return buf[i];
      } else {
        return buf.readUInt16BE(i * indexSize);
      }
    }
  
    var i;
  
    if (dir) {
      var foundIndex = -1;
  
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
  
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
  
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break;
          }
        }
  
        if (found) return i;
      }
    }
  
    return -1;
  }
  
  Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };
  
  Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };
  
  Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };
  
  function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
  
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
  
      if (length > remaining) {
        length = remaining;
      }
    }
  
    var strLen = string.length;
  
    if (length > strLen / 2) {
      length = strLen / 2;
    }
  
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (numberIsNaN(parsed)) return i;
      buf[offset + i] = parsed;
    }
  
    return i;
  }
  
  function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
  }
  
  function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
  }
  
  function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
  }
  
  function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
  }
  
  Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0; // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0; // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset >>> 0;
  
      if (isFinite(length)) {
        length = length >>> 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    } else {
      throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    }
  
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
  
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds');
    }
  
    if (!encoding) encoding = 'utf8';
    var loweredCase = false;
  
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length);
  
        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length);
  
        case 'ascii':
        case 'latin1':
        case 'binary':
          return asciiWrite(this, string, offset, length);
  
        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length);
  
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length);
  
        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };
  
  Buffer.prototype.toJSON = function toJSON() {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  
  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf);
    } else {
      return base64.fromByteArray(buf.slice(start, end));
    }
  }
  
  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
  
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
  
      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;
  
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
  
            break;
  
          case 2:
            secondByte = buf[i + 1];
  
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
  
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
  
            break;
  
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
  
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
  
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
  
            break;
  
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
  
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
  
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
  
        }
      }
  
      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }
  
      res.push(codePoint);
      i += bytesPerSequence;
    }
  
    return decodeCodePointsArray(res);
  } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  
  
  var MAX_ARGUMENTS_LENGTH = 0x1000;
  
  function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
  
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
    } // Decode in chunks to avoid "call stack size exceeded".
  
  
    var res = '';
    var i = 0;
  
    while (i < len) {
      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }
  
    return res;
  }
  
  function asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
  
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
  
    return ret;
  }
  
  function latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
  
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
  
    return ret;
  }
  
  function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';
  
    for (var i = start; i < end; ++i) {
      out += hexSliceLookupTable[buf[i]];
    }
  
    return out;
  }
  
  function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = ''; // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  
    for (var i = 0; i < bytes.length - 1; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
  
    return res;
  }
  
  Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
  
    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }
  
    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }
  
    if (end < start) end = start;
    var newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance
  
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
  };
  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  
  
  function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
  }
  
  Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
  
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
  
    return val;
  };
  
  Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
  
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }
  
    var val = this[offset + --byteLength];
    var mul = 1;
  
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }
  
    return val;
  };
  
  Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
  };
  
  Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
  };
  
  Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
  };
  
  Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
  };
  
  Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };
  
  Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
  
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
  
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };
  
  Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
  
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
  
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };
  
  Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
  };
  
  Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };
  
  Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };
  
  Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };
  
  Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };
  
  Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
  };
  
  Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
  };
  
  Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
  };
  
  Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
  };
  
  function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
  }
  
  Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
  
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
  
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
  
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }
  
    return offset + byteLength;
  };
  
  Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
  
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
  
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
  
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }
  
    return offset + byteLength;
  };
  
  Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
  };
  
  Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };
  
  Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
  };
  
  Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
  };
  
  Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
  };
  
  Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
  
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
  
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
  
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
  
      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
  
    return offset + byteLength;
  };
  
  Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
  
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
  
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
  
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
  
      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
  
    return offset + byteLength;
  };
  
  Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
  };
  
  Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };
  
  Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
  };
  
  Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
  };
  
  Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
  };
  
  function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
  }
  
  function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
  
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
    }
  
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }
  
  Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
  };
  
  Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
  };
  
  function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
  
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
    }
  
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }
  
  Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
  };
  
  Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
  }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  
  
  Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done
  
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions
  
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds');
    }
  
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?
  
    if (end > this.length) end = this.length;
  
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }
  
    var len = end - start;
  
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
      // Use built-in when available, missing from IE11
      this.copyWithin(targetStart, start, end);
    } else {
      Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    }
  
    return len;
  }; // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  
  
  Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
  
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string');
      }
  
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding);
      }
  
      if (val.length === 1) {
        var code = val.charCodeAt(0);
  
        if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
          // Fast path: If `val` fits into a single byte, use that numeric value.
          val = code;
        }
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    } else if (typeof val === 'boolean') {
      val = Number(val);
    } // Invalid ranges are not set to a default, so can range check early.
  
  
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index');
    }
  
    if (end <= start) {
      return this;
    }
  
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
  
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
      var len = bytes.length;
  
      if (len === 0) {
        throw new TypeError('The value "' + val + '" is invalid for argument "value"');
      }
  
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }
  
    return this;
  }; // HELPER FUNCTIONS
  // ================
  
  
  var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
  
  function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0]; // Node strips out invalid characters like \n and \t from the string, base64-js does not
  
    str = str.trim().replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''
  
    if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
  
    return str;
  }
  
  function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
  
    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i); // is surrogate component
  
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          } // valid lead
  
  
          leadSurrogate = codePoint;
          continue;
        } // 2 leads in a row
  
  
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue;
        } // valid surrogate pair
  
  
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }
  
      leadSurrogate = null; // encode utf8
  
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break;
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break;
        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break;
        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break;
        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else {
        throw new Error('Invalid code point');
      }
    }
  
    return bytes;
  }
  
  function asciiToBytes(str) {
    var byteArray = [];
  
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
  
    return byteArray;
  }
  
  function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
  
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break;
      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }
  
    return byteArray;
  }
  
  function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
  }
  
  function blitBuffer(src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if (i + offset >= dst.length || i >= src.length) break;
      dst[i + offset] = src[i];
    }
  
    return i;
  } // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
  // the `instanceof` check but they should be treated as of that type.
  // See: https://github.com/feross/buffer/issues/166
  
  
  function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
  }
  
  function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj; // eslint-disable-line no-self-compare
  } // Create lookup table for `toString('hex')`
  // See: https://github.com/feross/buffer/issues/219
  
  
  var hexSliceLookupTable = function () {
    var alphabet = '0123456789abcdef';
    var table = new Array(256);
  
    for (var i = 0; i < 16; ++i) {
      var i16 = i * 16;
  
      for (var j = 0; j < 16; ++j) {
        table[i16 + j] = alphabet[i] + alphabet[j];
      }
    }
  
    return table;
  }();
  
  /***/ }),
  
  /***/ 515:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var GetIntrinsic = __webpack_require__(9589);
  
  var callBind = __webpack_require__(4703);
  
  var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));
  
  module.exports = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = GetIntrinsic(name, !!allowMissing);
  
    if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
      return callBind(intrinsic);
    }
  
    return intrinsic;
  };
  
  /***/ }),
  
  /***/ 4703:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var bind = __webpack_require__(5610);
  
  var GetIntrinsic = __webpack_require__(9589);
  
  var $apply = GetIntrinsic('%Function.prototype.apply%');
  var $call = GetIntrinsic('%Function.prototype.call%');
  var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);
  var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
  var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
  var $max = GetIntrinsic('%Math.max%');
  
  if ($defineProperty) {
    try {
      $defineProperty({}, 'a', {
        value: 1
      });
    } catch (e) {
      // IE 8 has a broken defineProperty
      $defineProperty = null;
    }
  }
  
  module.exports = function callBind(originalFunction) {
    var func = $reflectApply(bind, $call, arguments);
  
    if ($gOPD && $defineProperty) {
      var desc = $gOPD(func, 'length');
  
      if (desc.configurable) {
        // original length, plus the receiver, minus any additional arguments (after the receiver)
        $defineProperty(func, 'length', {
          value: 1 + $max(0, originalFunction.length - (arguments.length - 1))
        });
      }
    }
  
    return func;
  };
  
  var applyBind = function applyBind() {
    return $reflectApply(bind, $apply, arguments);
  };
  
  if ($defineProperty) {
    $defineProperty(module.exports, 'apply', {
      value: applyBind
    });
  } else {
    module.exports.apply = applyBind;
  }
  
  /***/ }),
  
  /***/ 1837:
  /***/ (function(module, exports, __webpack_require__) {
  
  /* provided dependency */ var process = __webpack_require__(7844);
  /* eslint-env browser */
  
  /**
   * This is the web browser implementation of `debug()`.
   */
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = localstorage();
  
  exports.destroy = function () {
    var warned = false;
    return function () {
      if (!warned) {
        warned = true;
        console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
      }
    };
  }();
  /**
   * Colors.
   */
  
  
  exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
  /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */
  // eslint-disable-next-line complexity
  
  function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
      return true;
    } // Internet Explorer and Edge do not support colors.
  
  
    if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    } // Is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  
  
    return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
    typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
    typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  /**
   * Colorize log arguments if enabled.
   *
   * @api public
   */
  
  
  function formatArgs(args) {
    args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);
  
    if (!this.useColors) {
      return;
    }
  
    var c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
  
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function (match) {
      if (match === '%%') {
        return;
      }
  
      index++;
  
      if (match === '%c') {
        // We only are interested in the *last* %c
        // (the user may have provided their own)
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  }
  /**
   * Invokes `console.debug()` when available.
   * No-op when `console.debug` is not a "function".
   * If `console.debug` is not available, falls back
   * to `console.log`.
   *
   * @api public
   */
  
  
  exports.log = console.debug || console.log || function () {};
  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */
  
  
  function save(namespaces) {
    try {
      if (namespaces) {
        exports.storage.setItem('debug', namespaces);
      } else {
        exports.storage.removeItem('debug');
      }
    } catch (error) {// Swallow
      // XXX (@Qix-) should we be logging these?
    }
  }
  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */
  
  
  function load() {
    var r;
  
    try {
      r = exports.storage.getItem('debug');
    } catch (error) {// Swallow
      // XXX (@Qix-) should we be logging these?
    } // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  
  
    if (!r && typeof process !== 'undefined' && 'env' in process) {
      r = process.env.DEBUG;
    }
  
    return r;
  }
  /**
   * Localstorage attempts to return the localstorage.
   *
   * This is necessary because safari throws
   * when a user disables cookies/localstorage
   * and you attempt to access it.
   *
   * @return {LocalStorage}
   * @api private
   */
  
  
  function localstorage() {
    try {
      // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
      // The Browser also has localStorage in the global context.
      return localStorage;
    } catch (error) {// Swallow
      // XXX (@Qix-) should we be logging these?
    }
  }
  
  module.exports = __webpack_require__(8185)(exports);
  var formatters = module.exports.formatters;
  /**
   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   */
  
  formatters.j = function (v) {
    try {
      return JSON.stringify(v);
    } catch (error) {
      return '[UnexpectedJSONParseError]: ' + error.message;
    }
  };
  
  /***/ }),
  
  /***/ 8185:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
  
  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
  
  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  
  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
  
  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   */
  function setup(env) {
    createDebug.debug = createDebug;
    createDebug["default"] = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = __webpack_require__(5393);
    createDebug.destroy = destroy;
    Object.keys(env).forEach(function (key) {
      createDebug[key] = env[key];
    });
    /**
    * The currently active debug mode names, and names to skip.
    */
  
    createDebug.names = [];
    createDebug.skips = [];
    /**
    * Map of special "%n" handling functions, for the debug "format" argument.
    *
    * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
    */
  
    createDebug.formatters = {};
    /**
    * Selects a color for a debug namespace
    * @param {String} namespace The namespace string for the debug instance to be colored
    * @return {Number|String} An ANSI color code for the given namespace
    * @api private
    */
  
    function selectColor(namespace) {
      var hash = 0;
  
      for (var i = 0; i < namespace.length; i++) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0; // Convert to 32bit integer
      }
  
      return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
  
    createDebug.selectColor = selectColor;
    /**
    * Create a debugger with the given `namespace`.
    *
    * @param {String} namespace
    * @return {Function}
    * @api public
    */
  
    function createDebug(namespace) {
      var prevTime;
      var enableOverride = null;
      var namespacesCache;
      var enabledCache;
  
      function debug() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
  
        // Disabled?
        if (!debug.enabled) {
          return;
        }
  
        var self = debug; // Set `diff` timestamp
  
        var curr = Number(new Date());
        var ms = curr - (prevTime || curr);
        self.diff = ms;
        self.prev = prevTime;
        self.curr = curr;
        prevTime = curr;
        args[0] = createDebug.coerce(args[0]);
  
        if (typeof args[0] !== 'string') {
          // Anything else let's inspect with %O
          args.unshift('%O');
        } // Apply any `formatters` transformations
  
  
        var index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
          // If we encounter an escaped % then don't increase the array index
          if (match === '%%') {
            return '%';
          }
  
          index++;
          var formatter = createDebug.formatters[format];
  
          if (typeof formatter === 'function') {
            var val = args[index];
            match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`
  
            args.splice(index, 1);
            index--;
          }
  
          return match;
        }); // Apply env-specific formatting (colors, etc.)
  
        createDebug.formatArgs.call(self, args);
        var logFn = self.log || createDebug.log;
        logFn.apply(self, args);
      }
  
      debug.namespace = namespace;
      debug.useColors = createDebug.useColors();
      debug.color = createDebug.selectColor(namespace);
      debug.extend = extend;
      debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.
  
      Object.defineProperty(debug, 'enabled', {
        enumerable: true,
        configurable: false,
        get: function get() {
          if (enableOverride !== null) {
            return enableOverride;
          }
  
          if (namespacesCache !== createDebug.namespaces) {
            namespacesCache = createDebug.namespaces;
            enabledCache = createDebug.enabled(namespace);
          }
  
          return enabledCache;
        },
        set: function set(v) {
          enableOverride = v;
        }
      }); // Env-specific initialization logic for debug instances
  
      if (typeof createDebug.init === 'function') {
        createDebug.init(debug);
      }
  
      return debug;
    }
  
    function extend(namespace, delimiter) {
      var newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
      newDebug.log = this.log;
      return newDebug;
    }
    /**
    * Enables a debug mode by namespaces. This can include modes
    * separated by a colon and wildcards.
    *
    * @param {String} namespaces
    * @api public
    */
  
  
    function enable(namespaces) {
      createDebug.save(namespaces);
      createDebug.namespaces = namespaces;
      createDebug.names = [];
      createDebug.skips = [];
      var i;
      var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
      var len = split.length;
  
      for (i = 0; i < len; i++) {
        if (!split[i]) {
          // ignore empty strings
          continue;
        }
  
        namespaces = split[i].replace(/\*/g, '.*?');
  
        if (namespaces[0] === '-') {
          createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
        } else {
          createDebug.names.push(new RegExp('^' + namespaces + '$'));
        }
      }
    }
    /**
    * Disable debug output.
    *
    * @return {String} namespaces
    * @api public
    */
  
  
    function disable() {
      var namespaces = [].concat(_toConsumableArray(createDebug.names.map(toNamespace)), _toConsumableArray(createDebug.skips.map(toNamespace).map(function (namespace) {
        return '-' + namespace;
      }))).join(',');
      createDebug.enable('');
      return namespaces;
    }
    /**
    * Returns true if the given mode name is enabled, false otherwise.
    *
    * @param {String} name
    * @return {Boolean}
    * @api public
    */
  
  
    function enabled(name) {
      if (name[name.length - 1] === '*') {
        return true;
      }
  
      var i;
      var len;
  
      for (i = 0, len = createDebug.skips.length; i < len; i++) {
        if (createDebug.skips[i].test(name)) {
          return false;
        }
      }
  
      for (i = 0, len = createDebug.names.length; i < len; i++) {
        if (createDebug.names[i].test(name)) {
          return true;
        }
      }
  
      return false;
    }
    /**
    * Convert regexp to namespace
    *
    * @param {RegExp} regxep
    * @return {String} namespace
    * @api private
    */
  
  
    function toNamespace(regexp) {
      return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
    }
    /**
    * Coerce `val`.
    *
    * @param {Mixed} val
    * @return {Mixed}
    * @api private
    */
  
  
    function coerce(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }
  
      return val;
    }
    /**
    * XXX DO NOT USE. This is a temporary stub function.
    * XXX It WILL be removed in the next major release.
    */
  
  
    function destroy() {
      console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    }
  
    createDebug.enable(createDebug.load());
    return createDebug;
  }
  
  module.exports = setup;
  
  /***/ }),
  
  /***/ 3359:
  /***/ (function(module) {
  
  "use strict";
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  var R = (typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === 'object' ? Reflect : null;
  var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  };
  var ReflectOwnKeys;
  
  if (R && typeof R.ownKeys === 'function') {
    ReflectOwnKeys = R.ownKeys;
  } else if (Object.getOwnPropertySymbols) {
    ReflectOwnKeys = function ReflectOwnKeys(target) {
      return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
    };
  } else {
    ReflectOwnKeys = function ReflectOwnKeys(target) {
      return Object.getOwnPropertyNames(target);
    };
  }
  
  function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
  }
  
  var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
  };
  
  function EventEmitter() {
    EventEmitter.init.call(this);
  }
  
  module.exports = EventEmitter;
  module.exports.once = once; // Backwards-compat with node 0.10.x
  
  EventEmitter.EventEmitter = EventEmitter;
  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._eventsCount = 0;
  EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  
  var defaultMaxListeners = 10;
  
  function checkListener(listener) {
    if (typeof listener !== 'function') {
      throw new TypeError('The "listener" argument must be of type Function. Received type ' + _typeof(listener));
    }
  }
  
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function get() {
      return defaultMaxListeners;
    },
    set: function set(arg) {
      if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
      }
  
      defaultMaxListeners = arg;
    }
  });
  
  EventEmitter.init = function () {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    }
  
    this._maxListeners = this._maxListeners || undefined;
  }; // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  
  
  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
      throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    }
  
    this._maxListeners = n;
    return this;
  };
  
  function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }
  
  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
  };
  
  EventEmitter.prototype.emit = function emit(type) {
    var args = [];
  
    for (var i = 1; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
  
    var doError = type === 'error';
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.
  
    if (doError) {
      var er;
      if (args.length > 0) er = args[0];
  
      if (er instanceof Error) {
        // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
      } // At least give some kind of context to the user
  
  
      var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
      err.context = er;
      throw err; // Unhandled 'error' event
    }
  
    var handler = events[type];
    if (handler === undefined) return false;
  
    if (typeof handler === 'function') {
      ReflectApply(handler, this, args);
    } else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
  
      for (var i = 0; i < len; ++i) {
        ReflectApply(listeners[i], this, args);
      }
    }
  
    return true;
  };
  
  function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
  
    if (events === undefined) {
      events = target._events = Object.create(null);
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener !== undefined) {
        target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
  
        events = target._events;
      }
  
      existing = events[type];
    }
  
    if (existing === undefined) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
      } else if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      } // Check for listener leak
  
  
      m = _getMaxListeners(target);
  
      if (m > 0 && existing.length > m && !existing.warned) {
        existing.warned = true; // No error code for this since it is a Warning
        // eslint-disable-next-line no-restricted-syntax
  
        var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        ProcessEmitWarning(w);
      }
    }
  
    return target;
  }
  
  EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };
  
  EventEmitter.prototype.on = EventEmitter.prototype.addListener;
  
  EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
  };
  
  function onceWrapper() {
    if (!this.fired) {
      this.target.removeListener(this.type, this.wrapFn);
      this.fired = true;
      if (arguments.length === 0) return this.listener.call(this.target);
      return this.listener.apply(this.target, arguments);
    }
  }
  
  function _onceWrap(target, type, listener) {
    var state = {
      fired: false,
      wrapFn: undefined,
      target: target,
      type: type,
      listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
  }
  
  EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };
  
  EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
  }; // Emits a 'removeListener' event if and only if the listener was removed.
  
  
  EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
  
    if (list === listener || list.listener === listener) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else {
        delete events[type];
        if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
      }
    } else if (typeof list !== 'function') {
      position = -1;
  
      for (i = list.length - 1; i >= 0; i--) {
        if (list[i] === listener || list[i].listener === listener) {
          originalListener = list[i].listener;
          position = i;
          break;
        }
      }
  
      if (position < 0) return this;
      if (position === 0) list.shift();else {
        spliceOne(list, position);
      }
      if (list.length === 1) events[type] = list[0];
      if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
    }
  
    return this;
  };
  
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this; // not listening for removeListener, no need to emit
  
    if (events.removeListener === undefined) {
      if (arguments.length === 0) {
        this._events = Object.create(null);
        this._eventsCount = 0;
      } else if (events[type] !== undefined) {
        if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
      }
  
      return this;
    } // emit removeListener for all listeners on all events
  
  
    if (arguments.length === 0) {
      var keys = Object.keys(events);
      var key;
  
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        if (key === 'removeListener') continue;
        this.removeAllListeners(key);
      }
  
      this.removeAllListeners('removeListener');
      this._events = Object.create(null);
      this._eventsCount = 0;
      return this;
    }
  
    listeners = events[type];
  
    if (typeof listeners === 'function') {
      this.removeListener(type, listeners);
    } else if (listeners !== undefined) {
      // LIFO order
      for (i = listeners.length - 1; i >= 0; i--) {
        this.removeListener(type, listeners[i]);
      }
    }
  
    return this;
  };
  
  function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
  }
  
  EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
  };
  
  EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
  };
  
  EventEmitter.listenerCount = function (emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount.call(emitter, type);
    }
  };
  
  EventEmitter.prototype.listenerCount = listenerCount;
  
  function listenerCount(type) {
    var events = this._events;
  
    if (events !== undefined) {
      var evlistener = events[type];
  
      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener !== undefined) {
        return evlistener.length;
      }
    }
  
    return 0;
  }
  
  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
  };
  
  function arrayClone(arr, n) {
    var copy = new Array(n);
  
    for (var i = 0; i < n; ++i) {
      copy[i] = arr[i];
    }
  
    return copy;
  }
  
  function spliceOne(list, index) {
    for (; index + 1 < list.length; index++) {
      list[index] = list[index + 1];
    }
  
    list.pop();
  }
  
  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
  
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
  
    return ret;
  }
  
  function once(emitter, name) {
    return new Promise(function (resolve, reject) {
      function errorListener(err) {
        emitter.removeListener(name, resolver);
        reject(err);
      }
  
      function resolver() {
        if (typeof emitter.removeListener === 'function') {
          emitter.removeListener('error', errorListener);
        }
  
        resolve([].slice.call(arguments));
      }
  
      ;
      eventTargetAgnosticAddListener(emitter, name, resolver, {
        once: true
      });
  
      if (name !== 'error') {
        addErrorHandlerIfEventEmitter(emitter, errorListener, {
          once: true
        });
      }
    });
  }
  
  function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') {
      eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
    }
  }
  
  function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
      if (flags.once) {
        emitter.once(name, listener);
      } else {
        emitter.on(name, listener);
      }
    } else if (typeof emitter.addEventListener === 'function') {
      // EventTarget does not have `error` event semantics like Node
      // EventEmitters, we do not listen for `error` events here.
      emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) {
          emitter.removeEventListener(name, wrapListener);
        }
  
        listener(arg);
      });
    } else {
      throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + _typeof(emitter));
    }
  }
  
  /***/ }),
  
  /***/ 3534:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  /**
   * Module dependencies.
   */
  var sep = (__webpack_require__(9522).sep) || '/';
  /**
   * Module exports.
   */
  
  module.exports = fileUriToPath;
  /**
   * File URI to Path function.
   *
   * @param {String} uri
   * @return {String} path
   * @api public
   */
  
  function fileUriToPath(uri) {
    if ('string' != typeof uri || uri.length <= 7 || 'file://' != uri.substring(0, 7)) {
      throw new TypeError('must pass in a file:// URI to convert to a file path');
    }
  
    var rest = decodeURI(uri.substring(7));
    var firstSlash = rest.indexOf('/');
    var host = rest.substring(0, firstSlash);
    var path = rest.substring(firstSlash + 1); // 2.  Scheme Definition
    // As a special case, <host> can be the string "localhost" or the empty
    // string; this is interpreted as "the machine from which the URL is
    // being interpreted".
  
    if ('localhost' == host) host = '';
  
    if (host) {
      host = sep + sep + host;
    } // 3.2  Drives, drive letters, mount points, file system root
    // Drive letters are mapped into the top of a file URI in various ways,
    // depending on the implementation; some applications substitute
    // vertical bar ("|") for the colon after the drive letter, yielding
    // "file:///c|/tmp/test.txt".  In some cases, the colon is left
    // unchanged, as in "file:///c:/tmp/test.txt".  In other cases, the
    // colon is simply omitted, as in "file:///c/tmp/test.txt".
  
  
    path = path.replace(/^(.+)\|/, '$1:'); // for Windows, we need to invert the path separators from what a URI uses
  
    if (sep == '\\') {
      path = path.replace(/\//g, '\\');
    }
  
    if (/^.+\:/.test(path)) {// has Windows drive at beginning of path
    } else {
      // unix path…
      path = sep + path;
    }
  
    return host + path;
  }
  
  /***/ }),
  
  /***/ 4061:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var isCallable = __webpack_require__(234);
  
  var toStr = Object.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  
  var forEachArray = function forEachArray(array, iterator, receiver) {
    for (var i = 0, len = array.length; i < len; i++) {
      if (hasOwnProperty.call(array, i)) {
        if (receiver == null) {
          iterator(array[i], i, array);
        } else {
          iterator.call(receiver, array[i], i, array);
        }
      }
    }
  };
  
  var forEachString = function forEachString(string, iterator, receiver) {
    for (var i = 0, len = string.length; i < len; i++) {
      // no such thing as a sparse string.
      if (receiver == null) {
        iterator(string.charAt(i), i, string);
      } else {
        iterator.call(receiver, string.charAt(i), i, string);
      }
    }
  };
  
  var forEachObject = function forEachObject(object, iterator, receiver) {
    for (var k in object) {
      if (hasOwnProperty.call(object, k)) {
        if (receiver == null) {
          iterator(object[k], k, object);
        } else {
          iterator.call(receiver, object[k], k, object);
        }
      }
    }
  };
  
  var forEach = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) {
      throw new TypeError('iterator must be a function');
    }
  
    var receiver;
  
    if (arguments.length >= 3) {
      receiver = thisArg;
    }
  
    if (toStr.call(list) === '[object Array]') {
      forEachArray(list, iterator, receiver);
    } else if (typeof list === 'string') {
      forEachString(list, iterator, receiver);
    } else {
      forEachObject(list, iterator, receiver);
    }
  };
  
  module.exports = forEach;
  
  /***/ }),
  
  /***/ 1712:
  /***/ (function(module) {
  
  "use strict";
  
  /* eslint no-invalid-this: 1 */
  
  var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
  var slice = Array.prototype.slice;
  var toStr = Object.prototype.toString;
  var funcType = '[object Function]';
  
  module.exports = function bind(that) {
    var target = this;
  
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
  
    var args = slice.call(arguments, 1);
    var bound;
  
    var binder = function binder() {
      if (this instanceof bound) {
        var result = target.apply(this, args.concat(slice.call(arguments)));
  
        if (Object(result) === result) {
          return result;
        }
  
        return this;
      } else {
        return target.apply(that, args.concat(slice.call(arguments)));
      }
    };
  
    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
  
    for (var i = 0; i < boundLength; i++) {
      boundArgs.push('$' + i);
    }
  
    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);
  
    if (target.prototype) {
      var Empty = function Empty() {};
  
      Empty.prototype = target.prototype;
      bound.prototype = new Empty();
      Empty.prototype = null;
    }
  
    return bound;
  };
  
  /***/ }),
  
  /***/ 5610:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var implementation = __webpack_require__(1712);
  
  module.exports = Function.prototype.bind || implementation;
  
  /***/ }),
  
  /***/ 9589:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  var undefined;
  var $SyntaxError = SyntaxError;
  var $Function = Function;
  var $TypeError = TypeError; // eslint-disable-next-line consistent-return
  
  var getEvalledConstructor = function getEvalledConstructor(expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
    } catch (e) {}
  };
  
  var $gOPD = Object.getOwnPropertyDescriptor;
  
  if ($gOPD) {
    try {
      $gOPD({}, '');
    } catch (e) {
      $gOPD = null; // this is IE 8, which has a broken gOPD
    }
  }
  
  var throwTypeError = function throwTypeError() {
    throw new $TypeError();
  };
  
  var ThrowTypeError = $gOPD ? function () {
    try {
      // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
      arguments.callee; // IE 8 does not throw here
  
      return throwTypeError;
    } catch (calleeThrows) {
      try {
        // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
        return $gOPD(arguments, 'callee').get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  }() : throwTypeError;
  
  var hasSymbols = __webpack_require__(6439)();
  
  var getProto = Object.getPrototypeOf || function (x) {
    return x.__proto__;
  }; // eslint-disable-line no-proto
  
  
  var needsEval = {};
  var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);
  var INTRINSICS = {
    '%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
    '%Array%': Array,
    '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
    '%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
    '%AsyncFromSyncIteratorPrototype%': undefined,
    '%AsyncFunction%': needsEval,
    '%AsyncGenerator%': needsEval,
    '%AsyncGeneratorFunction%': needsEval,
    '%AsyncIteratorPrototype%': needsEval,
    '%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
    '%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
    '%Boolean%': Boolean,
    '%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
    '%Date%': Date,
    '%decodeURI%': decodeURI,
    '%decodeURIComponent%': decodeURIComponent,
    '%encodeURI%': encodeURI,
    '%encodeURIComponent%': encodeURIComponent,
    '%Error%': Error,
    '%eval%': eval,
    // eslint-disable-line no-eval
    '%EvalError%': EvalError,
    '%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
    '%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
    '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
    '%Function%': $Function,
    '%GeneratorFunction%': needsEval,
    '%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
    '%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
    '%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
    '%isFinite%': isFinite,
    '%isNaN%': isNaN,
    '%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
    '%JSON%': (typeof JSON === "undefined" ? "undefined" : _typeof(JSON)) === 'object' ? JSON : undefined,
    '%Map%': typeof Map === 'undefined' ? undefined : Map,
    '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
    '%Math%': Math,
    '%Number%': Number,
    '%Object%': Object,
    '%parseFloat%': parseFloat,
    '%parseInt%': parseInt,
    '%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
    '%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
    '%RangeError%': RangeError,
    '%ReferenceError%': ReferenceError,
    '%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
    '%RegExp%': RegExp,
    '%Set%': typeof Set === 'undefined' ? undefined : Set,
    '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
    '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
    '%String%': String,
    '%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
    '%Symbol%': hasSymbols ? Symbol : undefined,
    '%SyntaxError%': $SyntaxError,
    '%ThrowTypeError%': ThrowTypeError,
    '%TypedArray%': TypedArray,
    '%TypeError%': $TypeError,
    '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
    '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
    '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
    '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
    '%URIError%': URIError,
    '%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
    '%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
    '%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
  };
  
  var doEval = function doEval(name) {
    var value;
  
    if (name === '%AsyncFunction%') {
      value = getEvalledConstructor('async function () {}');
    } else if (name === '%GeneratorFunction%') {
      value = getEvalledConstructor('function* () {}');
    } else if (name === '%AsyncGeneratorFunction%') {
      value = getEvalledConstructor('async function* () {}');
    } else if (name === '%AsyncGenerator%') {
      var fn = doEval('%AsyncGeneratorFunction%');
  
      if (fn) {
        value = fn.prototype;
      }
    } else if (name === '%AsyncIteratorPrototype%') {
      var gen = doEval('%AsyncGenerator%');
  
      if (gen) {
        value = getProto(gen.prototype);
      }
    }
  
    INTRINSICS[name] = value;
    return value;
  };
  
  var LEGACY_ALIASES = {
    '%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
    '%ArrayPrototype%': ['Array', 'prototype'],
    '%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
    '%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
    '%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
    '%ArrayProto_values%': ['Array', 'prototype', 'values'],
    '%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
    '%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
    '%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
    '%BooleanPrototype%': ['Boolean', 'prototype'],
    '%DataViewPrototype%': ['DataView', 'prototype'],
    '%DatePrototype%': ['Date', 'prototype'],
    '%ErrorPrototype%': ['Error', 'prototype'],
    '%EvalErrorPrototype%': ['EvalError', 'prototype'],
    '%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
    '%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
    '%FunctionPrototype%': ['Function', 'prototype'],
    '%Generator%': ['GeneratorFunction', 'prototype'],
    '%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
    '%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
    '%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
    '%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
    '%JSONParse%': ['JSON', 'parse'],
    '%JSONStringify%': ['JSON', 'stringify'],
    '%MapPrototype%': ['Map', 'prototype'],
    '%NumberPrototype%': ['Number', 'prototype'],
    '%ObjectPrototype%': ['Object', 'prototype'],
    '%ObjProto_toString%': ['Object', 'prototype', 'toString'],
    '%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
    '%PromisePrototype%': ['Promise', 'prototype'],
    '%PromiseProto_then%': ['Promise', 'prototype', 'then'],
    '%Promise_all%': ['Promise', 'all'],
    '%Promise_reject%': ['Promise', 'reject'],
    '%Promise_resolve%': ['Promise', 'resolve'],
    '%RangeErrorPrototype%': ['RangeError', 'prototype'],
    '%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
    '%RegExpPrototype%': ['RegExp', 'prototype'],
    '%SetPrototype%': ['Set', 'prototype'],
    '%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
    '%StringPrototype%': ['String', 'prototype'],
    '%SymbolPrototype%': ['Symbol', 'prototype'],
    '%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
    '%TypedArrayPrototype%': ['TypedArray', 'prototype'],
    '%TypeErrorPrototype%': ['TypeError', 'prototype'],
    '%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
    '%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
    '%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
    '%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
    '%URIErrorPrototype%': ['URIError', 'prototype'],
    '%WeakMapPrototype%': ['WeakMap', 'prototype'],
    '%WeakSetPrototype%': ['WeakSet', 'prototype']
  };
  
  var bind = __webpack_require__(5610);
  
  var hasOwn = __webpack_require__(8703);
  
  var $concat = bind.call(Function.call, Array.prototype.concat);
  var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
  var $replace = bind.call(Function.call, String.prototype.replace);
  var $strSlice = bind.call(Function.call, String.prototype.slice);
  /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
  
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g;
  /** Used to match backslashes in property paths. */
  
  var stringToPath = function stringToPath(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);
  
    if (first === '%' && last !== '%') {
      throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
    } else if (last === '%' && first !== '%') {
      throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
    }
  
    var result = [];
    $replace(string, rePropName, function (match, number, quote, subString) {
      result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
    });
    return result;
  };
  /* end adaptation */
  
  
  var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;
  
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
      alias = LEGACY_ALIASES[intrinsicName];
      intrinsicName = '%' + alias[0] + '%';
    }
  
    if (hasOwn(INTRINSICS, intrinsicName)) {
      var value = INTRINSICS[intrinsicName];
  
      if (value === needsEval) {
        value = doEval(intrinsicName);
      }
  
      if (typeof value === 'undefined' && !allowMissing) {
        throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
      }
  
      return {
        alias: alias,
        name: intrinsicName,
        value: value
      };
    }
  
    throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
  };
  
  module.exports = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== 'string' || name.length === 0) {
      throw new $TypeError('intrinsic name must be a non-empty string');
    }
  
    if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
      throw new $TypeError('"allowMissing" argument must be a boolean');
    }
  
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
    var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
  
    if (alias) {
      intrinsicBaseName = alias[0];
      $spliceApply(parts, $concat([0, 1], alias));
    }
  
    for (var i = 1, isOwn = true; i < parts.length; i += 1) {
      var part = parts[i];
      var first = $strSlice(part, 0, 1);
      var last = $strSlice(part, -1);
  
      if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) {
        throw new $SyntaxError('property names with quotes must have matching quotes');
      }
  
      if (part === 'constructor' || !isOwn) {
        skipFurtherCaching = true;
      }
  
      intrinsicBaseName += '.' + part;
      intrinsicRealName = '%' + intrinsicBaseName + '%';
  
      if (hasOwn(INTRINSICS, intrinsicRealName)) {
        value = INTRINSICS[intrinsicRealName];
      } else if (value != null) {
        if (!(part in value)) {
          if (!allowMissing) {
            throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
          }
  
          return void undefined;
        }
  
        if ($gOPD && i + 1 >= parts.length) {
          var desc = $gOPD(value, part);
          isOwn = !!desc; // By convention, when a data property is converted to an accessor
          // property to emulate a data property that does not suffer from
          // the override mistake, that accessor's getter is marked with
          // an `originalValue` property. Here, when we detect this, we
          // uphold the illusion by pretending to see that original data
          // property, i.e., returning the value rather than the getter
          // itself.
  
          if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
            value = desc.get;
          } else {
            value = value[part];
          }
        } else {
          isOwn = hasOwn(value, part);
          value = value[part];
        }
  
        if (isOwn && !skipFurtherCaching) {
          INTRINSICS[intrinsicRealName] = value;
        }
      }
    }
  
    return value;
  };
  
  /***/ }),
  
  /***/ 6439:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  var origSymbol = typeof Symbol !== 'undefined' && Symbol;
  
  var hasSymbolSham = __webpack_require__(3243);
  
  module.exports = function hasNativeSymbols() {
    if (typeof origSymbol !== 'function') {
      return false;
    }
  
    if (typeof Symbol !== 'function') {
      return false;
    }
  
    if (_typeof(origSymbol('foo')) !== 'symbol') {
      return false;
    }
  
    if (_typeof(Symbol('bar')) !== 'symbol') {
      return false;
    }
  
    return hasSymbolSham();
  };
  
  /***/ }),
  
  /***/ 3243:
  /***/ (function(module) {
  
  "use strict";
  
  /* eslint complexity: [2, 18], max-statements: [2, 33] */
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  module.exports = function hasSymbols() {
    if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
      return false;
    }
  
    if (_typeof(Symbol.iterator) === 'symbol') {
      return true;
    }
  
    var obj = {};
    var sym = Symbol('test');
    var symObj = Object(sym);
  
    if (typeof sym === 'string') {
      return false;
    }
  
    if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
      return false;
    }
  
    if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
      return false;
    } // temp disabled per https://github.com/ljharb/object.assign/issues/17
    // if (sym instanceof Symbol) { return false; }
    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    // if (!(symObj instanceof Symbol)) { return false; }
    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
  
  
    var symVal = 42;
    obj[sym] = symVal;
  
    for (sym in obj) {
      return false;
    } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
  
  
    if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
      return false;
    }
  
    if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {
      return false;
    }
  
    var syms = Object.getOwnPropertySymbols(obj);
  
    if (syms.length !== 1 || syms[0] !== sym) {
      return false;
    }
  
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
      return false;
    }
  
    if (typeof Object.getOwnPropertyDescriptor === 'function') {
      var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
  
      if (descriptor.value !== symVal || descriptor.enumerable !== true) {
        return false;
      }
    }
  
    return true;
  };
  
  /***/ }),
  
  /***/ 8035:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var hasSymbols = __webpack_require__(3243);
  
  module.exports = function hasToStringTagShams() {
    return hasSymbols() && !!Symbol.toStringTag;
  };
  
  /***/ }),
  
  /***/ 8703:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var bind = __webpack_require__(5610);
  
  module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
  
  /***/ }),
  
  /***/ 1816:
  /***/ (function(__unused_webpack_module, exports) {
  
  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
  exports.read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
  
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
  
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
  
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
  
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
  
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
  };
  
  exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
  
    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
  
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
  
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
  
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
  
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }
  
    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
  
    e = e << mLen | m;
    eLen += mLen;
  
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
  
    buffer[offset + i - d] |= s * 128;
  };
  
  /***/ }),
  
  /***/ 443:
  /***/ (function(module) {
  
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
  
        var TempCtor = function TempCtor() {};
  
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
  
  /***/ }),
  
  /***/ 2441:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  var hasToStringTag = __webpack_require__(8035)();
  
  var callBound = __webpack_require__(515);
  
  var $toString = callBound('Object.prototype.toString');
  
  var isStandardArguments = function isArguments(value) {
    if (hasToStringTag && value && _typeof(value) === 'object' && Symbol.toStringTag in value) {
      return false;
    }
  
    return $toString(value) === '[object Arguments]';
  };
  
  var isLegacyArguments = function isArguments(value) {
    if (isStandardArguments(value)) {
      return true;
    }
  
    return value !== null && _typeof(value) === 'object' && typeof value.length === 'number' && value.length >= 0 && $toString(value) !== '[object Array]' && $toString(value.callee) === '[object Function]';
  };
  
  var supportsStandardArguments = function () {
    return isStandardArguments(arguments);
  }();
  
  isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests
  
  module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
  
  /***/ }),
  
  /***/ 234:
  /***/ (function(module) {
  
  "use strict";
  
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  var fnToStr = Function.prototype.toString;
  var reflectApply = (typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === 'object' && Reflect !== null && Reflect.apply;
  var badArrayLike;
  var isCallableMarker;
  
  if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
    try {
      badArrayLike = Object.defineProperty({}, 'length', {
        get: function get() {
          throw isCallableMarker;
        }
      });
      isCallableMarker = {}; // eslint-disable-next-line no-throw-literal
  
      reflectApply(function () {
        throw 42;
      }, null, badArrayLike);
    } catch (_) {
      if (_ !== isCallableMarker) {
        reflectApply = null;
      }
    }
  } else {
    reflectApply = null;
  }
  
  var constructorRegex = /^\s*class\b/;
  
  var isES6ClassFn = function isES6ClassFunction(value) {
    try {
      var fnStr = fnToStr.call(value);
      return constructorRegex.test(fnStr);
    } catch (e) {
      return false; // not a function
    }
  };
  
  var tryFunctionObject = function tryFunctionToStr(value) {
    try {
      if (isES6ClassFn(value)) {
        return false;
      }
  
      fnToStr.call(value);
      return true;
    } catch (e) {
      return false;
    }
  };
  
  var toStr = Object.prototype.toString;
  var fnClass = '[object Function]';
  var genClass = '[object GeneratorFunction]';
  var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`
  
  /* globals document: false */
  
  var documentDotAll = (typeof document === "undefined" ? "undefined" : _typeof(document)) === 'object' && typeof document.all === 'undefined' && document.all !== undefined ? document.all : {};
  module.exports = reflectApply ? function isCallable(value) {
    if (value === documentDotAll) {
      return true;
    }
  
    if (!value) {
      return false;
    }
  
    if (typeof value !== 'function' && _typeof(value) !== 'object') {
      return false;
    }
  
    if (typeof value === 'function' && !value.prototype) {
      return true;
    }
  
    try {
      reflectApply(value, null, badArrayLike);
    } catch (e) {
      if (e !== isCallableMarker) {
        return false;
      }
    }
  
    return !isES6ClassFn(value);
  } : function isCallable(value) {
    if (value === documentDotAll) {
      return true;
    }
  
    if (!value) {
      return false;
    }
  
    if (typeof value !== 'function' && _typeof(value) !== 'object') {
      return false;
    }
  
    if (typeof value === 'function' && !value.prototype) {
      return true;
    }
  
    if (hasToStringTag) {
      return tryFunctionObject(value);
    }
  
    if (isES6ClassFn(value)) {
      return false;
    }
  
    var strClass = toStr.call(value);
    return strClass === fnClass || strClass === genClass;
  };
  
  /***/ }),
  
  /***/ 1926:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var toStr = Object.prototype.toString;
  var fnToStr = Function.prototype.toString;
  var isFnRegex = /^\s*(?:function)?\*/;
  
  var hasToStringTag = __webpack_require__(8035)();
  
  var getProto = Object.getPrototypeOf;
  
  var getGeneratorFunc = function getGeneratorFunc() {
    // eslint-disable-line consistent-return
    if (!hasToStringTag) {
      return false;
    }
  
    try {
      return Function('return function*() {}')();
    } catch (e) {}
  };
  
  var GeneratorFunction;
  
  module.exports = function isGeneratorFunction(fn) {
    if (typeof fn !== 'function') {
      return false;
    }
  
    if (isFnRegex.test(fnToStr.call(fn))) {
      return true;
    }
  
    if (!hasToStringTag) {
      var str = toStr.call(fn);
      return str === '[object GeneratorFunction]';
    }
  
    if (!getProto) {
      return false;
    }
  
    if (typeof GeneratorFunction === 'undefined') {
      var generatorFunc = getGeneratorFunc();
      GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
    }
  
    return getProto(fn) === GeneratorFunction;
  };
  
  /***/ }),
  
  /***/ 7449:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  var forEach = __webpack_require__(4061);
  
  var availableTypedArrays = __webpack_require__(1353);
  
  var callBound = __webpack_require__(515);
  
  var $toString = callBound('Object.prototype.toString');
  
  var hasToStringTag = __webpack_require__(8035)();
  
  var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
  var typedArrays = availableTypedArrays();
  
  var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
    for (var i = 0; i < array.length; i += 1) {
      if (array[i] === value) {
        return i;
      }
    }
  
    return -1;
  };
  
  var $slice = callBound('String.prototype.slice');
  var toStrTags = {};
  
  var gOPD = __webpack_require__(1041);
  
  var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
  
  if (hasToStringTag && gOPD && getPrototypeOf) {
    forEach(typedArrays, function (typedArray) {
      var arr = new g[typedArray]();
  
      if (Symbol.toStringTag in arr) {
        var proto = getPrototypeOf(arr);
        var descriptor = gOPD(proto, Symbol.toStringTag);
  
        if (!descriptor) {
          var superProto = getPrototypeOf(proto);
          descriptor = gOPD(superProto, Symbol.toStringTag);
        }
  
        toStrTags[typedArray] = descriptor.get;
      }
    });
  }
  
  var tryTypedArrays = function tryAllTypedArrays(value) {
    var anyTrue = false;
    forEach(toStrTags, function (getter, typedArray) {
      if (!anyTrue) {
        try {
          anyTrue = getter.call(value) === typedArray;
        } catch (e) {
          /**/
        }
      }
    });
    return anyTrue;
  };
  
  module.exports = function isTypedArray(value) {
    if (!value || _typeof(value) !== 'object') {
      return false;
    }
  
    if (!hasToStringTag || !(Symbol.toStringTag in value)) {
      var tag = $slice($toString(value), 8, -1);
      return $indexOf(typedArrays, tag) > -1;
    }
  
    if (!gOPD) {
      return false;
    }
  
    return tryTypedArrays(value);
  };
  
  /***/ }),
  
  /***/ 8368:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  /**
   * Copyright (c) 2015, Yaacov Zamir <kobi.zamir@gmail.com>
   *
   * Permission to use, copy, modify, and/or distribute this software for any
   * purpose with or without fee is hereby granted, provided that the above
   * copyright notice and this permission notice appear in all copies.
   *
   * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF  THIS SOFTWARE.
   */
  
  var MIN_MODBUSRTU_FRAMESZ = 5;
  /**
   * Adds connection shorthand API to a Modbus objext
   *
   * @param {ModbusRTU} Modbus the ModbusRTU object.
   */
  
  var addConnctionAPI = function addConnctionAPI(Modbus) {
    var cl = Modbus.prototype;
  
    var open = function open(obj, next) {
      /* the function check for a callback
       * if we have a callback, use it
       * o/w build a promise.
       */
      if (next) {
        // if we have a callback, use the callback
        obj.open(next);
      } else {
        // o/w use  a promise
        return new Promise(function (resolve, reject) {
          function cb(err) {
  
            log("in OPEN - Promise error:  ", err);
  
            if (err) {
              reject(err);
            } else {
              resolve();
            }
          }
  
          obj.open(cb);
        });
      }
    };
    /**
     * Connect to a communication port, using SerialPort.
     *
     * @param {string} path the path to the Serial Port - required.
     * @param {Object} options - the serial port options - optional.
     * @param {Function} next the function to call next.
     */
  
  
    cl.connectRTU = function (path, options, next) {
      // check if we have options
      if (typeof next === "undefined" && typeof options === "function") {
        next = options;
        options = {};
      } // check if we have options
  
  
      if (typeof options === "undefined") {
        options = {};
      } // disable auto open, as we handle the open
  
  
      options.autoOpen = false; // set vmin to smallest modbus packet size
  
      options.platformOptions = {
        vmin: MIN_MODBUSRTU_FRAMESZ,
        vtime: 0
      }; // create the SerialPort
  
      var SerialPort = __webpack_require__(1135);
  
      this._port = new SerialPort(path, options); // open and call next
  
      return open(this, next);
    };
    /**
     * Connect to a communication port, using TcpPort.
     *
     * @param {string} ip the ip of the TCP Port - required.
     * @param {Object} options - the serial port options - optional.
     * @param {Function} next the function to call next.
     */
  
  
    cl.connectTCP = function (ip, options, next) {
      // check if we have options
      if (typeof next === "undefined" && typeof options === "function") {
        next = options;
        options = {};
      } // check if we have options
  
  
      if (typeof options === "undefined") {
        options = {};
      } // create the TcpPort
  
  
      var TcpPort = __webpack_require__(5192);
  
      if (this._timeout) {
        options.timeout = this._timeout;
      }
  
      this._port = new TcpPort(ip, options); // open and call next
  
      return open(this, next);
    };
    /**
     * Setup a communication port with existing socket, using TcpPort.
     *
     * @param {string} socket the instance of the net.Socket - required.
     * @param {Object} options - the TCP port options - optional.
     * @param {Function} next the function to call next.
     */
  
  
    cl.linkTCP = function (socket, options, next) {
      // check if we have options
      if (typeof next === "undefined" && typeof options === "function") {
        next = options;
        options = {};
      } // check if we have options
  
  
      if (typeof options === "undefined") {
        options = {};
      }
  
      options.socket = socket; // create the TcpPort
  
      var TcpPort = __webpack_require__(5192);
  
      if (this._timeout) {
        options.timeout = this._timeout;
      }
  
      this._port = new TcpPort(options); // open and call next
  
      return open(this, next);
    };
    /**
     * Connect to a communication port, using TcpRTUBufferedPort.
     *
     * @param {string} ip the ip of the TCP Port - required.
     * @param {Object} options - the serial tcp port options - optional.
     * @param {Function} next the function to call next.
     */
  
  
    cl.connectTcpRTUBuffered = function (ip, options, next) {
      // check if we have options
      if (typeof next === "undefined" && typeof options === "function") {
        next = options;
        options = {};
      } // check if we have options
  
  
      if (typeof options === "undefined") {
        options = {};
      }
  
      var TcpRTUBufferedPort = __webpack_require__(8997);
  
      if (this._timeout) {
        options.timeout = this._timeout;
      }
  
      this._port = new TcpRTUBufferedPort(ip, options); // open and call next
  
      return open(this, next);
    };
  
    cl.linkTcpRTUBuffered = function (socket, options, next) {
      // check if we have options
      if (typeof next === "undefined" && typeof options === "function") {
        next = options;
        options = {};
      } // check if we have options
  
  
      if (typeof options === "undefined") {
        options = {};
      }
  
      options.socket = socket; // create the TcpPort
  
      var TcpRTUBufferedPort = __webpack_require__(8997);
  
      if (this._timeout) {
        options.timeout = this._timeout;
      }
  
      this._port = new TcpRTUBufferedPort(options); // open and call next
  
      return open(this, next);
    };
    /**
     * Connect to a communication port, using TelnetPort.
     *
     * @param {string} ip the ip of the TelnetPort - required.
     * @param {Object} options - the serial port options - optional.
     * @param {Function} next the function to call next.
     */
  
  
    cl.connectTelnet = function (ip, options, next) {
      // check if we have options
      if (typeof next === "undefined" && typeof options === "function") {
        next = options;
        options = {};
      } // check if we have options
  
  
      if (typeof options === "undefined") {
        options = {};
      } // create the TcpPort
  
  
      var TelnetPort = __webpack_require__(450);
  
      if (this._timeout) {
        options.timeout = this._timeout;
      }
  
      this._port = new TelnetPort(ip, options); // open and call next
  
      return open(this, next);
    };
  
    cl.linkTelnet = function (socket, options, next) {
      // check if we have options
      if (typeof next === "undefined" && typeof options === "function") {
        next = options;
        options = {};
      } // check if we have options
  
  
      if (typeof options === "undefined") {
        options = {};
      }
  
      options.socket = socket; // create the TcpPort
  
      var TelnetPort = __webpack_require__(450);
  
      if (this._timeout) {
        options.timeout = this._timeout;
      }
  
      this._port = new TelnetPort(options); // open and call next
  
      return open(this, next);
    };
    /**
     * Connect to a communication port, using C701 UDP-to-Serial bridge.
     *
     * @param {string} ip the ip of the TelnetPort - required.
     * @param {Object} options - the serial port options - optional.
     * @param {Function} next the function to call next.
     */
  
  
    cl.connectC701 = function (ip, options, next) {
      // check if we have options
      if (typeof next === "undefined" && typeof options === "function") {
        next = options;
        options = {};
      } // check if we have options
  
  
      if (typeof options === "undefined") {
        options = {};
      } // create the TcpPort
  
  
      var C701Port = __webpack_require__(5840);
  
      this._port = new C701Port(ip, options); // open and call next
  
      return open(this, next);
    };
    /**
     * Connect to a communication port, using modbus-udp.
     *
     * @param {string} ip the ip of the UDP Port - required.
     * @param {Object} options - the serial port options - optional.
     * @param {Function} next the function to call next.
     */
  
  
    cl.connectUDP = function (ip, options, next) {
      // check if we have options
      if (typeof next === "undefined" && typeof options === "function") {
        next = options;
        options = {};
      } // check if we have options
  
  
      if (typeof options === "undefined") {
        options = {};
      } // create the UdpPort
  
  
      var UdpPort = __webpack_require__(891);
  
      this._port = new UdpPort(ip, options); // open and call next
  
      return open(this, next);
    };
    /**
     * Connect to a communication port, using Bufferd Serial port.
     *
     * @param {string} path the path to the Serial Port - required.
     * @param {Object} options - the serial port options - optional.
     * @param {Function} next the function to call next.
     */
  
  
    cl.connectRTUBuffered = function (path, options, next) {
  
      log("In ModbusSerial - connectRTUBuffered");
  
      // check if we have options
      if (typeof next === "undefined" && typeof options === "function") {
        next = options;
        options = {};
      } // check if we have options
  
  
      if (typeof options === "undefined") {
        options = {};
      } // create the SerialPort
  
      log("In ModbusSerial - creating SerialPort ", path, options);
      // log("Modified the __webpack_require__(4669) to 1135 or 1978 ");
  
  // Bill Brown - applying a recommendation made by Akash
      var SerialPort = __webpack_require__(4669);
      // var SerialPort = __webpack_require__(1978);
      // var SerialPort = __webpack_require__(1135);
  
      log("In ModbusSerial - instanciating SerialPort ", path, options);
      log("ANS SerialPort: ", JSON.stringify(SerialPort));
      this._port = new SerialPort(path, options); // set vmin to smallest modbus packet size
  
      log("In ModbusSerial - setting options.platformOptions ");
  
      options.platformOptions = {
        vmin: MIN_MODBUSRTU_FRAMESZ,
        vtime: 0
      }; // open and call next
  
      log("In ModbusSerial - connectRTUBuffered returning open(this, next) ");
      return open(this, next);
    };
  
    /**
     * Connect to a communication port, using ASCII Serial port.
     *
     * @param {string} path the path to the Serial Port - required.
     * @param {Object} options - the serial port options - optional.
     * @param {Function} next the function to call next.
     */
  
  
    cl.connectAsciiSerial = function (path, options, next) {
      // check if we have options
      if (typeof next === "undefined" && typeof options === "function") {
        next = options;
        options = {};
      } // check if we have options
  
  
      if (typeof options === "undefined") {
        options = {};
      } // create the ASCII SerialPort
  
  
      var SerialPortAscii = __webpack_require__(6100);
  
      this._port = new SerialPortAscii(path, options); // open and call next
  
      return open(this, next);
    };
    /**
     * Connect to existing client socket.
     *
     * @param {socket} socket the socket to connect to - required.
     * @param {Function} next the function to call next.
     */
  
  
    cl.connectRTUSocket = function (socket, next) {
      var thisModbus = this;
      this._port = socket;
  
      this._port.open = function (callback) {
        // existing socket is already connected
        thisModbus._port.isOpen = true;
        callback();
      }; // open and call next
  
  
      return open(this, next);
    };
  };
  /**
   * Connection API Modbus.
   *
   * @type {addConnctionAPI}
   */
  
  
  module.exports = addConnctionAPI;
  
  /***/ }),
  
  /***/ 1933:
  /***/ (function(module) {
  
  "use strict";
  
  /**
   * Copyright (c) 2015, Yaacov Zamir <kobi.zamir@gmail.com>
   *
   * Permission to use, copy, modify, and/or distribute this software for any
   * purpose with or without fee is hereby granted, provided that the above
   * copyright notice and this permission notice appear in all copies.
   *
   * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF  THIS SOFTWARE.
   */
  
  /**
   * Take a modbus serial function and convert it to use promises.
   *
   * @param {Function} f the function to convert
   * @return a function that calls function "f" and return a promise.
   * @private
   */
  
  var _convert = function _convert(f) {
    var converted = function converted(address, arg, next) {
      var client = this;
      var id = this._unitID;
      /* the function check for a callback
       * if we have a callback, use it
       * o/w build a promise.
       */
  
      if (next) {
        // if we have a callback, use the callback
        f.bind(client)(id, address, arg, next);
      } else {
        // o/w use  a promise
        var promise = new Promise(function (resolve, reject) {
          function cb(err, data) {
            if (err) {
              reject(err);
            } else {
              resolve(data);
            }
          }
  
          f.bind(client)(id, address, arg, cb);
        });
        return promise;
      }
    };
  
    return converted;
  };
  /**
   * Adds promise API to a Modbus object.
   *
   * @param {ModbusRTU} Modbus the ModbusRTU object.
   */
  
  
  var addPromiseAPI = function addPromiseAPI(Modbus) {
    var cl = Modbus.prototype; // set/get unitID
  
    cl.setID = function (id) {
      this._unitID = Number(id);
    };
  
    cl.getID = function () {
      return this._unitID;
    }; // set/get timeout
  
  
    cl.setTimeout = function (timeout) {
      this._timeout = timeout;
    };
  
    cl.getTimeout = function () {
      return this._timeout;
    }; // convert functions to return promises
  
  
    cl.readCoils = _convert(cl.writeFC1);
    cl.readDiscreteInputs = _convert(cl.writeFC2);
    cl.readHoldingRegisters = _convert(cl.writeFC3);
    cl.readInputRegisters = _convert(cl.writeFC4);
    cl.writeCoil = _convert(cl.writeFC5);
    cl.writeRegister = _convert(cl.writeFC6);
    cl.writeCoils = _convert(cl.writeFC15);
    cl.writeRegisters = _convert(cl.writeFC16);
    cl.readFileRecords = _convert(cl.writeFC20);
    cl.readDeviceIdentification = _convert(cl.writeFC43);
  };
  /**
   * Promise API Modbus library.
   *
   * @type {addPromiseAPI}
   */
  
  
  module.exports = addPromiseAPI;
  
  /***/ }),
  
  /***/ 3429:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var Worker = __webpack_require__(8029);
  
  module.exports = function (Modbus) {
    var cl = Modbus.prototype;
  
    cl.setWorkerOptions = function (options) {
      if (this._worker) {
        this._worker.setOptions(options);
      } else {
        this._worker = new Worker(this, options);
      }
    };
  
    cl.send = function (request) {
      if (!this._worker) {
        this._worker = new Worker(this);
      }
  
      return this._worker.send(request);
    };
  
    cl.poll = function (options) {
      if (!this._worker) {
        this._worker = new Worker(this);
      }
  
      return this._worker.poll(options);
    };
  };
  
  /***/ }),
  
  /***/ 6612:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  
  /**
   * Copyright (c) 2015-2017, Yaacov Zamir <kobi.zamir@gmail.com>
   *
   * Permission to use, copy, modify, and/or distribute this software for any
   * purpose with or without fee is hereby granted, provided that the above
   * copyright notice and this permission notice appear in all copies.
   *
   * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF  THIS SOFTWARE.
   */
  
  /* Add bit operation functions to Buffer
   */
  
  __webpack_require__(624)();
  
  var crc16 = __webpack_require__(3973);
  
  var modbusSerialDebug = __webpack_require__(1837)("modbus-serial");
  
  var util = __webpack_require__(7440);
  
  var events = __webpack_require__(3359);
  
  var EventEmitter = events.EventEmitter || events;
  var PORT_NOT_OPEN_MESSAGE = "Port Not Open";
  var PORT_NOT_OPEN_ERRNO = "ECONNREFUSED";
  var BAD_ADDRESS_MESSAGE = "Bad Client Address";
  var BAD_ADDRESS_ERRNO = "ECONNREFUSED";
  var TRANSACTION_TIMED_OUT_MESSAGE = "Timed out";
  var TRANSACTION_TIMED_OUT_ERRNO = "ETIMEDOUT";
  var modbusErrorMessages = ["Unknown error", "Illegal function (device does not support this read/write function)", "Illegal data address (register not supported by device)", "Illegal data value (value cannot be written to this register)", "Slave device failure (device reports internal error)", "Acknowledge (requested data will be available later)", "Slave device busy (retry request again later)"];
  
  var PortNotOpenError = function PortNotOpenError() {
    //Error.captureStackTrace(this, this.constructor);
    this.name = this.constructor.name;
    this.message = PORT_NOT_OPEN_MESSAGE;
    this.errno = PORT_NOT_OPEN_ERRNO;
  };
  
  var BadAddressError = function BadAddressError() {
    //Error.captureStackTrace(this, this.constructor);
    this.name = this.constructor.name;
    this.message = BAD_ADDRESS_MESSAGE;
    this.errno = BAD_ADDRESS_ERRNO;
  };
  
  var TransactionTimedOutError = function TransactionTimedOutError() {
    this.name = this.constructor.name;
    this.message = TRANSACTION_TIMED_OUT_MESSAGE;
    this.errno = TRANSACTION_TIMED_OUT_ERRNO;
  };
  
  var SerialPortError = function SerialPortError() {
    this.name = this.constructor.name;
    this.message = null;
    this.errno = "ECONNREFUSED";
  };
  /**
   * @fileoverview ModbusRTU module, exports the ModbusRTU class.
   * this class makes ModbusRTU calls fun and easy.
   *
   * Modbus is a serial communications protocol, first used in 1979.
   * Modbus is simple and robust, openly published, royalty-free and
   * easy to deploy and maintain.
   */
  
  /**
   * Parse the data for a Modbus -
   * Read Coils (FC=02, 01)
   *
   * @param {Buffer} data the data buffer to parse.
   * @param {Function} next the function to call next.
   */
  
  
  function _readFC2(data, next) {
    var length = data.readUInt8(2);
    var contents = [];
  
    for (var i = 0; i < length; i++) {
      var reg = data[i + 3];
  
      for (var j = 0; j < 8; j++) {
        contents.push((reg & 1) === 1);
        reg = reg >> 1;
      }
    }
  
    if (next) next(null, {
      "data": contents,
      "buffer": data.slice(3, 3 + length)
    });
  }
  /**
   * Parse the data for a Modbus -
   * Read Input Registers (FC=04, 03)
   *
   * @param {Buffer} data the data buffer to parse.
   * @param {Function} next the function to call next.
   */
  
  
  function _readFC4(data, next) {
    var length = data.readUInt8(2);
    var contents = [];
  
    for (var i = 0; i < length; i += 2) {
      var reg = data.readUInt16BE(i + 3);
      contents.push(reg);
    }
  
    if (next) next(null, {
      "data": contents,
      "buffer": data.slice(3, 3 + length)
    });
  }
  /**
   * Parse the data for a Modbus -
   * Force Single Coil (FC=05)
   *
   * @param {Buffer} data the data buffer to parse.
   * @param {Function} next the function to call next.
   */
  
  
  function _readFC5(data, next) {
    var dataAddress = data.readUInt16BE(2);
    var state = data.readUInt16BE(4);
    if (next) next(null, {
      "address": dataAddress,
      "state": state === 0xff00
    });
  }
  /**
   * Parse the data for a Modbus -
   * Preset Single Registers (FC=06)
   *
   * @param {Buffer} data the data buffer to parse.
   * @param {Function} next the function to call next.
   */
  
  
  function _readFC6(data, next) {
    var dataAddress = data.readUInt16BE(2);
    var value = data.readUInt16BE(4);
    if (next) next(null, {
      "address": dataAddress,
      "value": value
    });
  }
  /**
   * Parse the data for a Modbus -
   * Preset Multiple Registers (FC=15, 16)
   *
   * @param {Buffer} data the data buffer to parse.
   * @param {Function} next the function to call next.
   */
  
  
  function _readFC16(data, next) {
    var dataAddress = data.readUInt16BE(2);
    var length = data.readUInt16BE(4);
    if (next) next(null, {
      "address": dataAddress,
      "length": length
    });
  }
  /**
   * Parse  the data fro Modbus -
   * Read File Records
   *
   * @param {Buffer4} buffer
   * @param {Function} next
   */
  
  
  function _readFC20(data, next) {
    var fileRespLength = parseInt(data.readUInt8(2));
    var result = [];
  
    for (var i = 5; i < fileRespLength + 5; i++) {
      var reg = data.readUInt8(i);
      result.push(reg);
    }
  
    if (next) next(null, {
      "data": result,
      "length": fileRespLength
    });
  }
  /**
   * Parse the data for a Modbus -
   * Read Device Identification (FC=43)
   *
   * @param {Buffer} data the data buffer to parse.
   * @param {Modbus} modbus the client in case we need to read more device information
   * @param {Function} next the function to call next.
   */
  
  
  function _readFC43(data, modbus, next) {
    var address = parseInt(data.readUInt8(0));
    var readDeviceIdCode = parseInt(data.readUInt8(3));
    var conformityLevel = parseInt(data.readUInt8(4));
    var moreFollows = parseInt(data.readUInt8(5));
    var nextObjectId = parseInt(data.readUInt8(6));
    var numOfObjects = parseInt(data.readUInt8(7));
    var startAt = 8;
    var result = {};
  
    for (var i = 0; i < numOfObjects; i++) {
      var objectId = parseInt(data.readUInt8(startAt));
      var objectLength = parseInt(data.readUInt8(startAt + 1));
      var startOfData = startAt + 2;
      result[objectId] = data.toString("ascii", startOfData, startOfData + objectLength);
      startAt = startOfData + objectLength;
    } // is it saying to follow and did you previously get data
    // if you did not previously get data go ahead and halt to prevent an infinite loop
  
  
    if (moreFollows && numOfObjects) {
      var cb = function cb(err, data) {
        data.data = Object.assign(data.data, result);
        return next(err, data);
      };
  
      modbus.writeFC43(address, readDeviceIdCode, nextObjectId, cb);
    } else if (next) {
      next(null, {
        data: result,
        conformityLevel: conformityLevel
      });
    }
  }
  /**
   * Wrapper method for writing to a port with timeout. <code><b>[this]</b></code> has the context of ModbusRTU
   * @param {Buffer} buffer The data to send
   * @private
   */
  
  
  function _writeBufferToPort(buffer, transactionId) {
    var transaction = this._transactions[transactionId];
  
    if (transaction) {
      transaction._timeoutFired = false;
      transaction._timeoutHandle = _startTimeout(this._timeout, transaction); // If in debug mode, stash a copy of the request payload
  
      if (this._debugEnabled) {
        transaction.request = Uint8Array.prototype.slice.call(buffer);
        transaction.responses = [];
      }
    }
  
    this._port.write(buffer);
  }
  /**
   * Starts the timeout timer with the given duration.
   * If the timeout ends before it was cancelled, it will call the callback with an error.
   * @param {number} duration the timeout duration in milliseconds.
   * @param {Function} next the function to call next.
   * @return {number} The handle of the timeout
   * @private
   */
  
  
  function _startTimeout(duration, transaction) {
    if (!duration) {
      return undefined;
    }
  
    return setTimeout(function () {
      transaction._timeoutFired = true;
  
      if (transaction.next) {
        var err = new TransactionTimedOutError();
  
        if (transaction.request && transaction.responses) {
          err.modbusRequest = transaction.request;
          err.modbusResponses = transaction.responses;
        }
  
        transaction.next(err);
      }
    }, duration);
  }
  /**
   * Cancel the given timeout.
   *
   * @param {number} timeoutHandle The handle of the timeout
   * @private
   */
  
  
  function _cancelTimeout(timeoutHandle) {
    clearTimeout(timeoutHandle);
  }
  /**
   * Handle incoming data from the Modbus port.
   *
   * @param {Buffer} data The data received
   * @private
   */
  
  
  function _onReceive(data) {
    var modbus = this;
    var error; // set locale helpers variables
  
    var transaction = modbus._transactions[modbus._port._transactionIdRead]; // the _transactionIdRead can be missing, ignore wrong transaction it's
  
    if (!transaction) {
      return;
    }
  
    if (transaction.responses) {
      /* Stash what we received */
      transaction.responses.push(Uint8Array.prototype.slice.call(data));
    }
    /* What do we do next? */
  
  
    var next = function next(err, res) {
      if (transaction.next) {
        /* Include request/response data if enabled */
        if (transaction.request && transaction.responses) {
          if (err) {
            err.modbusRequest = transaction.request;
            err.modbusResponses = transaction.responses;
          }
  
          if (res) {
            res.request = transaction.request;
            res.responses = transaction.responses;
          }
        }
        /* Pass the data on */
  
  
        return transaction.next(err, res);
      }
    };
    /* cancel the timeout */
  
  
    _cancelTimeout(transaction._timeoutHandle);
  
    transaction._timeoutHandle = undefined;
    /* check if the timeout fired */
  
    if (transaction._timeoutFired === true) {
      // we have already called back with an error, so don't generate a new callback
      return;
    }
    /* check incoming data
     */
  
    /* check minimal length
     */
  
  
    if (!transaction.lengthUnknown && data.length < 5) {
      error = "Data length error, expected " + transaction.nextLength + " got " + data.length;
      next(new Error(error));
      return;
    }
    /* check message CRC
     * if CRC is bad raise an error
     */
  
  
    var crcIn = data.readUInt16LE(data.length - 2);
  
    if (crcIn !== crc16(data.slice(0, -2))) {
      error = "CRC error";
      next(new Error(error));
      return;
    } // if crc is OK, read address and function code
  
  
    var address = data.readUInt8(0);
    var code = data.readUInt8(1);
    /* check for modbus exception
     */
  
    if (data.length >= 5 && code === (0x80 | transaction.nextCode)) {
      var errorCode = data.readUInt8(2);
  
      if (transaction.next) {
        error = new Error("Modbus exception " + errorCode + ": " + (modbusErrorMessages[errorCode] || "Unknown error"));
        error.modbusCode = errorCode;
        next(error);
      }
  
      return;
    }
    /* check message length
     * if we do not expect this data
     * raise an error
     */
  
  
    if (!transaction.lengthUnknown && data.length !== transaction.nextLength) {
      error = "Data length error, expected " + transaction.nextLength + " got " + data.length;
      next(new Error(error));
      return;
    }
    /* check message address
     * if we do not expect this message
     * raise an error
     */
  
  
    if (address !== transaction.nextAddress) {
      error = "Unexpected data error, expected " + "address " + transaction.nextAddress + " got " + address;
      if (transaction.next) next(new Error(error));
      return;
    }
    /* check message code
     * if we do not expect this message
     * raise an error
     */
  
  
    if (code !== transaction.nextCode) {
      error = "Unexpected data error, expected " + "code " + transaction.nextCode + " got " + code;
      if (transaction.next) next(new Error(error));
      return;
    }
    /* parse incoming data
     */
  
  
    switch (code) {
      case 1:
      case 2:
        // Read Coil Status (FC=01)
        // Read Input Status (FC=02)
        _readFC2(data, next);
  
        break;
  
      case 3:
      case 4:
        // Read Input Registers (FC=04)
        // Read Holding Registers (FC=03)
        _readFC4(data, next);
  
        break;
  
      case 5:
        // Force Single Coil
        _readFC5(data, next);
  
        break;
  
      case 6:
        // Preset Single Register
        _readFC6(data, next);
  
        break;
  
      case 15:
      case 16:
        // Force Multiple Coils
        // Preset Multiple Registers
        _readFC16(data, next);
  
        break;
  
      case 20:
        _readFC20(data, transaction.next);
  
        break;
  
      case 43:
        // read device identification
        _readFC43(data, modbus, next);
  
    }
  }
  /**
   * Handle SerialPort errors.
   *
   * @param {Error} error The error received
   * @private
   */
  
  
  function _onError(e) {
    var err = new SerialPortError();
    err.message = e.message;
    err.stack = e.stack;
    this.emit("error", err);
  }
  /**
   * Class making ModbusRTU calls fun and easy.
   *
   * @param {SerialPort} port the serial port to use.
   */
  
  
  var ModbusRTU = function ModbusRTU(port) {
    // the serial port to use
    this._port = port; // state variables
  
    this._transactions = {};
    this._timeout = null; // timeout in msec before unanswered request throws timeout error
  
    this._unitID = 1; // Flag to indicate whether debug mode (pass-through of raw
    // request/response) is enabled.
  
    this._debugEnabled = false;
    this._onReceive = _onReceive.bind(this);
    this._onError = _onError.bind(this);
    EventEmitter.call(this);
  };
  
  util.inherits(ModbusRTU, EventEmitter);
  /**
   * Open the serial port and register Modbus parsers
   *
   * @param {Function} callback the function to call next on open success
   *      of failure.
   */
  
  ModbusRTU.prototype.open = function (callback) {
    var modbus = this; // open the serial port
  
    modbus._port.open(function (error) {
      if (error) {
        modbusSerialDebug({
          action: "port open error",
          error: error
        });
        /* On serial port open error call next function */
  
        if (callback) callback(error);
      } else {
        /* init ports transaction id and counter */
        modbus._port._transactionIdRead = 1;
        modbus._port._transactionIdWrite = 1;
        /* On serial port success
         * (re-)register the modbus parser functions
         */
  
        modbus._port.removeListener("data", modbus._onReceive);
  
        modbus._port.on("data", modbus._onReceive);
        /* On serial port error
         * (re-)register the error listner function
         */
  
  
        modbus._port.removeListener("error", modbus._onError);
  
        modbus._port.on("error", modbus._onError);
        /* Hook the close event so we can relay it to our callers. */
  
  
        modbus._port.once("close", modbus.emit.bind(modbus, "close"));
        /* On serial port open OK call next function with no error */
  
  
        if (callback) callback(error);
      }
    });
  };
  /**
   * Check if port debug mode is enabled
   */
  
  
  Object.defineProperty(ModbusRTU.prototype, "isDebugEnabled", {
    enumerable: true,
    get: function get() {
      return this._debugEnabled;
    },
    set: function set(enable) {
      enable = Boolean(enable);
      this._debugEnabled = enable;
    }
  });
  /**
   * Check if port is open
   */
  
  Object.defineProperty(ModbusRTU.prototype, "isOpen", {
    enumerable: true,
    get: function get() {
      if (this._port) {
        return this._port.isOpen;
      }
  
      return false;
    }
  });
  /**
   * Close the serial port
   *
   * @param {Function} callback the function to call next on close success
   *      or failure.
   */
  
  ModbusRTU.prototype.close = function (callback) {
    // close the serial port if exist
    if (this._port) {
      this._port.removeAllListeners("data");
  
      this._port.close(callback);
    } else {
      // nothing needed to be done
      callback();
    }
  };
  /**
   * Destory the serial port
   *
   * @param {Function} callback the function to call next on close success
   *      or failure.
   */
  
  
  ModbusRTU.prototype.destroy = function (callback) {
    // close the serial port if exist and it has a destroy function
    if (this._port && this._port.destroy) {
      this._port.removeAllListeners("data");
  
      this._port.destroy(callback);
    } else {
      // nothing needed to be done
      callback();
    }
  };
  /**
   * Write a Modbus "Read Coil Status" (FC=01) to serial port.
   *
   * @param {number} address the slave unit address.
   * @param {number} dataAddress the Data Address of the first coil.
   * @param {number} length the total number of coils requested.
   * @param {Function} next the function to call next.
   */
  
  
  ModbusRTU.prototype.writeFC1 = function (address, dataAddress, length, next) {
    this.writeFC2(address, dataAddress, length, next, 1);
  };
  /**
   * Write a Modbus "Read Input Status" (FC=02) to serial port.
   *
   * @param {number} address the slave unit address.
   * @param {number} dataAddress the Data Address of the first digital input.
   * @param {number} length the total number of digital inputs requested.
   * @param {Function} next the function to call next.
   */
  
  
  ModbusRTU.prototype.writeFC2 = function (address, dataAddress, length, next, code) {
    // check port is actually open before attempting write
    if (this.isOpen !== true) {
      if (next) next(new PortNotOpenError());
      return;
    } // sanity check
  
  
    if (typeof address === "undefined" || typeof dataAddress === "undefined") {
      if (next) next(new BadAddressError());
      return;
    } // function code defaults to 2
  
  
    code = code || 2; // set state variables
  
    this._transactions[this._port._transactionIdWrite] = {
      nextAddress: address,
      nextCode: code,
      nextLength: 3 + parseInt((length - 1) / 8 + 1) + 2,
      next: next
    };
    var codeLength = 6;
    var buf = Buffer.alloc(codeLength + 2); // add 2 crc bytes
  
    buf.writeUInt8(address, 0);
    buf.writeUInt8(code, 1);
    buf.writeUInt16BE(dataAddress, 2);
    buf.writeUInt16BE(length, 4); // add crc bytes to buffer
  
    buf.writeUInt16LE(crc16(buf.slice(0, -2)), codeLength); // write buffer to serial port
  
    _writeBufferToPort.call(this, buf, this._port._transactionIdWrite);
  };
  /**
   * Write a Modbus "Read Holding Registers" (FC=03) to serial port.
   *
   * @param {number} address the slave unit address.
   * @param {number} dataAddress the Data Address of the first register.
   * @param {number} length the total number of registers requested.
   * @param {Function} next the function to call next.
   */
  
  
  ModbusRTU.prototype.writeFC3 = function (address, dataAddress, length, next) {
    this.writeFC4(address, dataAddress, length, next, 3);
  };
  /**
   * Write a Modbus "Read Input Registers" (FC=04) to serial port.
   *
   * @param {number} address the slave unit address.
   * @param {number} dataAddress the Data Address of the first register.
   * @param {number} length the total number of registers requested.
   * @param {Function} next the function to call next.
   */
  
  
  ModbusRTU.prototype.writeFC4 = function (address, dataAddress, length, next, code) {
    // check port is actually open before attempting write
    if (this.isOpen !== true) {
      if (next) next(new PortNotOpenError());
      return;
    } // sanity check
  
  
    if (typeof address === "undefined" || typeof dataAddress === "undefined") {
      if (next) next(new BadAddressError());
      return;
    } // function code defaults to 4
  
  
    code = code || 4; // set state variables
  
    this._transactions[this._port._transactionIdWrite] = {
      nextAddress: address,
      nextCode: code,
      nextLength: 3 + 2 * length + 2,
      next: next
    };
    var codeLength = 6;
    var buf = Buffer.alloc(codeLength + 2); // add 2 crc bytes
  
    buf.writeUInt8(address, 0);
    buf.writeUInt8(code, 1);
    buf.writeUInt16BE(dataAddress, 2);
    buf.writeUInt16BE(length, 4); // add crc bytes to buffer
  
    buf.writeUInt16LE(crc16(buf.slice(0, -2)), codeLength); // write buffer to serial port
  
    _writeBufferToPort.call(this, buf, this._port._transactionIdWrite);
  };
  /**
   * Write a Modbus "Force Single Coil" (FC=05) to serial port.
   *
   * @param {number} address the slave unit address.
   * @param {number} dataAddress the Data Address of the coil.
   * @param {number} state the boolean state to write to the coil (true / false).
   * @param {Function} next the function to call next.
   */
  
  
  ModbusRTU.prototype.writeFC5 = function (address, dataAddress, state, next) {
    // check port is actually open before attempting write
    if (this.isOpen !== true) {
      if (next) next(new PortNotOpenError());
      return;
    } // sanity check
  
  
    if (typeof address === "undefined" || typeof dataAddress === "undefined") {
      if (next) next(new BadAddressError());
      return;
    }
  
    var code = 5; // set state variables
  
    this._transactions[this._port._transactionIdWrite] = {
      nextAddress: address,
      nextCode: code,
      nextLength: 8,
      next: next
    };
    var codeLength = 6;
    var buf = Buffer.alloc(codeLength + 2); // add 2 crc bytes
  
    buf.writeUInt8(address, 0);
    buf.writeUInt8(code, 1);
    buf.writeUInt16BE(dataAddress, 2);
  
    if (state) {
      buf.writeUInt16BE(0xff00, 4);
    } else {
      buf.writeUInt16BE(0x0000, 4);
    } // add crc bytes to buffer
  
  
    buf.writeUInt16LE(crc16(buf.slice(0, -2)), codeLength); // write buffer to serial port
  
    _writeBufferToPort.call(this, buf, this._port._transactionIdWrite);
  };
  /**
   * Write a Modbus "Preset Single Register " (FC=6) to serial port.
   *
   * @param {number} address the slave unit address.
   * @param {number} dataAddress the Data Address of the register.
   * @param {number} value the value to write to the register.
   * @param {Function} next the function to call next.
   */
  
  
  ModbusRTU.prototype.writeFC6 = function (address, dataAddress, value, next) {
    // check port is actually open before attempting write
    if (this.isOpen !== true) {
      if (next) next(new PortNotOpenError());
      return;
    } // sanity check
  
  
    if (typeof address === "undefined" || typeof dataAddress === "undefined") {
      if (next) next(new BadAddressError());
      return;
    }
  
    var code = 6; // set state variables
  
    this._transactions[this._port._transactionIdWrite] = {
      nextAddress: address,
      nextCode: code,
      nextLength: 8,
      next: next
    };
    var codeLength = 6; // 1B deviceAddress + 1B functionCode + 2B dataAddress + 2B value
  
    var buf = Buffer.alloc(codeLength + 2); // add 2 crc bytes
  
    buf.writeUInt8(address, 0);
    buf.writeUInt8(code, 1);
    buf.writeUInt16BE(dataAddress, 2);
  
    if (Buffer.isBuffer(value)) {
      value.copy(buf, 4);
    } else {
      buf.writeUInt16BE(value, 4);
    } // add crc bytes to buffer
  
  
    buf.writeUInt16LE(crc16(buf.slice(0, -2)), codeLength); // write buffer to serial port
  
    _writeBufferToPort.call(this, buf, this._port._transactionIdWrite);
  };
  /**
   * Write a Modbus "Force Multiple Coils" (FC=15) to serial port.
   *
   * @param {number} address the slave unit address.
   * @param {number} dataAddress the Data Address of the first coil.
   * @param {Array} array the array of boolean states to write to coils.
   * @param {Function} next the function to call next.
   */
  
  
  ModbusRTU.prototype.writeFC15 = function (address, dataAddress, array, next) {
    // check port is actually open before attempting write
    if (this.isOpen !== true) {
      if (next) next(new PortNotOpenError());
      return;
    } // sanity check
  
  
    if (typeof address === "undefined" || typeof dataAddress === "undefined") {
      if (next) next(new BadAddressError());
      return;
    }
  
    var code = 15;
    var i = 0; // set state variables
  
    this._transactions[this._port._transactionIdWrite] = {
      nextAddress: address,
      nextCode: code,
      nextLength: 8,
      next: next
    };
    var dataBytes = Math.ceil(array.length / 8);
    var codeLength = 7 + dataBytes;
    var buf = Buffer.alloc(codeLength + 2); // add 2 crc bytes
  
    buf.writeUInt8(address, 0);
    buf.writeUInt8(code, 1);
    buf.writeUInt16BE(dataAddress, 2);
    buf.writeUInt16BE(array.length, 4);
    buf.writeUInt8(dataBytes, 6); // clear the data bytes before writing bits data
  
    for (i = 0; i < dataBytes; i++) {
      buf.writeUInt8(0, 7 + i);
    }
  
    for (i = 0; i < array.length; i++) {
      // buffer bits are already all zero (0)
      // only set the ones set to one (1)
      if (array[i]) {
        buf.writeBit(1, i, 7);
      }
    } // add crc bytes to buffer
  
  
    buf.writeUInt16LE(crc16(buf.slice(0, -2)), codeLength); // write buffer to serial port
  
    _writeBufferToPort.call(this, buf, this._port._transactionIdWrite);
  };
  /**
   * Write a Modbus "Preset Multiple Registers" (FC=16) to serial port.
   *
   * @param {number} address the slave unit address.
   * @param {number} dataAddress the Data Address of the first register.
   * @param {Array} array the array of values to write to registers.
   * @param {Function} next the function to call next.
   */
  
  
  ModbusRTU.prototype.writeFC16 = function (address, dataAddress, array, next) {
    // check port is actually open before attempting write
    if (this.isOpen !== true) {
      if (next) next(new PortNotOpenError());
      return;
    } // sanity check
  
  
    if (typeof address === "undefined" || typeof dataAddress === "undefined") {
      if (next) next(new BadAddressError());
      return;
    }
  
    var code = 16; // set state variables
  
    this._transactions[this._port._transactionIdWrite] = {
      nextAddress: address,
      nextCode: code,
      nextLength: 8,
      next: next
    };
    var dataLength = array.length;
  
    if (Buffer.isBuffer(array)) {
      // if array is a buffer it has double length
      dataLength = array.length / 2;
    }
  
    var codeLength = 7 + 2 * dataLength;
    var buf = Buffer.alloc(codeLength + 2); // add 2 crc bytes
  
    buf.writeUInt8(address, 0);
    buf.writeUInt8(code, 1);
    buf.writeUInt16BE(dataAddress, 2);
    buf.writeUInt16BE(dataLength, 4);
    buf.writeUInt8(dataLength * 2, 6); // copy content of array to buf
  
    if (Buffer.isBuffer(array)) {
      array.copy(buf, 7);
    } else {
      for (var i = 0; i < dataLength; i++) {
        buf.writeUInt16BE(array[i], 7 + 2 * i);
      }
    } // add crc bytes to buffer
  
  
    buf.writeUInt16LE(crc16(buf.slice(0, -2)), codeLength); // write buffer to serial port
  
    _writeBufferToPort.call(this, buf, this._port._transactionIdWrite);
  };
  /**
   * Write  mODBUS "Read Device Identification" (FC=20) to serial port
   * @param {number} address the slave unit address.
   * @param {Function} next;
   */
  
  
  ModbusRTU.prototype.writeFC20 = function (address, fileNumber, recordNumber, next) {
    if (this.isOpen !== true) {
      if (next) next(new PortNotOpenError());
      return;
    } // sanity check
  
  
    if (typeof address === "undefined") {
      if (next) next(new BadAddressError());
      return;
    } // function code defaults to 20
  
  
    var code = 20;
    var codeLength = 10;
    var byteCount = 7;
    var chunck = 100;
    this._transactions[this._port._transactionIdWrite] = {
      nextAddress: address,
      nextCode: code,
      lengthUnknown: true,
      next: next
    };
    var buf = Buffer.alloc(codeLength + 2); // add 2 crc bytes
  
    buf.writeUInt8(address, 0);
    buf.writeUInt8(code, 1);
    buf.writeUInt8(byteCount, 2);
    buf.writeUInt8(6, 3); // ReferenceType
  
    buf.writeUInt16BE(fileNumber, 4);
    buf.writeUInt16BE(recordNumber, 6);
    buf.writeUInt8(chunck, 9);
    buf.writeUInt16LE(crc16(buf.slice(0, -2)), codeLength);
  
    _writeBufferToPort.call(this, buf, this._port._transactionIdWrite);
  };
  /**
   * Write a Modbus "Read Device Identification" (FC=43) to serial port.
   *
   * @param {number} address the slave unit address.
   * @param {number} deviceIdCode the read device access code.
   * @param {number} objectId the array of values to write to registers.
   * @param {Function} next the function to call next.
   */
  
  
  ModbusRTU.prototype.writeFC43 = function (address, deviceIdCode, objectId, next) {
    // check port is actually open before attempting write
    if (this.isOpen !== true) {
      if (next) next(new PortNotOpenError());
      return;
    }
  
    var code = 0x2B; // 43
    // set state variables
  
    this._transactions[this._port._transactionIdWrite] = {
      nextAddress: address,
      nextCode: code,
      lengthUnknown: true,
      next: next
    };
    var codeLength = 5;
    var buf = Buffer.alloc(codeLength + 2); // add 2 crc bytes
  
    buf.writeUInt8(address, 0);
    buf.writeUInt8(code, 1);
    buf.writeUInt8(0x0E, 2); // 16 MEI Type
  
    buf.writeUInt8(deviceIdCode, 3);
    buf.writeUInt8(objectId, 4); // add crc bytes to buffer
  
    buf.writeUInt16LE(crc16(buf.slice(0, -2)), codeLength); // write buffer to serial port
  
    _writeBufferToPort.call(this, buf, this._port._transactionIdWrite);
  }; // add the connection shorthand API
  
  
  __webpack_require__(8368)(ModbusRTU); // add the promise API
  
  
  __webpack_require__(1933)(ModbusRTU); // add worker API
  
  
  __webpack_require__(3429)(ModbusRTU); // exports
  
  
  module.exports = ModbusRTU;
  module.exports.TestPort = __webpack_require__(1626);
  
  try {
    module.exports.RTUBufferedPort = __webpack_require__(4669);
  } catch (err) {}
  
  module.exports.TcpPort = __webpack_require__(5192);
  module.exports.TcpRTUBufferedPort = __webpack_require__(8997);
  module.exports.TelnetPort = __webpack_require__(450);
  module.exports.C701Port = __webpack_require__(5840);
  module.exports.ServerTCP = __webpack_require__(2353);
  module.exports["default"] = module.exports;
  
  /***/ }),
  
  /***/ 6100:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  
  /* eslint-disable no-ternary */
  
  var util = __webpack_require__(7440);
  
  var events = __webpack_require__(3359);
  
  var EventEmitter = events.EventEmitter || events;
  
  var SerialPort = __webpack_require__(1135);
  
  var modbusSerialDebug = __webpack_require__(1837)("modbus-serial");
  
  var crc16 = __webpack_require__(3973);
  
  var calculateLrc = __webpack_require__(3326);
  /* TODO: const should be set once, maybe */
  
  
  var MIN_DATA_LENGTH = 6;
  /**
   * Ascii encode a 'request' buffer and return it. This includes removing
   * the CRC bytes and replacing them with an LRC.
   *
   * @param {Buffer} buf the data buffer to encode.
   * @return {Buffer} the ascii encoded buffer
   * @private
   */
  
  function _asciiEncodeRequestBuffer(buf) {
    // replace the 2 byte crc16 with a single byte lrc
    buf.writeUInt8(calculateLrc(buf.slice(0, -2)), buf.length - 2); // create a new buffer of the correct size
  
    var bufAscii = Buffer.alloc(buf.length * 2 + 1); // 1 byte start delimit + x2 data as ascii encoded + 2 lrc + 2 end delimit
    // create the ascii payload
    // start with the single start delimiter
  
    bufAscii.write(":", 0); // encode the data, with the new single byte lrc
  
    bufAscii.write(buf.toString("hex", 0, buf.length - 1).toUpperCase(), 1); // end with the two end delimiters
  
    bufAscii.write("\r", bufAscii.length - 2);
    bufAscii.write("\n", bufAscii.length - 1);
    return bufAscii;
  }
  /**
   * Ascii decode a 'response' buffer and return it.
   *
   * @param {Buffer} bufAscii the ascii data buffer to decode.
   * @return {Buffer} the decoded buffer, or null if decode error
   * @private
   */
  
  
  function _asciiDecodeResponseBuffer(bufAscii) {
    // create a new buffer of the correct size (based on ascii encoded buffer length)
    var bufDecoded = Buffer.alloc((bufAscii.length - 1) / 2); // decode into new buffer (removing delimiters at start and end)
  
    for (var i = 0; i < (bufAscii.length - 3) / 2; i++) {
      bufDecoded.write(String.fromCharCode(bufAscii.readUInt8(i * 2 + 1), bufAscii.readUInt8(i * 2 + 2)), i, 1, "hex");
    } // check the lrc is true
  
  
    var lrcIn = bufDecoded.readUInt8(bufDecoded.length - 2);
  
    if (calculateLrc(bufDecoded.slice(0, -2)) !== lrcIn) {
      // return null if lrc error
      var calcLrc = calculateLrc(bufDecoded.slice(0, -2));
      modbusSerialDebug({
        action: "LRC error",
        LRC: lrcIn.toString(16),
        calcLRC: calcLrc.toString(16)
      });
      return null;
    } // replace the 1 byte lrc with a two byte crc16
  
  
    bufDecoded.writeUInt16LE(crc16(bufDecoded.slice(0, -2)), bufDecoded.length - 2);
    return bufDecoded;
  }
  /**
   * check if a buffer chunk can be a modbus answer
   * or modbus exception
   *
   * @param {AsciiPort} modbus
   * @param {Buffer} buf the buffer to check.
   * @return {boolean} if the buffer can be an answer
   * @private
   */
  
  
  function _checkData(modbus, buf) {
    // check buffer size
    if (buf.length !== modbus._length && buf.length !== 5) {
      modbusSerialDebug({
        action: "length error",
        recive: buf.length,
        expected: modbus._length
      });
      return false;
    } // check buffer unit-id and command
  
  
    return buf[0] === modbus._id && (0x7f & buf[1]) === modbus._cmd;
  }
  /**
   * Simulate a modbus-ascii port using serial connection.
   *
   * @param path
   * @param options
   * @constructor
   */
  
  
  var AsciiPort = function AsciiPort(path, options) {
    var modbus = this; // options
  
    options = options || {}; // select char for start of slave frame (usually :)
  
    this._startOfSlaveFrameChar = options.startOfSlaveFrameChar === undefined ? 0x3A : options.startOfSlaveFrameChar; // disable auto open, as we handle the open
  
    options.autoOpen = false; // internal buffer
  
    this._buffer = Buffer.from("");
    this._id = 0;
    this._cmd = 0;
    this._length = 0; // create the SerialPort
  
    this._client = new SerialPort(path, options); // register the port data event
  
    this._client.on("data", function (data) {
      // add new data to buffer
      modbus._buffer = Buffer.concat([modbus._buffer, data]);
      modbusSerialDebug({
        action: "receive serial ascii port",
        data: data,
        buffer: modbus._buffer
      });
      modbusSerialDebug(JSON.stringify({
        action: "receive serial ascii port strings",
        data: data,
        buffer: modbus._buffer
      })); // check buffer for start delimiter
  
      var sdIndex = modbus._buffer.indexOf(modbus._startOfSlaveFrameChar);
  
      if (sdIndex === -1) {
        // if not there, reset the buffer and return
        modbus._buffer = Buffer.from("");
        return;
      } // if there is data before the start delimiter, remove it
  
  
      if (sdIndex > 0) {
        modbus._buffer = modbus._buffer.slice(sdIndex);
      } // do we have the complete message (i.e. are the end delimiters there)
  
  
      if (modbus._buffer.includes("\r\n", 1, "ascii") === true) {
        // check there is no excess data after end delimiters
        var edIndex = modbus._buffer.indexOf(0x0A); // ascii for '\n'
  
  
        if (edIndex !== modbus._buffer.length - 1) {
          // if there is, remove it
          modbus._buffer = modbus._buffer.slice(0, edIndex + 1);
        } // we have what looks like a complete ascii encoded response message, so decode
  
  
        var _data = _asciiDecodeResponseBuffer(modbus._buffer);
  
        modbusSerialDebug({
          action: "got EOM",
          data: _data,
          buffer: modbus._buffer
        });
  
        if (_data !== null) {
          // check if this is the data we are waiting for
          if (_checkData(modbus, _data)) {
            modbusSerialDebug({
              action: "emit data serial ascii port",
              data: data,
              buffer: modbus._buffer
            });
            modbusSerialDebug(JSON.stringify({
              action: "emit data serial ascii port strings",
              data: data,
              buffer: modbus._buffer
            })); // emit a data signal
  
            modbus.emit("data", _data);
          }
        } // reset the buffer now its been used
  
  
        modbus._buffer = Buffer.from("");
      } else {// otherwise just wait for more data to arrive
      }
    });
    /**
     * Check if port is open.
     *
     * @returns {boolean}
     */
  
  
    Object.defineProperty(this, "isOpen", {
      enumerable: true,
      get: function get() {
        return this._client.isOpen;
      }
    });
    EventEmitter.call(this);
  };
  
  util.inherits(AsciiPort, EventEmitter);
  /**
   * Simulate successful port open.
   *
   * @param callback
   */
  
  AsciiPort.prototype.open = function (callback) {
    this._client.open(callback);
  };
  /**
   * Simulate successful close port.
   *
   * @param callback
   */
  
  
  AsciiPort.prototype.close = function (callback) {
    this._client.close(callback);
  
    this.removeAllListeners();
  };
  /**
   * Send data to a modbus slave.
   *
   * @param data
   */
  
  
  AsciiPort.prototype.write = function (data) {
    if (data.length < MIN_DATA_LENGTH) {
      modbusSerialDebug("expected length of data is to small - minimum is " + MIN_DATA_LENGTH);
      return;
    }
  
    var length = null; // remember current unit and command
  
    this._id = data[0];
    this._cmd = data[1]; // calculate expected answer length (this is checked after ascii decoding)
  
    switch (this._cmd) {
      case 1:
      case 2:
        length = data.readUInt16BE(4);
        this._length = 3 + parseInt((length - 1) / 8 + 1) + 2;
        break;
  
      case 3:
      case 4:
        length = data.readUInt16BE(4);
        this._length = 3 + 2 * length + 2;
        break;
  
      case 5:
      case 6:
      case 15:
      case 16:
        this._length = 6 + 2;
        break;
  
      default:
        // raise and error ?
        modbusSerialDebug({
          action: "unknown command",
          id: this._id.toString(16),
          command: this._cmd.toString(16)
        });
        this._length = 0;
        break;
    } // ascii encode buffer
  
  
    var _encodedData = _asciiEncodeRequestBuffer(data); // send buffer to slave
  
  
    this._client.write(_encodedData);
  
    modbusSerialDebug({
      action: "send serial ascii port",
      data: _encodedData,
      unitid: this._id,
      functionCode: this._cmd
    });
    modbusSerialDebug(JSON.stringify({
      action: "send serial ascii port",
      data: _encodedData,
      unitid: this._id,
      functionCode: this._cmd
    }));
  };
  /**
   * ASCII port for Modbus.
   *
   * @type {AsciiPort}
   */
  
  
  module.exports = AsciiPort;
  
  /***/ }),
  
  /***/ 5840:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  
  
  var util = __webpack_require__(7440);
  
  var events = __webpack_require__(3359);
  
  var EventEmitter = events.EventEmitter || events;
  
  var dgram = __webpack_require__(9754);
  
  var modbusSerialDebug = __webpack_require__(1837)("modbus-serial");
  
  var crc16 = __webpack_require__(3973);
  /* TODO: const should be set once, maybe */
  
  
  var MIN_DATA_LENGTH = 6;
  var C701_PORT = 0x7002;
  /**
   * Check if a buffer chunk can be a Modbus answer or modbus exception.
   *
   * @param {UdpPort} modbus
   * @param {Buffer} buf the buffer to check.
   * @return {boolean} if the buffer can be an answer
   * @private
   */
  
  function _checkData(modbus, buf) {
    // check buffer size
    if (buf.length !== modbus._length && buf.length !== 5) return false; // calculate crc16
  
    var crcIn = buf.readUInt16LE(buf.length - 2); // check buffer unit-id, command and crc
  
    return buf[0] === modbus._id && (0x7f & buf[1]) === modbus._cmd && crcIn === crc16(buf.slice(0, -2));
  }
  /**
   * Simulate a modbus-RTU port using C701 UDP-to-Serial bridge.
   *
   * @param ip
   * @param options
   * @constructor
   */
  
  
  var UdpPort = function UdpPort(ip, options) {
    var modbus = this;
    this.ip = ip;
    this.openFlag = false; // options
  
    if (typeof options === "undefined") options = {};
    this.port = options.port || C701_PORT; // C701 port
    // create a socket
  
    this._client = dgram.createSocket("udp4"); // wait for answer
  
    this._client.on("message", function (data) {
      var buffer = null; // check expected length
  
      if (modbus.length < 6) return; // check message length
  
      if (data.length < 116 + 5) return; // check the C701 packet magic
  
      if (data.readUInt16LE(2) !== 602) return; // check for modbus valid answer
      // get the serial data from the C701 packet
  
      buffer = data.slice(data.length - modbus._length);
      modbusSerialDebug({
        action: "receive c701 upd port",
        data: data,
        buffer: buffer
      });
      modbusSerialDebug(JSON.stringify({
        action: "receive c701 upd port strings",
        data: data,
        buffer: buffer
      })); // check the serial data
  
      if (_checkData(modbus, buffer)) {
        modbusSerialDebug({
          action: "emit data serial rtu buffered port",
          buffer: buffer
        });
        modbusSerialDebug(JSON.stringify({
          action: "emit data serial rtu buffered port strings",
          buffer: buffer
        }));
        modbus.emit("data", buffer);
      } else {
        // check for modbus exception
        // get the serial data from the C701 packet
        buffer = data.slice(data.length - 5); // check the serial data
  
        if (_checkData(modbus, buffer)) {
          modbusSerialDebug({
            action: "emit data serial rtu buffered port",
            buffer: buffer
          });
          modbusSerialDebug(JSON.stringify({
            action: "emit data serial rtu buffered port strings",
            buffer: buffer
          }));
          modbus.emit("data", buffer);
        }
      }
    });
  
    this._client.on("listening", function () {
      modbus.openFlag = true;
    });
  
    this._client.on("close", function () {
      modbus.openFlag = false;
    });
    /**
     * Check if port is open.
     *
     * @returns {boolean}
     */
  
  
    Object.defineProperty(this, "isOpen", {
      enumerable: true,
      get: function get() {
        return this.openFlag;
      }
    });
    EventEmitter.call(this);
  };
  
  util.inherits(UdpPort, EventEmitter);
  /**
   * Simulate successful port open.
   *
   * @param callback
   */
  
  UdpPort.prototype.open = function (callback) {
    if (callback) callback(null);
  };
  /**
   * Simulate successful close port.
   *
   * @param callback
   */
  
  
  UdpPort.prototype.close = function (callback) {
    this._client.close();
  
    if (callback) callback(null);
  };
  /**
   * Send data to a modbus-tcp slave.
   *
   * @param data
   */
  
  
  UdpPort.prototype.write = function (data) {
    if (data.length < MIN_DATA_LENGTH) {
      modbusSerialDebug("expected length of data is to small - minimum is " + MIN_DATA_LENGTH);
      return;
    }
  
    var length = null; // remember current unit and command
  
    this._id = data[0];
    this._cmd = data[1]; // calculate expected answer length
  
    switch (this._cmd) {
      case 1:
      case 2:
        length = data.readUInt16BE(4);
        this._length = 3 + parseInt((length - 1) / 8 + 1) + 2;
        break;
  
      case 3:
      case 4:
        length = data.readUInt16BE(4);
        this._length = 3 + 2 * length + 2;
        break;
  
      case 5:
      case 6:
      case 15:
      case 16:
        this._length = 6 + 2;
        break;
  
      default:
        // raise and error ?
        this._length = 0;
        break;
    } // build C701 header
  
  
    var buffer = Buffer.alloc(data.length + 116);
    buffer.fill(0);
    buffer.writeUInt16LE(600, 2); // C701 magic for serial bridge
  
    buffer.writeUInt16LE(0, 36); // C701 RS485 connector (0..2)
  
    buffer.writeUInt16LE(this._length, 38); // expected serial answer length
  
    buffer.writeUInt16LE(1, 102); // C7011 RS481 hub (1..2)
  
    buffer.writeUInt16LE(data.length, 104); // serial data length
    // add serial line data
  
    data.copy(buffer, 116); // send buffer to C701 UDP to serial bridge
  
    this._client.send(buffer, 0, buffer.length, this.port, this.ip);
  
    modbusSerialDebug({
      action: "send c701 upd port",
      data: data,
      buffer: buffer,
      unitid: this._id,
      functionCode: this._cmd
    });
    modbusSerialDebug(JSON.stringify({
      action: "send c701 upd port strings",
      data: data,
      buffer: buffer,
      unitid: this._id,
      functionCode: this._cmd
    }));
  };
  /**
   * UDP port for Modbus.
   *
   * @type {UdpPort}
   */
  
  
  module.exports = UdpPort;
  
  /***/ }),
  
  /***/ 4669:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  
  
  var util = __webpack_require__(7440);
  
  var events = __webpack_require__(3359);
  
  var EventEmitter = events.EventEmitter || events;
  
  var SerialPort = __webpack_require__(1135);
  
  var modbusSerialDebug = __webpack_require__(1837)("modbus-serial");
  /* TODO: const should be set once, maybe */
  
  
  var EXCEPTION_LENGTH = 5;
  var MIN_DATA_LENGTH = 6;
  var MAX_BUFFER_LENGTH = 256;
  var CRC_LENGTH = 2;
  var READ_DEVICE_IDENTIFICATION_FUNCTION_CODE = 43;
  var LENGTH_UNKNOWN = "unknown";
  var BITS_TO_NUM_OF_OBJECTS = 7; // Helper function -> Bool
  // BIT | TYPE
  // 8 | OBJECTID
  // 9 | length of OBJECTID
  // 10 -> n | the object
  // 10 + n + 1 | new object id
  
  var calculateFC43Length = function calculateFC43Length(buffer, numObjects, i, bufferLength) {
    var result = {
      hasAllData: true
    };
    var currentByte = 8 + i; // current byte starts at object id.
  
    if (numObjects > 0) {
      for (var j = 0; j < numObjects; j++) {
        if (bufferLength < currentByte) {
          result.hasAllData = false;
          break;
        }
  
        var objLength = buffer[currentByte + 1];
  
        if (!objLength) {
          result.hasAllData = false;
          break;
        }
  
        currentByte += 2 + objLength;
      }
    }
  
    if (currentByte + CRC_LENGTH > bufferLength) {
      // still waiting on the CRC!
      result.hasAllData = false;
    }
  
    if (result.hasAllData) {
      result.bufLength = currentByte + CRC_LENGTH;
    }
  
    return result;
  };
  /**
   * Simulate a modbus-RTU port using buffered serial connection.
   *
   * @param path
   * @param options
   * @constructor
   */
  
  
  var RTUBufferedPort = function RTUBufferedPort(path, options) {
    var self = this; // options
  
    if (typeof options === "undefined") options = {}; // disable auto open, as we handle the open
  
    options.autoOpen = false; // internal buffer
  
    this._buffer = Buffer.alloc(0);
    this._id = 0;
    this._cmd = 0;
    this._length = 0; // create the SerialPort
  
    this._client = new SerialPort(path, options); // attach an error listner on the SerialPort object
  
    this._client.on("error", function (error) {
      self.emit("error", error);
    }); // register the port data event
  
  
    this._client.on("data", function onData(data) {
      // add data to buffer
      self._buffer = Buffer.concat([self._buffer, data]);
      modbusSerialDebug({
        action: "receive serial rtu buffered port",
        data: data,
        buffer: self._buffer
      }); // check if buffer include a complete modbus answer
  
      var expectedLength = self._length;
      var bufferLength = self._buffer.length; // check data length
  
      if (expectedLength !== LENGTH_UNKNOWN && expectedLength < MIN_DATA_LENGTH || bufferLength < EXCEPTION_LENGTH) {
        return;
      } // check buffer size for MAX_BUFFER_SIZE
  
  
      if (bufferLength > MAX_BUFFER_LENGTH) {
        self._buffer = self._buffer.slice(-MAX_BUFFER_LENGTH);
        bufferLength = MAX_BUFFER_LENGTH;
      } // loop and check length-sized buffer chunks
  
  
      var maxOffset = bufferLength - EXCEPTION_LENGTH;
  
      for (var i = 0; i <= maxOffset; i++) {
        var unitId = self._buffer[i];
        var functionCode = self._buffer[i + 1];
        if (unitId !== self._id) continue;
  
        if (functionCode === self._cmd && functionCode === READ_DEVICE_IDENTIFICATION_FUNCTION_CODE) {
          if (bufferLength <= BITS_TO_NUM_OF_OBJECTS + i) {
            return;
          }
  
          var numObjects = self._buffer[7 + i];
          var result = calculateFC43Length(self._buffer, numObjects, i, bufferLength);
  
          if (result.hasAllData) {
            self._emitData(i, result.bufLength);
  
            return;
          }
        } else {
          if (functionCode === self._cmd && i + expectedLength <= bufferLength) {
            self._emitData(i, expectedLength);
  
            return;
          }
  
          if (functionCode === (0x80 | self._cmd) && i + EXCEPTION_LENGTH <= bufferLength) {
            self._emitData(i, EXCEPTION_LENGTH);
  
            return;
          }
        } // frame header matches, but still missing bytes pending
  
  
        if (functionCode === (0x7f & self._cmd)) break;
      }
    });
    /**
     * Check if port is open.
     *
     * @returns {boolean}
     */
  
  
    Object.defineProperty(this, "isOpen", {
      enumerable: true,
      get: function get() {
        return this._client.isOpen;
      }
    });
    EventEmitter.call(this);
  };
  
  util.inherits(RTUBufferedPort, EventEmitter);
  /**
   * Emit the received response, cut the buffer and reset the internal vars.
   *
   * @param {number} start The start index of the response within the buffer.
   * @param {number} length The length of the response.
   * @private
   */
  
  RTUBufferedPort.prototype._emitData = function (start, length) {
    var buffer = this._buffer.slice(start, start + length);
  
    modbusSerialDebug({
      action: "emit data serial rtu buffered port",
      buffer: buffer
    });
    this.emit("data", buffer);
    this._buffer = this._buffer.slice(start + length);
  };
  /**
   * Simulate successful port open.
   *
   * @param callback
   */
  
  
  RTUBufferedPort.prototype.open = function (callback) {
    this._client.open(callback);
  };
  /**
   * Simulate successful close port.
   *
   * @param callback
   */
  
  
  RTUBufferedPort.prototype.close = function (callback) {
    this._client.close(callback);
  
    this.removeAllListeners("data");
  };
  /**
   * Send data to a modbus slave.
   *
   * @param {Buffer} data
   */
  
  
  RTUBufferedPort.prototype.write = function (data) {
    if (data.length < MIN_DATA_LENGTH) {
      modbusSerialDebug("expected length of data is to small - minimum is " + MIN_DATA_LENGTH);
      return;
    }
  
    var length = null; // remember current unit and command
  
    this._id = data[0];
    this._cmd = data[1]; // calculate expected answer length
  
    switch (this._cmd) {
      case 1:
      case 2:
        length = data.readUInt16BE(4);
        this._length = 3 + parseInt((length - 1) / 8 + 1) + 2;
        break;
  
      case 3:
      case 4:
        length = data.readUInt16BE(4);
        this._length = 3 + 2 * length + 2;
        break;
  
      case 5:
      case 6:
      case 15:
      case 16:
        this._length = 6 + 2;
        break;
  
      case 43:
        // this function is super special
        // you know the format of the code response
        // and you need to continuously check that all of the data has arrived before emitting
        // see onData for more info.
        this._length = LENGTH_UNKNOWN;
        break;
  
      default:
        // raise and error ?
        this._length = 0;
        break;
    } // send buffer to slave
  
  
    this._client.write(data);
  
    modbusSerialDebug({
      action: "send serial rtu buffered",
      data: data,
      unitid: this._id,
      functionCode: this._cmd,
      length: this._length
    });
  };
  /**
   * RTU buffered port for Modbus.
   *
   * @type {RTUBufferedPort}
   */
  
  
  module.exports = RTUBufferedPort;
  
  /***/ }),
  
  /***/ 5192:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  var util = __webpack_require__(7440);
  
  var events = __webpack_require__(3359);
  
  var EventEmitter = events.EventEmitter || events;
  
  var net = __webpack_require__(7009);
  
  var modbusSerialDebug = __webpack_require__(1837)("modbus-serial");
  
  var crc16 = __webpack_require__(3973);
  /* TODO: const should be set once, maybe */
  
  
  var MODBUS_PORT = 502; // modbus port
  
  var MAX_TRANSACTIONS = 256; // maximum transaction to wait for
  
  var MIN_DATA_LENGTH = 6;
  var MIN_MBAP_LENGTH = 6;
  var CRC_LENGTH = 2;
  /**
   * Simulate a modbus-RTU port using modbus-TCP connection.
   *
   * @param ip
   * @param options
   *   options.port: Nonstandard Modbus port (default is 502).
   *   options.localAddress: Local IP address to bind to, default is any.
   *   options.family: 4 = IPv4-only, 6 = IPv6-only, 0 = either (default).
   * @constructor
   */
  
  var TcpPort = function TcpPort(ip, options) {
    var modbus = this;
    this.openFlag = false;
    this.callback = null;
    this._transactionIdWrite = 1;
    this._externalSocket = null;
  
    if (_typeof(ip) === "object") {
      options = ip;
    }
  
    if (typeof options === "undefined") options = {};
    this.connectOptions = {
      host: ip || options.ip,
      port: options.port || MODBUS_PORT,
      localAddress: options.localAddress,
      family: options.family
    };
  
    if (options.socket) {
      if (options.socket instanceof net.Socket) {
        this._externalSocket = options.socket;
        this.openFlag = this._externalSocket.readyState === "opening" || this._externalSocket.readyState === "open";
      } else {
        throw new Error("invalid socket provided");
      }
    } // handle callback - call a callback function only once, for the first event
    // it will triger
  
  
    var handleCallback = function handleCallback(had_error) {
      if (modbus.callback) {
        modbus.callback(had_error);
        modbus.callback = null;
      }
    }; // init a socket
  
  
    this._client = this._externalSocket || new net.Socket();
    if (options.timeout) this._client.setTimeout(options.timeout);
  
    this._client.on("data", function (data) {
      var buffer;
      var crc;
      var length; // data recived
  
      modbusSerialDebug({
        action: "receive tcp port strings",
        data: data
      }); // check data length
  
      while (data.length > MIN_MBAP_LENGTH) {
        // parse tcp header length
        length = data.readUInt16BE(4); // cut 6 bytes of mbap and copy pdu
  
        buffer = Buffer.alloc(length + CRC_LENGTH);
        data.copy(buffer, 0, MIN_MBAP_LENGTH); // add crc to message
  
        crc = crc16(buffer.slice(0, -CRC_LENGTH));
        buffer.writeUInt16LE(crc, buffer.length - CRC_LENGTH); // update transaction id and emit data
  
        modbus._transactionIdRead = data.readUInt16BE(0);
        modbus.emit("data", buffer); // debug
  
        modbusSerialDebug({
          action: "parsed tcp port",
          buffer: buffer,
          transactionId: modbus._transactionIdRead
        }); // reset data
  
        data = data.slice(length + MIN_MBAP_LENGTH);
      }
    });
  
    this._client.on("connect", function () {
      modbus.openFlag = true;
      modbusSerialDebug("TCP port: signal connect");
      handleCallback();
    });
  
    this._client.on("close", function (had_error) {
      modbus.openFlag = false;
      modbusSerialDebug("TCP port: signal close: " + had_error);
      handleCallback(had_error);
      modbus.emit("close");
      modbus.removeAllListeners();
    });
  
    this._client.on("error", function (had_error) {
      modbus.openFlag = false;
      modbusSerialDebug("TCP port: signal error: " + had_error);
      handleCallback(had_error);
    });
  
    this._client.on("timeout", function () {
      // modbus.openFlag is left in its current state as it reflects two types of timeouts,
      // i.e. 'false' for "TCP connection timeout" and 'true' for "Modbus response timeout"
      // (this allows to continue Modbus request re-tries without reconnecting TCP).
      modbusSerialDebug("TCP port: TimedOut");
      handleCallback(new Error("TCP Connection Timed Out"));
    });
    /**
     * Check if port is open.
     *
     * @returns {boolean}
     */
  
  
    Object.defineProperty(this, "isOpen", {
      enumerable: true,
      get: function get() {
        return this.openFlag;
      }
    });
    EventEmitter.call(this);
  };
  
  util.inherits(TcpPort, EventEmitter);
  /**
   * Simulate successful port open.
   *
   * @param callback
   */
  
  TcpPort.prototype.open = function (callback) {
    if (this._externalSocket === null) {
      this.callback = callback;
  
      this._client.connect(this.connectOptions);
    } else if (this.openFlag) {
      modbusSerialDebug("TCP port: external socket is opened");
      callback(); // go ahead to setup existing socket
    } else {
      callback(new Error("TCP port: external socket is not opened"));
    }
  };
  /**
   * Simulate successful close port.
   *
   * @param callback
   */
  
  
  TcpPort.prototype.close = function (callback) {
    this.callback = callback; // DON'T pass callback to `end()` here, it will be handled by client.on('close') handler
  
    this._client.end();
  
    this.removeAllListeners();
  };
  /**
   * Simulate successful destroy port.
   *
   * @param callback
   */
  
  
  TcpPort.prototype.destroy = function (callback) {
    this.callback = callback;
  
    if (!this._client.destroyed) {
      this._client.destroy();
    }
  };
  /**
   * Send data to a modbus-tcp slave.
   *
   * @param data
   */
  
  
  TcpPort.prototype.write = function (data) {
    if (data.length < MIN_DATA_LENGTH) {
      modbusSerialDebug("expected length of data is to small - minimum is " + MIN_DATA_LENGTH);
      return;
    } // remember current unit and command
  
  
    this._id = data[0];
    this._cmd = data[1]; // remove crc and add mbap
  
    var buffer = Buffer.alloc(data.length + MIN_MBAP_LENGTH - CRC_LENGTH);
    buffer.writeUInt16BE(this._transactionIdWrite, 0);
    buffer.writeUInt16BE(0, 2);
    buffer.writeUInt16BE(data.length - CRC_LENGTH, 4);
    data.copy(buffer, MIN_MBAP_LENGTH);
    modbusSerialDebug({
      action: "send tcp port",
      data: data,
      buffer: buffer,
      unitid: this._id,
      functionCode: this._cmd,
      transactionsId: this._transactionIdWrite
    }); // send buffer to slave
  
    this._client.write(buffer); // set next transaction id
  
  
    this._transactionIdWrite = (this._transactionIdWrite + 1) % MAX_TRANSACTIONS;
  };
  /**
   * TCP port for Modbus.
   *
   * @type {TcpPort}
   */
  
  
  module.exports = TcpPort;
  
  /***/ }),
  
  /***/ 8997:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  var util = __webpack_require__(7440);
  
  var events = __webpack_require__(3359);
  
  var EventEmitter = events.EventEmitter || events;
  
  var net = __webpack_require__(7009);
  
  var modbusSerialDebug = __webpack_require__(1837)("modbus-serial");
  
  var crc16 = __webpack_require__(3973);
  /* TODO: const should be set once, maybe */
  
  
  var EXCEPTION_LENGTH = 3;
  var MIN_DATA_LENGTH = 6;
  var MIN_MBAP_LENGTH = 6;
  var MAX_TRANSACTIONS = 64; // maximum transaction to wait for
  
  var MAX_BUFFER_LENGTH = 256;
  var CRC_LENGTH = 2;
  var MODBUS_PORT = 502;
  /**
   * Simulate a modbus-RTU port using TCP connection
   * @module TcpRTUBufferedPort
   *
   * @param {string} ip - ip address
   * @param {object} options - all options as JSON object
   *   options.port: Nonstandard Modbus port (default is 502).
   *   options.localAddress: Local IP address to bind to, default is any.
   *   options.family: 4 = IPv4-only, 6 = IPv6-only, 0 = either (default).
   * @constructor
   */
  
  var TcpRTUBufferedPort = function TcpRTUBufferedPort(ip, options) {
    var modbus = this;
    modbus.openFlag = false;
    modbus.callback = null;
    modbus._transactionIdWrite = 1;
    this._externalSocket = null; // options
  
    if (_typeof(ip) === "object") {
      options = ip;
    }
  
    if (typeof options === "undefined") options = {};
    modbus.connectOptions = {
      host: ip || options.ip,
      port: options.port || MODBUS_PORT,
      localAddress: options.localAddress,
      family: options.family || 0
    };
  
    if (options.socket) {
      if (options.socket instanceof net.Socket) {
        this._externalSocket = options.socket;
        this.openFlag = this._externalSocket.readyState === "opening" || this._externalSocket.readyState === "open";
      } else {
        throw new Error("invalid socket provided");
      }
    } // internal buffer
  
  
    modbus._buffer = Buffer.alloc(0); // handle callback - call a callback function only once, for the first event
    // it will triger
  
    var handleCallback = function handleCallback(had_error) {
      if (modbus.callback) {
        modbus.callback(had_error);
        modbus.callback = null;
      }
    }; // create a socket
  
  
    modbus._client = this._externalSocket || new net.Socket();
    if (options.timeout) this._client.setTimeout(options.timeout); // register the port data event
  
    modbus._client.on("data", function onData(data) {
      // add data to buffer
      modbus._buffer = Buffer.concat([modbus._buffer, data]);
      modbusSerialDebug({
        action: "receive tcp rtu buffered port",
        data: data,
        buffer: modbus._buffer
      }); // check if buffer include a complete modbus answer
  
      var bufferLength = modbus._buffer.length; // check data length
  
      if (bufferLength < MIN_MBAP_LENGTH) return; // check buffer size for MAX_BUFFER_SIZE
  
      if (bufferLength > MAX_BUFFER_LENGTH) {
        modbus._buffer = modbus._buffer.slice(-MAX_BUFFER_LENGTH);
        bufferLength = MAX_BUFFER_LENGTH;
      } // check data length
  
  
      if (bufferLength < MIN_MBAP_LENGTH + EXCEPTION_LENGTH) return; // loop and check length-sized buffer chunks
  
      var maxOffset = bufferLength - MIN_MBAP_LENGTH;
  
      for (var i = 0; i <= maxOffset; i++) {
        modbus._transactionIdRead = modbus._buffer.readUInt16BE(i);
  
        var protocolID = modbus._buffer.readUInt16BE(i + 2);
  
        var msgLength = modbus._buffer.readUInt16BE(i + 4);
  
        var cmd = modbus._buffer[i + 7];
        modbusSerialDebug({
          protocolID: protocolID,
          msgLength: msgLength,
          bufferLength: bufferLength,
          cmd: cmd
        });
  
        if (protocolID === 0 && cmd !== 0 && msgLength >= EXCEPTION_LENGTH && i + MIN_MBAP_LENGTH + msgLength <= bufferLength) {
          // add crc and emit
          modbus._emitData(i + MIN_MBAP_LENGTH, msgLength);
  
          return;
        }
      }
    });
  
    this._client.on("connect", function () {
      modbus.openFlag = true;
      handleCallback();
    });
  
    this._client.on("close", function (had_error) {
      modbus.openFlag = false;
      handleCallback(had_error);
      modbus.emit("close");
    });
  
    this._client.on("error", function (had_error) {
      modbus.openFlag = false;
      handleCallback(had_error);
    });
  
    this._client.on("timeout", function () {
      // modbus.openFlag is left in its current state as it reflects two types of timeouts,
      // i.e. 'false' for "TCP connection timeout" and 'true' for "Modbus response timeout"
      // (this allows to continue Modbus request re-tries without reconnecting TCP).
      modbusSerialDebug("TcpRTUBufferedPort port: TimedOut");
      handleCallback(new Error("TcpRTUBufferedPort Connection Timed Out"));
    });
    /**
     * Check if port is open.
     *
     * @returns {boolean}
     */
  
  
    Object.defineProperty(this, "isOpen", {
      enumerable: true,
      get: function get() {
        return this.openFlag;
      }
    });
    EventEmitter.call(this);
  };
  
  util.inherits(TcpRTUBufferedPort, EventEmitter);
  /**
   * Emit the received response, cut the buffer and reset the internal vars.
   *
   * @param {number} start the start index of the response within the buffer
   * @param {number} length the length of the response
   * @private
   */
  
  TcpRTUBufferedPort.prototype._emitData = function (start, length) {
    var modbus = this;
  
    var data = modbus._buffer.slice(start, start + length); // cut the buffer
  
  
    modbus._buffer = modbus._buffer.slice(start + length);
  
    if (data.length > 0) {
      var buffer = Buffer.alloc(data.length + CRC_LENGTH);
      data.copy(buffer, 0); // add crc
  
      var crc = crc16(buffer.slice(0, -CRC_LENGTH));
      buffer.writeUInt16LE(crc, buffer.length - CRC_LENGTH);
      modbus.emit("data", buffer); // debug
  
      modbusSerialDebug({
        action: "parsed tcp buffered port",
        buffer: buffer,
        transactionId: modbus._transactionIdRead
      });
    } else {
      modbusSerialDebug({
        action: "emit data to short",
        data: data
      });
    }
  };
  /**
   * Simulate successful port open.
   *
   * @param callback
   */
  
  
  TcpRTUBufferedPort.prototype.open = function (callback) {
    if (this._externalSocket === null) {
      this.callback = callback;
  
      this._client.connect(this.connectOptions);
    } else if (this.openFlag) {
      modbusSerialDebug("TcpRTUBuffered port: external socket is opened");
      callback(); // go ahead to setup existing socket
    } else {
      callback(new Error("TcpRTUBuffered port: external socket is not opened"));
    }
  };
  /**
   * Simulate successful close port.
   *
   * @param callback
   */
  
  
  TcpRTUBufferedPort.prototype.close = function (callback) {
    this.callback = callback;
  
    this._client.end(callback);
  
    this.removeAllListeners();
  };
  /**
   * Simulate successful destroy port.
   *
   * @param callback
   */
  
  
  TcpRTUBufferedPort.prototype.destroy = function (callback) {
    this.callback = callback;
  
    if (!this._client.destroyed) {
      this._client.destroy();
    }
  };
  /**
   * Send data to a modbus slave via telnet server.
   *
   * @param {Buffer} data
   */
  
  
  TcpRTUBufferedPort.prototype.write = function (data) {
    if (data.length < MIN_DATA_LENGTH) {
      modbusSerialDebug("expected length of data is to small - minimum is " + MIN_DATA_LENGTH);
      return;
    } // remove crc and add mbap
  
  
    var buffer = Buffer.alloc(data.length + MIN_MBAP_LENGTH - CRC_LENGTH);
    buffer.writeUInt16BE(this._transactionIdWrite, 0);
    buffer.writeUInt16BE(0, 2);
    buffer.writeUInt16BE(data.length - CRC_LENGTH, 4);
    data.copy(buffer, MIN_MBAP_LENGTH);
    modbusSerialDebug({
      action: "send tcp rtu buffered port",
      data: data,
      buffer: buffer,
      transactionsId: this._transactionIdWrite
    }); // get next transaction id
  
    this._transactionIdWrite = (this._transactionIdWrite + 1) % MAX_TRANSACTIONS; // send buffer to slave
  
    this._client.write(buffer);
  };
  /**
   * TCP RTU bufferd port for Modbus.
   *
   * @type {TcpRTUBufferedPort}
   */
  
  
  module.exports = TcpRTUBufferedPort;
  
  /***/ }),
  
  /***/ 450:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  var util = __webpack_require__(7440);
  
  var events = __webpack_require__(3359);
  
  var EventEmitter = events.EventEmitter || events;
  
  var net = __webpack_require__(7009);
  
  var modbusSerialDebug = __webpack_require__(1837)("modbus-serial");
  /* TODO: const should be set once, maybe */
  
  
  var EXCEPTION_LENGTH = 5;
  var MIN_DATA_LENGTH = 6;
  var TELNET_PORT = 2217;
  /**
   * Simulate a modbus-RTU port using Telent connection.
   *
   * @param ip
   * @param options
   * @constructor
   */
  
  var TelnetPort = function TelnetPort(ip, options) {
    var self = this;
    this.ip = ip;
    this.openFlag = false;
    this.callback = null;
    this._externalSocket = null; // options
  
    if (_typeof(ip) === "object") {
      options = ip;
      this.ip = options.ip;
    }
  
    if (typeof options === "undefined") options = {};
    this.port = options.port || TELNET_PORT; // telnet server port
    // internal buffer
  
    this._buffer = Buffer.alloc(0);
    this._id = 0;
    this._cmd = 0;
    this._length = 0; // handle callback - call a callback function only once, for the first event
    // it will triger
  
    var handleCallback = function handleCallback(had_error) {
      if (self.callback) {
        self.callback(had_error);
        self.callback = null;
      }
    };
  
    if (options.socket) {
      if (options.socket instanceof net.Socket) {
        this._externalSocket = options.socket;
        this.openFlag = this._externalSocket.readyState === "opening" || this._externalSocket.readyState === "open";
      } else {
        throw new Error("invalid socket provided");
      }
    } // create a socket
  
  
    this._client = this._externalSocket || new net.Socket();
    if (options.timeout) this._client.setTimeout(options.timeout); // register the port data event
  
    this._client.on("data", function onData(data) {
      // add data to buffer
      self._buffer = Buffer.concat([self._buffer, data]); // check if buffer include a complete modbus answer
  
      var expectedLength = self._length;
      var bufferLength = self._buffer.length;
      modbusSerialDebug("on data expected length:" + expectedLength + " buffer length:" + bufferLength);
      modbusSerialDebug({
        action: "receive tcp telnet port",
        data: data,
        buffer: self._buffer
      });
      modbusSerialDebug(JSON.stringify({
        action: "receive tcp telnet port strings",
        data: data,
        buffer: self._buffer
      })); // check data length
  
      if (expectedLength < 6 || bufferLength < EXCEPTION_LENGTH) return; // loop and check length-sized buffer chunks
  
      var maxOffset = bufferLength - EXCEPTION_LENGTH;
  
      for (var i = 0; i <= maxOffset; i++) {
        var unitId = self._buffer[i];
        var functionCode = self._buffer[i + 1];
        if (unitId !== self._id) continue;
  
        if (functionCode === self._cmd && i + expectedLength <= bufferLength) {
          self._emitData(i, expectedLength);
  
          return;
        }
  
        if (functionCode === (0x80 | self._cmd) && i + EXCEPTION_LENGTH <= bufferLength) {
          self._emitData(i, EXCEPTION_LENGTH);
  
          return;
        } // frame header matches, but still missing bytes pending
  
  
        if (functionCode === (0x7f & self._cmd)) break;
      }
    });
  
    this._client.on("connect", function () {
      self.openFlag = true;
      handleCallback();
    });
  
    this._client.on("close", function (had_error) {
      self.openFlag = false;
      handleCallback(had_error);
      self.emit("close");
    });
  
    this._client.on("error", function (had_error) {
      self.openFlag = false;
      handleCallback(had_error);
    });
  
    this._client.on("timeout", function () {
      // modbus.openFlag is left in its current state as it reflects two types of timeouts,
      // i.e. 'false' for "TCP connection timeout" and 'true' for "Modbus response timeout"
      // (this allows to continue Modbus request re-tries without reconnecting TCP).
      modbusSerialDebug("TelnetPort port: TimedOut");
      handleCallback(new Error("TelnetPort Connection Timed Out."));
    });
    /**
     * Check if port is open.
     *
     * @returns {boolean}
     */
  
  
    Object.defineProperty(this, "isOpen", {
      enumerable: true,
      get: function get() {
        return this.openFlag;
      }
    });
    EventEmitter.call(this);
  };
  
  util.inherits(TelnetPort, EventEmitter);
  /**
   * Emit the received response, cut the buffer and reset the internal vars.
   *
   * @param {number} start the start index of the response within the buffer
   * @param {number} length the length of the response
   * @private
   */
  
  TelnetPort.prototype._emitData = function (start, length) {
    this.emit("data", this._buffer.slice(start, start + length));
    this._buffer = this._buffer.slice(start + length); // reset internal vars
  
    this._id = 0;
    this._cmd = 0;
    this._length = 0;
  };
  /**
   * Simulate successful port open.
   *
   * @param callback
   */
  
  
  TelnetPort.prototype.open = function (callback) {
    if (this._externalSocket === null) {
      this.callback = callback;
  
      this._client.connect(this.port, this.ip);
    } else if (this.openFlag) {
      modbusSerialDebug("telnet port: external socket is opened");
      callback(); // go ahead to setup existing socket
    } else {
      callback(new Error("telnet port: external socket is not opened"));
    }
  };
  /**
   * Simulate successful close port.
   *
   * @param callback
   */
  
  
  TelnetPort.prototype.close = function (callback) {
    this.callback = callback;
  
    this._client.end();
  
    this.removeAllListeners();
  };
  /**
   * Simulate successful destroy port.
   *
   * @param callback
   */
  
  
  TelnetPort.prototype.destroy = function (callback) {
    this.callback = callback;
  
    if (!this._client.destroyed) {
      this._client.destroy();
    }
  };
  /**
   * Send data to a modbus slave via telnet server.
   *
   * @param {Buffer} data
   */
  
  
  TelnetPort.prototype.write = function (data) {
    if (data.length < MIN_DATA_LENGTH) {
      modbusSerialDebug("expected length of data is to small - minimum is " + MIN_DATA_LENGTH);
      return;
    }
  
    var length = null; // remember current unit and command
  
    this._id = data[0];
    this._cmd = data[1]; // calculate expected answer length
  
    switch (this._cmd) {
      case 1:
      case 2:
        length = data.readUInt16BE(4);
        this._length = 3 + parseInt((length - 1) / 8 + 1) + 2;
        break;
  
      case 3:
      case 4:
        length = data.readUInt16BE(4);
        this._length = 3 + 2 * length + 2;
        break;
  
      case 5:
      case 6:
      case 15:
      case 16:
        this._length = 6 + 2;
        break;
  
      default:
        // raise and error ?
        this._length = 0;
        break;
    } // send buffer to slave
  
  
    this._client.write(data);
  
    modbusSerialDebug({
      action: "send tcp telnet port",
      data: data,
      unitid: this._id,
      functionCode: this._cmd
    });
    modbusSerialDebug(JSON.stringify({
      action: "send tcp telnet port strings",
      data: data,
      unitid: this._id,
      functionCode: this._cmd
    }));
  };
  /**
   * Telnet port for Modbus.
   *
   * @type {TelnetPort}
   */
  
  
  module.exports = TelnetPort;
  
  /***/ }),
  
  /***/ 1626:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  
  
  var util = __webpack_require__(7440);
  
  var events = __webpack_require__(3359);
  
  var EventEmitter = events.EventEmitter || events;
  
  var modbusSerialDebug = __webpack_require__(1837)("modbus-serial");
  /* Add bit operation functions to Buffer
   */
  
  
  __webpack_require__(624)();
  
  var crc16 = __webpack_require__(3973);
  
  var MIN_DATA_LENGTH = 7;
  /**
   * Simulate a serial port with 4 modbus-rtu slaves connected.
   *
   * 1 - a modbus slave working correctly
   * 2 - a modbus slave that answer short replays
   * 3 - a modbus slave that answer with bad crc
   * 4 - a modbus slave that answer with bad unit number
   * 5 - a modbus slave that answer with an exception
   * 6 - a modbus slave that times out (does not answer)
   */
  
  var TestPort = function TestPort() {
    // simulate 11 input registers
    this._registers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // simulate 11 holding registers
  
    this._holding_registers = [0, 0, 0, 0, 0, 0, 0, 0, 0xa12b, 0xffff, 0xb21a]; // simulate 16 coils / digital inputs
  
    this._coils = 0x0000; // TODO 0xa12b, 1010 0001 0010 1011
  
    /**
     * Check if port is open.
     *
     * @returns {boolean}
     */
  
    Object.defineProperty(this, "isOpen", {
      enumerable: true,
      get: function get() {
        return true;
      }
    });
    EventEmitter.call(this);
  };
  
  util.inherits(TestPort, EventEmitter);
  /**
   * Simulate successful port open.
   *
   * @param callback
   */
  
  TestPort.prototype.open = function (callback) {
    if (callback) callback(null);
  };
  /**
   * Simulate successful close port.
   *
   * @param callback
   */
  
  
  TestPort.prototype.close = function (callback) {
    if (callback) callback(null);
  };
  /**
   * Simulate successful/failure port requests and replays.
   *
   * @param {Buffer} data
   */
  
  
  TestPort.prototype.write = function (data) {
    var buffer = null;
    var length = null;
    var address = null;
    var value = null;
    var state = null;
    var i = null;
  
    if (data.length < MIN_DATA_LENGTH) {
      modbusSerialDebug("expected length of data is to small - minimum is " + MIN_DATA_LENGTH);
      return;
    }
  
    var unitNumber = data[0];
    var functionCode = data[1];
    var crc = data[data.length - 2] + data[data.length - 1] * 0x100; // if crc is bad, ignore message
  
    if (crc !== crc16(data.slice(0, -2))) {
      return;
    } // function code 1 and 2
  
  
    if (functionCode === 1 || functionCode === 2) {
      address = data.readUInt16BE(2);
      length = data.readUInt16BE(4); // if length is bad, ignore message
  
      if (data.length !== 8) {
        return;
      } // build answer
  
  
      buffer = Buffer.alloc(3 + parseInt((length - 1) / 8 + 1) + 2);
      buffer.writeUInt8(parseInt((length - 1) / 8 + 1), 2); // read coils
  
      buffer.writeUInt16LE(this._coils >> address, 3);
    } // function code 3
  
  
    if (functionCode === 3) {
      address = data.readUInt16BE(2);
      length = data.readUInt16BE(4); // if length is bad, ignore message
  
      if (data.length !== 8) {
        return;
      } // build answer
  
  
      buffer = Buffer.alloc(3 + length * 2 + 2);
      buffer.writeUInt8(length * 2, 2); // read registers
  
      for (i = 0; i < length; i++) {
        buffer.writeUInt16BE(this._holding_registers[address + i], 3 + i * 2);
      }
    } // function code 4
  
  
    if (functionCode === 4) {
      address = data.readUInt16BE(2);
      length = data.readUInt16BE(4); // if length is bad, ignore message
  
      if (data.length !== 8) {
        return;
      } // build answer
  
  
      buffer = Buffer.alloc(3 + length * 2 + 2);
      buffer.writeUInt8(length * 2, 2); // read registers
  
      for (i = 0; i < length; i++) {
        buffer.writeUInt16BE(this._registers[address + i], 3 + i * 2);
      }
    } // function code 5
  
  
    if (functionCode === 5) {
      address = data.readUInt16BE(2);
      state = data.readUInt16BE(4); // if length is bad, ignore message
  
      if (data.length !== 8) {
        return;
      } // build answer
  
  
      buffer = Buffer.alloc(8);
      buffer.writeUInt16BE(address, 2);
      buffer.writeUInt16BE(state, 4); // write coil
  
      if (state === 0xff00) {
        this._coils |= 1 << address;
      } else {
        this._coils &= ~(1 << address);
      }
    } // function code 6
  
  
    if (functionCode === 6) {
      address = data.readUInt16BE(2);
      value = data.readUInt16BE(4); // if length is bad, ignore message
  
      if (data.length !== 6 + 2) {
        return;
      } // build answer
  
  
      buffer = Buffer.alloc(8);
      buffer.writeUInt16BE(address, 2);
      buffer.writeUInt16BE(value, 4);
      this._holding_registers[address] = value;
    } // function code 15
  
  
    if (functionCode === 15) {
      address = data.readUInt16BE(2);
      length = data.readUInt16BE(4); // if length is bad, ignore message
  
      if (data.length !== 7 + Math.ceil(length / 8) + 2) {
        return;
      } // build answer
  
  
      buffer = Buffer.alloc(8);
      buffer.writeUInt16BE(address, 2);
      buffer.writeUInt16BE(length, 4); // write coils
  
      for (i = 0; i < length; i++) {
        state = data.readBit(i, 7);
  
        if (state) {
          this._coils |= 1 << address + i;
        } else {
          this._coils &= ~(1 << address + i);
        }
      }
    } // function code 16
  
  
    if (functionCode === 16) {
      address = data.readUInt16BE(2);
      length = data.readUInt16BE(4); // if length is bad, ignore message
  
      if (data.length !== 7 + length * 2 + 2) {
        return;
      } // build answer
  
  
      buffer = Buffer.alloc(8);
      buffer.writeUInt16BE(address, 2);
      buffer.writeUInt16BE(length, 4); // write registers
  
      for (i = 0; i < length; i++) {
        this._holding_registers[address + i] = data.readUInt16BE(7 + i * 2);
      }
    }
  
    if (functionCode === 43) {
      var productCode = "MyProductCode1234";
      buffer = Buffer.alloc(12 + productCode.length);
      buffer.writeUInt8(16, 2); // MEI Type
  
      buffer.writeUInt8(data.readInt8(3), 3); // read device ID code
  
      buffer.writeUInt8(0x01, 4); // conformity level
  
      buffer.writeUInt8(0, 5); // number of follows left
  
      buffer.writeUInt8(0, 6); // next object ID
  
      buffer.writeUInt8(1, 7); // number of objects
  
      buffer.writeUInt8(data.readInt8(4), 8);
      buffer.writeUInt8(productCode.length, 9);
      buffer.write(productCode, 10, productCode.length, "ascii");
    } // send data back
  
  
    if (buffer) {
      // add unit number and function code
      buffer.writeUInt8(unitNumber, 0);
      buffer.writeUInt8(functionCode, 1); // corrupt the answer
  
      switch (unitNumber) {
        case 1:
          // unit 1: answers correctly
          break;
  
        case 2:
          // unit 2: answers short data
          buffer = buffer.slice(0, buffer.length - 5);
          break;
  
        case 4:
          // unit 4: answers with bad unit number
          buffer[0] = unitNumber + 2;
          break;
  
        case 5:
          // unit 5: answers with exception
          buffer.writeUInt8(functionCode + 128, 1);
          buffer.writeUInt8(4, 2);
          buffer = buffer.slice(0, 5);
          break;
  
        case 6:
          // unit 6: does not answer
          return;
      } // add crc
  
  
      crc = crc16(buffer.slice(0, -2));
      buffer.writeUInt16LE(crc, buffer.length - 2); // unit 3: answers with bad crc
  
      if (unitNumber === 3) {
        buffer.writeUInt16LE(crc + 1, buffer.length - 2);
      }
  
      this.emit("data", buffer);
      modbusSerialDebug({
        action: "send test port",
        data: data,
        buffer: buffer,
        unitid: unitNumber,
        functionCode: functionCode
      });
      modbusSerialDebug(JSON.stringify({
        action: "send test port strings",
        data: data,
        buffer: buffer,
        unitid: unitNumber,
        functionCode: functionCode
      }));
    }
  };
  /**
   * Test port for Modbus.
   *
   * @type {TestPort}
   */
  
  
  module.exports = TestPort;
  
  /***/ }),
  
  /***/ 891:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  
  
  var util = __webpack_require__(7440);
  
  var events = __webpack_require__(3359);
  
  var EventEmitter = events.EventEmitter || events;
  
  var dgram = __webpack_require__(9754);
  
  var modbusSerialDebug = __webpack_require__(1837)("modbus-serial");
  
  var crc16 = __webpack_require__(3973);
  /* TODO: const should be set once, maybe */
  
  
  var MODBUS_PORT = 502; // modbus port
  
  var MAX_TRANSACTIONS = 256; // maximum transaction to wait for
  
  var MIN_DATA_LENGTH = 6;
  var MIN_MBAP_LENGTH = 6;
  var CRC_LENGTH = 2;
  /**
   * Simulate a modbus-RTU port using modbus-udp.
   *
   * @param ip
   * @param options
   * @constructor
   */
  
  var ModbusUdpPort = function ModbusUdpPort(ip, options) {
    var modbus = this;
    this.ip = ip;
    this.openFlag = false;
    this._transactionIdWrite = 1;
    this.port = options.port || MODBUS_PORT; // options
  
    if (typeof options === "undefined") options = {}; // create a socket
  
    this._client = dgram.createSocket("udp4"); // Bind to the same port as we're sending to
  
    this._client.bind(); // wait for answer
  
  
    var self = this;
  
    this._client.on("message", function (data, rinfo) {
      var buffer;
      var crc;
      var length; // Filter stuff not intended for us
  
      if (rinfo.address !== self.ip || rinfo.port !== self.port) {
        return;
      } // data received
  
  
      modbusSerialDebug({
        action: "receive udp port strings",
        data: data
      }); // check data length
  
      while (data.length > MIN_MBAP_LENGTH) {
        // parse udp header length
        length = data.readUInt16BE(4); // cut 6 bytes of mbap and copy pdu
  
        buffer = Buffer.alloc(length + CRC_LENGTH);
        data.copy(buffer, 0, MIN_MBAP_LENGTH); // add crc to message
  
        crc = crc16(buffer.slice(0, -CRC_LENGTH));
        buffer.writeUInt16LE(crc, buffer.length - CRC_LENGTH); // update transaction id and emit data
  
        modbus._transactionIdRead = data.readUInt16BE(0);
        modbus.emit("data", buffer); // debug
  
        modbusSerialDebug({
          action: "parsed udp port",
          buffer: buffer,
          transactionId: modbus._transactionIdRead
        }); // reset data
  
        data = data.slice(length + MIN_MBAP_LENGTH);
      }
    });
  
    this._client.on("listening", function () {
      modbus.openFlag = true;
    });
  
    this._client.on("close", function () {
      modbus.openFlag = false;
    });
    /**
     * Check if port is open.
     *
     * @returns {boolean}
     */
  
  
    Object.defineProperty(this, "isOpen", {
      enumerable: true,
      get: function get() {
        return this.openFlag;
      }
    });
    EventEmitter.call(this);
  };
  
  util.inherits(ModbusUdpPort, EventEmitter);
  /**
   * Simulate successful port open.
   *
   * @param callback
   */
  
  ModbusUdpPort.prototype.open = function (callback) {
    if (callback) callback(null);
  };
  /**
   * Simulate successful close port.
   *
   * @param callback
   */
  
  
  ModbusUdpPort.prototype.close = function (callback) {
    this._client.close();
  
    if (callback) callback(null);
  };
  /**
   * Send data to a modbus-udp slave.
   *
   * @param data
   */
  
  
  ModbusUdpPort.prototype.write = function (data) {
    if (data.length < MIN_DATA_LENGTH) {
      modbusSerialDebug("expected length of data is too small - minimum is " + MIN_DATA_LENGTH);
      return;
    } // remember current unit and command
  
  
    this._id = data[0];
    this._cmd = data[1]; // remove crc and add mbap
  
    var buffer = Buffer.alloc(data.length + MIN_MBAP_LENGTH - CRC_LENGTH);
    buffer.writeUInt16BE(this._transactionIdWrite, 0);
    buffer.writeUInt16BE(0, 2);
    buffer.writeUInt16BE(data.length - CRC_LENGTH, 4);
    data.copy(buffer, MIN_MBAP_LENGTH);
    modbusSerialDebug({
      action: "send modbus udp port",
      data: data,
      buffer: buffer,
      unitid: this._id,
      functionCode: this._cmd
    }); // send buffer via udp
  
    this._client.send(buffer, 0, buffer.length, this.port, this.ip); // set next transaction id
  
  
    this._transactionIdWrite = (this._transactionIdWrite + 1) % MAX_TRANSACTIONS;
  };
  /**
   * UDP port for Modbus.
   *
   * @type {ModbusUdpPort}
   */
  
  
  module.exports = ModbusUdpPort;
  
  /***/ }),
  
  /***/ 2353:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  
  /**
   * Copyright (c) 2017, Yaacov Zamir <kobi.zamir@gmail.com>
   *
   * Permission to use, copy, modify, and/or distribute this software for any
   * purpose with or without fee is hereby granted, provided that the above
   * copyright notice and this permission notice appear in all copies.
   *
   * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF  THIS SOFTWARE.
   */
  
  var util = __webpack_require__(7440);
  
  var events = __webpack_require__(3359);
  
  var EventEmitter = events.EventEmitter || events;
  
  var net = __webpack_require__(7009);
  
  var modbusSerialDebug = __webpack_require__(1837)("modbus-serial");
  
  var HOST = "127.0.0.1";
  var UNIT_ID = 255; // listen to all adresses
  
  var MODBUS_PORT = 502; // Not really its official length, but we parse UnitID as part of PDU
  
  var MBAP_LEN = 6;
  /* Get Handlers
   */
  
  var handlers = __webpack_require__(8501);
  /* Add bit operation functions to Buffer
   */
  
  
  __webpack_require__(624)();
  
  var crc16 = __webpack_require__(3973);
  /**
   * Helper function for sending debug objects.
   *
   * @param {string} text - text of message, an error or an action
   * @param {int} unitID - Id of the requesting unit
   * @param {int} functionCode - a modbus function code.
   * @param {Buffer} requestBuffer - request Buffer from client
   * @returns undefined
   * @private
   */
  
  
  function _serverDebug(text, unitID, functionCode, responseBuffer) {
    // If no responseBuffer, then assume this is an error
    // o/w assume an action
    if (typeof responseBuffer === "undefined") {
      modbusSerialDebug({
        error: text,
        unitID: unitID,
        functionCode: functionCode
      });
    } else {
      modbusSerialDebug({
        action: text,
        unitID: unitID,
        functionCode: functionCode,
        responseBuffer: responseBuffer.toString("hex")
      });
    }
  }
  /**
   * Helper function for creating callback functions.
   *
   * @param {int} unitID - Id of the requesting unit
   * @param {int} functionCode - a modbus function code
   * @param {function} sockWriter - write buffer (or error) to tcp socket
   * @returns {function} - a callback function
   * @private
   */
  
  
  function _callbackFactory(unitID, functionCode, sockWriter) {
    return function cb(err, responseBuffer) {
      var crc; // If we have an error.
  
      if (err) {
        var errorCode = 0x04; // slave device failure
  
        if (!isNaN(err.modbusErrorCode)) {
          errorCode = err.modbusErrorCode;
        } // Set an error response
  
  
        functionCode = parseInt(functionCode) | 0x80;
        responseBuffer = Buffer.alloc(3 + 2);
        responseBuffer.writeUInt8(errorCode, 2);
  
        _serverDebug("error processing response", unitID, functionCode);
      } // If we do not have a responseBuffer
  
  
      if (!responseBuffer) {
        _serverDebug("no response buffer", unitID, functionCode);
  
        return sockWriter(null, responseBuffer);
      } // add unit number and function code
  
  
      responseBuffer.writeUInt8(unitID, 0);
      responseBuffer.writeUInt8(functionCode, 1); // Add crc
  
      crc = crc16(responseBuffer.slice(0, -2));
      responseBuffer.writeUInt16LE(crc, responseBuffer.length - 2); // Call callback function
  
      _serverDebug("server response", unitID, functionCode, responseBuffer);
  
      return sockWriter(null, responseBuffer);
    };
  }
  /**
   * Parse a ModbusRTU buffer and return an answer buffer.
   *
   * @param {Buffer} requestBuffer - request Buffer from client
   * @param {object} vector - vector of functions for read and write
   * @param {function} callback - callback to be invoked passing {Buffer} response
   * @returns undefined
   * @private
   */
  
  
  function _parseModbusBuffer(requestBuffer, vector, serverUnitID, sockWriter) {
    var cb; // Check requestBuffer length
  
    if (!requestBuffer || requestBuffer.length < MBAP_LEN) {
      modbusSerialDebug("wrong size of request Buffer " + requestBuffer.length);
      return;
    }
  
    var unitID = requestBuffer[0];
    var functionCode = requestBuffer[1];
    var crc = requestBuffer[requestBuffer.length - 2] + requestBuffer[requestBuffer.length - 1] * 0x100; // if crc is bad, ignore message
  
    if (crc !== crc16(requestBuffer.slice(0, -2))) {
      modbusSerialDebug("wrong CRC of request Buffer");
      return;
    } // if crc is bad, ignore message
  
  
    if (serverUnitID !== 255 && serverUnitID !== unitID) {
      modbusSerialDebug("wrong unitID");
      return;
    }
  
    modbusSerialDebug("request for function code " + functionCode);
    cb = _callbackFactory(unitID, functionCode, sockWriter);
  
    switch (parseInt(functionCode)) {
      case 1:
      case 2:
        handlers.readCoilsOrInputDiscretes(requestBuffer, vector, unitID, cb, functionCode);
        break;
  
      case 3:
        handlers.readMultipleRegisters(requestBuffer, vector, unitID, cb);
        break;
  
      case 4:
        handlers.readInputRegisters(requestBuffer, vector, unitID, cb);
        break;
  
      case 5:
        handlers.writeCoil(requestBuffer, vector, unitID, cb);
        break;
  
      case 6:
        handlers.writeSingleRegister(requestBuffer, vector, unitID, cb);
        break;
  
      case 15:
        handlers.forceMultipleCoils(requestBuffer, vector, unitID, cb);
        break;
  
      case 16:
        handlers.writeMultipleRegisters(requestBuffer, vector, unitID, cb);
        break;
  
      case 43:
        handlers.handleMEI(requestBuffer, vector, unitID, cb);
        break;
  
      default:
        var errorCode = 0x01; // illegal function
        // set an error response
  
        functionCode = parseInt(functionCode) | 0x80;
        var responseBuffer = Buffer.alloc(3 + 2);
        responseBuffer.writeUInt8(errorCode, 2);
        modbusSerialDebug({
          error: "Illegal function",
          functionCode: functionCode
        });
        cb({
          modbusErrorCode: errorCode
        }, responseBuffer);
    }
  }
  /**
   * Class making ModbusTCP server.
   *
   * @param vector - vector of server functions (see examples/server.js)
   * @param options - server options (host (IP), port, debug (true/false), unitID)
   * @constructor
   */
  
  
  var ServerTCP = function ServerTCP(vector, options) {
    var modbus = this;
    options = options || {}; // create a tcp server
  
    modbus._server = net.createServer();
  
    modbus._server.listen({
      port: options.port || MODBUS_PORT,
      host: options.host || HOST
    }, function () {
      modbus.emit("initialized");
    }); // create a server unit id
  
  
    var serverUnitID = options.unitID || UNIT_ID; // remember open sockets
  
    modbus.socks = new Map();
  
    modbus._server.on("connection", function (sock) {
      var recvBuffer = Buffer.from([]);
      modbus.socks.set(sock, 0);
      modbusSerialDebug({
        action: "connected",
        address: sock.address(),
        remoteAddress: sock.remoteAddress,
        localPort: sock.localPort
      });
      sock.once("close", function () {
        modbusSerialDebug({
          action: "closed"
        });
        modbus.socks["delete"](sock);
      });
      sock.on("data", function (data) {
        var _this = this;
  
        modbusSerialDebug({
          action: "socket data",
          data: data
        });
        recvBuffer = Buffer.concat([recvBuffer, data], recvBuffer.length + data.length);
  
        var _loop = function _loop() {
          var transactionsId = recvBuffer.readUInt16BE(0);
          pduLen = recvBuffer.readUInt16BE(4); // Check the presence of the full request (MBAP + PDU)
  
          if (recvBuffer.length - MBAP_LEN < pduLen) return "break"; // remove mbap and add crc16
  
          requestBuffer = Buffer.alloc(pduLen + 2);
          recvBuffer.copy(requestBuffer, 0, MBAP_LEN, MBAP_LEN + pduLen); // Move receive buffer on
  
          recvBuffer = recvBuffer.slice(MBAP_LEN + pduLen);
          crc = crc16(requestBuffer.slice(0, -2));
          requestBuffer.writeUInt16LE(crc, requestBuffer.length - 2);
          modbusSerialDebug({
            action: "receive",
            data: requestBuffer,
            requestBufferLength: requestBuffer.length
          });
          modbusSerialDebug(JSON.stringify({
            action: "receive",
            data: requestBuffer
          }));
  
          sockWriter = function sockWriter(err, responseBuffer) {
            if (err) {
              modbus.emit("error", err);
              return;
            } // send data back
  
  
            if (responseBuffer) {
              // remove crc and add mbap
              var outTcp = Buffer.alloc(responseBuffer.length + 6 - 2);
              outTcp.writeUInt16BE(transactionsId, 0);
              outTcp.writeUInt16BE(0, 2);
              outTcp.writeUInt16BE(responseBuffer.length - 2, 4);
              responseBuffer.copy(outTcp, 6);
              modbusSerialDebug({
                action: "send",
                data: responseBuffer
              });
              modbusSerialDebug(JSON.stringify({
                action: "send string",
                data: responseBuffer
              })); // write to port
  
              sock.write(outTcp);
            }
          }; // parse the modbusRTU buffer
  
  
          setTimeout(_parseModbusBuffer.bind(_this, requestBuffer, vector, serverUnitID, sockWriter), 0);
        };
  
        while (recvBuffer.length > MBAP_LEN) {
          var pduLen;
          var requestBuffer;
          var crc;
          var sockWriter;
  
          var _ret = _loop();
  
          if (_ret === "break") break;
        }
      });
      sock.on("error", function (err) {
        modbusSerialDebug(JSON.stringify({
          action: "socket error",
          data: err
        }));
        modbus.emit("socketError", err);
      });
    });
  
    EventEmitter.call(this);
  };
  
  util.inherits(ServerTCP, EventEmitter);
  /**
  * Delegate the close server method to backend.
  *
  * @param callback
  */
  
  ServerTCP.prototype.close = function (callback) {
    var modbus = this; // close the net port if exist
  
    if (modbus._server) {
      modbus._server.removeAllListeners("data");
  
      modbus._server.close(callback);
  
      modbus.socks.forEach(function (e, sock) {
        sock.destroy();
      });
      modbusSerialDebug({
        action: "close server"
      });
    } else {
      modbusSerialDebug({
        action: "close server",
        warning: "server already closed"
      });
    }
  };
  /**
   * ServerTCP interface export.
   * @type {ServerTCP}
   */
  
  
  module.exports = ServerTCP;
  
  /***/ }),
  
  /***/ 8501:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  
  /**
   * Copyright (c) 2017, Yaacov Zamir <kobi.zamir@gmail.com>
   *
   * Permission to use, copy, modify, and/or distribute this software for any
   * purpose with or without fee is hereby granted, provided that the above
   * copyright notice and this permission notice appear in all copies.
   *
   * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF  THIS SOFTWARE.
   */
  
  var modbusSerialDebug = __webpack_require__(1837)("modbus-serial");
  /**
   * Check the length of request Buffer for length of 8.
   *
   * @param requestBuffer - request Buffer from client
   * @returns {boolean} - if error it is true, otherwise false
   * @private
   */
  
  
  function _errorRequestBufferLength(requestBuffer) {
    if (requestBuffer.length !== 8) {
      modbusSerialDebug("request Buffer length " + requestBuffer.length + " is wrong - has to be >= 8");
      return true;
    }
  
    return false; // length is okay - no error
  }
  /**
   * Handle the callback invocation for Promises or synchronous values
   *
   * @param promiseOrValue - the Promise to be resolved or value to be returned
   * @param cb - the callback to be invoked
   * @returns undefined
   * @private
   */
  
  
  function _handlePromiseOrValue(promiseOrValue, cb) {
    if (promiseOrValue && promiseOrValue.then && typeof promiseOrValue.then === "function") {
      promiseOrValue.then(function (value) {
        cb(null, value);
      })["catch"](function (err) {
        cb(err);
      });
    } else {
      cb(null, promiseOrValue);
    }
  }
  /**
   * Function to handle FC1 or FC2 request.
   *
   * @param requestBuffer - request Buffer from client
   * @param vector - vector of functions for read and write
   * @param unitID - Id of the requesting unit
   * @param {function} callback - callback to be invoked passing {Buffer} response
   * @returns undefined
   * @private
   */
  
  
  function _handleReadCoilsOrInputDiscretes(requestBuffer, vector, unitID, callback, fc) {
    var address = requestBuffer.readUInt16BE(2);
    var length = requestBuffer.readUInt16BE(4);
  
    if (_errorRequestBufferLength(requestBuffer)) {
      return;
    } // build answer
  
  
    var dataBytes = parseInt((length - 1) / 8 + 1);
    var responseBuffer = Buffer.alloc(3 + dataBytes + 2);
  
    try {
      responseBuffer.writeUInt8(dataBytes, 2);
    } catch (err) {
      callback(err);
      return;
    }
  
    var isGetCoil = fc === 1 && vector.getCoil;
    var isGetDiscreteInpupt = fc === 2 && vector.getDiscreteInput; // read coils
  
    if (isGetCoil || isGetDiscreteInpupt) {
      var callbackInvoked = false;
      var cbCount = 0;
  
      var buildCb = function buildCb(i) {
        return function (err, value) {
          if (err) {
            if (!callbackInvoked) {
              callbackInvoked = true;
              callback(err);
            }
  
            return;
          }
  
          cbCount = cbCount + 1;
          responseBuffer.writeBit(value, i % 8, 3 + parseInt(i / 8));
  
          if (cbCount === length && !callbackInvoked) {
            modbusSerialDebug({
              action: "FC" + fc + " response",
              responseBuffer: responseBuffer
            });
            callbackInvoked = true;
            callback(null, responseBuffer);
          }
        };
      };
  
      if (length === 0) callback({
        modbusErrorCode: 0x02,
        // Illegal address
        msg: "Invalid length"
      });
      var i = 0;
      var cb = null;
      var promiseOrValue = null;
  
      if (isGetCoil && vector.getCoil.length === 3) {
        for (i = 0; i < length; i++) {
          cb = buildCb(i);
  
          try {
            vector.getCoil(address + i, unitID, cb);
          } catch (err) {
            cb(err);
          }
        }
      } else if (isGetDiscreteInpupt && vector.getDiscreteInput.length === 3) {
        for (i = 0; i < length; i++) {
          cb = buildCb(i);
  
          try {
            vector.getDiscreteInput(address + i, unitID, cb);
          } catch (err) {
            cb(err);
          }
        }
      } else if (isGetCoil) {
        for (i = 0; i < length; i++) {
          cb = buildCb(i);
  
          try {
            promiseOrValue = vector.getCoil(address + i, unitID);
  
            _handlePromiseOrValue(promiseOrValue, cb);
          } catch (err) {
            cb(err);
          }
        }
      } else if (isGetDiscreteInpupt) {
        for (i = 0; i < length; i++) {
          cb = buildCb(i);
  
          try {
            promiseOrValue = vector.getDiscreteInput(address + i, unitID);
  
            _handlePromiseOrValue(promiseOrValue, cb);
          } catch (err) {
            cb(err);
          }
        }
      }
    }
  }
  /**
   * Function to handle FC3 request.
   *
   * @param requestBuffer - request Buffer from client
   * @param vector - vector of functions for read and write
   * @param unitID - Id of the requesting unit
   * @param {function} callback - callback to be invoked passing {Buffer} response
   * @returns undefined
   * @private
   */
  
  
  function _handleReadMultipleRegisters(requestBuffer, vector, unitID, callback) {
    var address = requestBuffer.readUInt16BE(2);
    var length = requestBuffer.readUInt16BE(4);
  
    if (_errorRequestBufferLength(requestBuffer)) {
      return;
    } // build answer
  
  
    var responseBuffer = Buffer.alloc(3 + length * 2 + 2);
  
    try {
      responseBuffer.writeUInt8(length * 2, 2);
    } catch (err) {
      callback(err);
      return;
    }
  
    var callbackInvoked = false;
    var cbCount = 0;
  
    var buildCb = function buildCb(i) {
      return function (err, value) {
        if (err) {
          if (!callbackInvoked) {
            callbackInvoked = true;
            callback(err);
          }
  
          return;
        }
  
        cbCount = cbCount + 1;
        responseBuffer.writeUInt16BE(value, 3 + i * 2);
  
        if (cbCount === length && !callbackInvoked) {
          modbusSerialDebug({
            action: "FC3 response",
            responseBuffer: responseBuffer
          });
          callbackInvoked = true;
          callback(null, responseBuffer);
        }
      };
    };
  
    if (length === 0) callback({
      modbusErrorCode: 0x02,
      // Illegal address
      msg: "Invalid length"
    }); // read registers
  
    function tryAndHandlePromiseOrValue(i, values) {
      var cb = buildCb(i);
  
      try {
        var promiseOrValue = values[i];
  
        _handlePromiseOrValue(promiseOrValue, cb);
      } catch (err) {
        cb(err);
      }
    }
  
    if (vector.getMultipleHoldingRegisters && length > 1) {
      if (vector.getMultipleHoldingRegisters.length === 4) {
        vector.getMultipleHoldingRegisters(address, length, unitID, function (err, values) {
          if (!err && values.length !== length) {
            var error = new Error("Requested address length and response length do not match");
            callback(error);
          } else if (err) {
            var _cb = buildCb(i);
  
            try {
              _cb(err); // no need to use value array if there is an error
  
            } catch (ex) {
              _cb(ex);
            }
          } else {
            for (var i = 0; i < length; i++) {
              var _cb2 = buildCb(i);
  
              try {
                _cb2(err, values[i]);
              } catch (ex) {
                _cb2(ex);
              }
            }
          }
        });
      } else {
        var values = vector.getMultipleHoldingRegisters(address, length, unitID);
  
        if (values.length === length) {
          for (i = 0; i < length; i++) {
            tryAndHandlePromiseOrValue(i, values);
          }
        } else {
          var error = new Error("Requested address length and response length do not match");
          callback(error);
        }
      }
    } else if (vector.getHoldingRegister) {
      for (var i = 0; i < length; i++) {
        var cb = buildCb(i);
  
        try {
          if (vector.getHoldingRegister.length === 3) {
            vector.getHoldingRegister(address + i, unitID, cb);
          } else {
            var promiseOrValue = vector.getHoldingRegister(address + i, unitID);
  
            _handlePromiseOrValue(promiseOrValue, cb);
          }
        } catch (err) {
          cb(err);
        }
      }
    }
  }
  /**
   * Function to handle FC4 request.
   *
   * @param requestBuffer - request Buffer from client
   * @param vector - vector of functions for read and write
   * @param unitID - Id of the requesting unit
   * @param {function} callback - callback to be invoked passing {Buffer} response
   * @returns undefined
   * @private
   */
  
  
  function _handleReadInputRegisters(requestBuffer, vector, unitID, callback) {
    var address = requestBuffer.readUInt16BE(2);
    var length = requestBuffer.readUInt16BE(4);
  
    if (_errorRequestBufferLength(requestBuffer)) {
      return;
    } // build answer
  
  
    var responseBuffer = Buffer.alloc(3 + length * 2 + 2);
  
    try {
      responseBuffer.writeUInt8(length * 2, 2);
    } catch (err) {
      callback(err);
      return;
    }
  
    var callbackInvoked = false;
    var cbCount = 0;
  
    var buildCb = function buildCb(i) {
      return function (err, value) {
        if (err) {
          if (!callbackInvoked) {
            callbackInvoked = true;
            callback(err);
          }
  
          return;
        }
  
        cbCount = cbCount + 1;
        responseBuffer.writeUInt16BE(value, 3 + i * 2);
  
        if (cbCount === length && !callbackInvoked) {
          modbusSerialDebug({
            action: "FC4 response",
            responseBuffer: responseBuffer
          });
          callbackInvoked = true;
          callback(null, responseBuffer);
        }
      };
    };
  
    if (length === 0) callback({
      modbusErrorCode: 0x02,
      // Illegal address
      msg: "Invalid length"
    });
  
    function tryAndHandlePromiseOrValues(i, values) {
      var cb = buildCb(i);
  
      try {
        var promiseOrValue = values[i];
  
        _handlePromiseOrValue(promiseOrValue, cb);
      } catch (err) {
        cb(err);
      }
    }
  
    if (vector.getMultipleInputRegisters && length > 1) {
      if (vector.getMultipleInputRegisters.length === 4) {
        vector.getMultipleInputRegisters(address, length, unitID, function (err, values) {
          if (!err && values.length !== length) {
            var error = new Error("Requested address length and response length do not match");
            callback(error);
          } else {
            for (var i = 0; i < length; i++) {
              var cb = buildCb(i);
  
              try {
                cb(err, values[i]);
              } catch (ex) {
                cb(ex);
              }
            }
          }
        });
      } else {
        var values = vector.getMultipleInputRegisters(address, length, unitID);
  
        if (values.length === length) {
          for (var i = 0; i < length; i++) {
            tryAndHandlePromiseOrValues(i, values);
          }
        } else {
          var error = new Error("Requested address length and response length do not match");
          callback(error);
        }
      }
    } else if (vector.getInputRegister) {
      for (i = 0; i < length; i++) {
        var cb = buildCb(i);
  
        try {
          if (vector.getInputRegister.length === 3) {
            vector.getInputRegister(address + i, unitID, cb);
          } else {
            var promiseOrValue = vector.getInputRegister(address + i, unitID);
  
            _handlePromiseOrValue(promiseOrValue, cb);
          }
        } catch (ex) {
          cb(ex);
        }
      }
    }
  }
  /**
   * Function to handle FC5 request.
   *
   * @param requestBuffer - request Buffer from client
   * @param vector - vector of functions for read and write
   * @param unitID - Id of the requesting unit
   * @param {function} callback - callback to be invoked passing {Buffer} response
   * @returns undefined
   * @private
   */
  
  
  function _handleWriteCoil(requestBuffer, vector, unitID, callback) {
    var address = requestBuffer.readUInt16BE(2);
    var state = requestBuffer.readUInt16BE(4);
  
    if (_errorRequestBufferLength(requestBuffer)) {
      return;
    } // build answer
  
  
    var responseBuffer = Buffer.alloc(8);
    responseBuffer.writeUInt16BE(address, 2);
    responseBuffer.writeUInt16BE(state, 4);
  
    if (vector.setCoil) {
      var callbackInvoked = false;
  
      var cb = function cb(err) {
        if (err) {
          if (!callbackInvoked) {
            callbackInvoked = true;
            callback(err);
          }
  
          return;
        }
  
        if (!callbackInvoked) {
          modbusSerialDebug({
            action: "FC5 response",
            responseBuffer: responseBuffer
          });
          callbackInvoked = true;
          callback(null, responseBuffer);
        }
      };
  
      try {
        if (vector.setCoil.length === 4) {
          vector.setCoil(address, state === 0xff00, unitID, cb);
        } else {
          var promiseOrValue = vector.setCoil(address, state === 0xff00, unitID);
  
          _handlePromiseOrValue(promiseOrValue, cb);
        }
      } catch (err) {
        cb(err);
      }
    }
  }
  /**
   * Function to handle FC6 request.
   *
   * @param requestBuffer - request Buffer from client
   * @param vector - vector of functions for read and write
   * @param unitID - Id of the requesting unit
   * @param {function} callback - callback to be invoked passing {Buffer} response
   * @returns undefined
   * @private
   */
  
  
  function _handleWriteSingleRegister(requestBuffer, vector, unitID, callback) {
    var address = requestBuffer.readUInt16BE(2);
    var value = requestBuffer.readUInt16BE(4);
  
    if (_errorRequestBufferLength(requestBuffer)) {
      return;
    } // build answer
  
  
    var responseBuffer = Buffer.alloc(8);
    responseBuffer.writeUInt16BE(address, 2);
    responseBuffer.writeUInt16BE(value, 4);
  
    if (vector.setRegister) {
      var callbackInvoked = false;
  
      var cb = function cb(err) {
        if (err) {
          if (!callbackInvoked) {
            callbackInvoked = true;
            callback(err);
          }
  
          return;
        }
  
        if (!callbackInvoked) {
          modbusSerialDebug({
            action: "FC6 response",
            responseBuffer: responseBuffer
          });
          callbackInvoked = true;
          callback(null, responseBuffer);
        }
      };
  
      try {
        if (vector.setRegister.length === 4) {
          vector.setRegister(address, value, unitID, cb);
        } else {
          var promiseOrValue = vector.setRegister(address, value, unitID);
  
          _handlePromiseOrValue(promiseOrValue, cb);
        }
      } catch (err) {
        cb(err);
      }
    }
  }
  /**
   * Function to handle FC15 request.
   *
   * @param requestBuffer - request Buffer from client
   * @param vector - vector of functions for read and write
   * @param unitID - Id of the requesting unit
   * @param {function} callback - callback to be invoked passing {Buffer} response
   * @returns undefined
   * @private
   */
  
  
  function _handleForceMultipleCoils(requestBuffer, vector, unitID, callback) {
    var address = requestBuffer.readUInt16BE(2);
    var length = requestBuffer.readUInt16BE(4); // if length is bad, ignore message
  
    if (requestBuffer.length !== 7 + Math.ceil(length / 8) + 2) {
      return;
    } // build answer
  
  
    var responseBuffer = Buffer.alloc(8);
    responseBuffer.writeUInt16BE(address, 2);
    responseBuffer.writeUInt16BE(length, 4);
    var callbackInvoked = false;
    var cbCount = 0;
  
    var buildCb = function
      /* i - not used at the moment */
    buildCb() {
      return function (err) {
        if (err) {
          if (!callbackInvoked) {
            callbackInvoked = true;
            callback(err);
          }
  
          return;
        }
  
        cbCount = cbCount + 1;
  
        if (cbCount === length && !callbackInvoked) {
          modbusSerialDebug({
            action: "FC15 response",
            responseBuffer: responseBuffer
          });
          callbackInvoked = true;
          callback(null, responseBuffer);
        }
      };
    };
  
    if (length === 0) callback({
      modbusErrorCode: 0x02,
      // Illegal address
      msg: "Invalid length"
    });
  
    if (vector.setCoilArray) {
      var state = [];
  
      for (i = 0; i < length; i++) {
        cb = buildCb(i);
        state.push(requestBuffer.readBit(i, 7));
  
        _handlePromiseOrValue(promiseOrValue, cb);
      }
  
      try {
        if (vector.setCoilArray.length === 4) {
          vector.setCoilArray(address, state, unitID, cb);
        } else {
          vector.setCoilArray(address, state, unitID);
        }
      } catch (err) {
        cb(err);
      }
    } else if (vector.setCoil) {
      var _state;
  
      for (var i = 0; i < length; i++) {
        var cb = buildCb(i);
        _state = requestBuffer.readBit(i, 7);
  
        try {
          if (vector.setCoil.length === 4) {
            vector.setCoil(address + i, _state !== false, unitID, cb);
          } else {
            var promiseOrValue = vector.setCoil(address + i, _state !== false, unitID);
  
            _handlePromiseOrValue(promiseOrValue, cb);
          }
        } catch (err) {
          cb(err);
        }
      }
    }
  }
  /**
   * Function to handle FC16 request.
   *
   * @param requestBuffer - request Buffer from client
   * @param vector - vector of functions for read and write
   * @param unitID - Id of the requesting unit
   * @param {function} callback - callback to be invoked passing {Buffer} response
   * @returns undefined
   * @private
   */
  
  
  function _handleWriteMultipleRegisters(requestBuffer, vector, unitID, callback) {
    var address = requestBuffer.readUInt16BE(2);
    var length = requestBuffer.readUInt16BE(4); // if length is bad, ignore message
  
    if (requestBuffer.length !== 7 + length * 2 + 2) {
      return;
    } // build answer
  
  
    var responseBuffer = Buffer.alloc(8);
    responseBuffer.writeUInt16BE(address, 2);
    responseBuffer.writeUInt16BE(length, 4); // write registers
  
    var callbackInvoked = false;
    var cbCount = 0;
  
    var buildCb = function
      /* i - not used at the moment */
    buildCb() {
      return function (err) {
        if (err) {
          if (!callbackInvoked) {
            callbackInvoked = true;
            callback(err);
          }
  
          return;
        }
  
        cbCount = cbCount + 1;
  
        if (cbCount === length && !callbackInvoked) {
          modbusSerialDebug({
            action: "FC16 response",
            responseBuffer: responseBuffer
          });
          callbackInvoked = true;
          callback(null, responseBuffer);
        }
      };
    };
  
    if (length === 0) callback({
      modbusErrorCode: 0x02,
      // Illegal address
      msg: "Invalid length"
    });
  
    if (vector.setRegisterArray) {
      value = [];
  
      for (i = 0; i < length; i++) {
        cb = buildCb(i);
        value.push(requestBuffer.readUInt16BE(7 + i * 2));
  
        _handlePromiseOrValue(value, cb);
      }
  
      try {
        if (vector.setRegisterArray.length === 4) {
          vector.setRegisterArray(address, value, unitID, cb);
        } else {
          vector.setRegisterArray(address, value, unitID);
        }
      } catch (err) {
        cb(err);
      }
    } else if (vector.setRegister) {
      var value;
  
      for (var i = 0; i < length; i++) {
        var cb = buildCb(i);
        value = requestBuffer.readUInt16BE(7 + i * 2);
  
        try {
          if (vector.setRegister.length === 4) {
            vector.setRegister(address + i, value, unitID, cb);
          } else {
            var promiseOrValue = vector.setRegister(address + i, value, unitID);
  
            _handlePromiseOrValue(promiseOrValue, cb);
          }
        } catch (err) {
          cb(err);
        }
      }
    }
  }
  /**
   * Function to handle FC43 request.
   *
   * @param requestBuffer - request Buffer from client
   * @param vector - vector of functions for read and write
   * @param unitID - Id of the requesting unit
   * @param {function} callback - callback to be invoked passing {Buffer} response
   * @returns undefined
   * @private
   */
  
  
  function _handleMEI(requestBuffer, vector, unitID, callback) {
    var MEIType = requestBuffer[2];
  
    switch (parseInt(MEIType)) {
      case 14:
        _handleReadDeviceIdentification(requestBuffer, vector, unitID, callback);
  
        break;
  
      default:
        callback({
          modbusErrorCode: 0x01
        });
      // illegal MEI type
    }
  }
  /**
   * Function to handle FC43/14 MEI request.
   *
   * @param requestBuffer - request Buffer from client
   * @param vector - vector of functions for read and write
   * @param unitID - Id of the requesting unit
   * @param {function} callback - callback to be invoked passing {Buffer} response
   * @returns undefined
   * @private
   */
  
  
  function _handleReadDeviceIdentification(requestBuffer, vector, unitID, callback) {
    var PDULenMax = 253;
    var MEI14HeaderLen = 6;
    var stringLengthMax = PDULenMax - MEI14HeaderLen - 2;
  
    if (!vector.readDeviceIdentification) {
      callback({
        modbusErrorCode: 0x01
      });
      return;
    }
  
    var readDeviceIDCode = requestBuffer.readUInt8(3);
    var objectID = requestBuffer.readUInt8(4); // Basic request parameters checks
  
    switch (readDeviceIDCode) {
      case 0x01:
        if (objectID > 0x02 || objectID > 0x06 && objectID < 0x80) objectID = 0x00;
        break;
  
      case 0x02:
        if (objectID >= 0x80 || objectID > 0x06 && objectID < 0x80) objectID = 0x00;
        break;
  
      case 0x03:
        if (objectID > 0x06 && objectID < 0x80) objectID = 0x00;
        break;
  
      case 0x04:
        if (objectID > 0x06 && objectID < 0x80) {
          callback({
            modbusErrorCode: 0x02
          });
          return;
        }
  
        break;
  
      default:
        callback({
          modbusErrorCode: 0x03
        });
        return;
    } // Filling mandatory basic device identification objects
  
  
    var objects = {
      0x00: "undefined",
      0x01: "undefined",
      0x02: "undefined"
    };
  
    var pkg = __webpack_require__(6582);
  
    if (pkg) {
      if (pkg.author) objects[0x00] = pkg.author;
      if (pkg.name) objects[0x01] = pkg.name;
      if (pkg.version) objects[0x02] = pkg.version;
    }
  
    var promiseOrValue = vector.readDeviceIdentification(unitID);
  
    _handlePromiseOrValue(promiseOrValue, function (err, value) {
      if (err) {
        callback(err);
        return;
      }
  
      var userObjects = value;
  
      for (var _i = 0, _Object$keys = Object.keys(userObjects); _i < _Object$keys.length; _i++) {
        var o = _Object$keys[_i];
  
        var _i2 = parseInt(o);
  
        if (!isNaN(_i2) && _i2 >= 0 && _i2 <= 255) objects[_i2] = userObjects[o];
      } // Checking the existence of the requested objectID
  
  
      if (!objects[objectID]) {
        if (readDeviceIDCode === 0x04) {
          callback({
            modbusErrorCode: 0x02
          });
          return;
        }
  
        objectID = 0x00;
      }
  
      var ids = [];
      var totalLength = 2 + MEI14HeaderLen + 2; // UnitID + FC + MEI14Header + CRC
  
      var lastID = 0;
      var conformityLevel = 0x81;
      var supportedIDs = Object.keys(objects); // Filtering of objects and Conformity level determination
  
      for (var _i3 = 0, _supportedIDs = supportedIDs; _i3 < _supportedIDs.length; _i3++) {
        var id = _supportedIDs[_i3];
        id = parseInt(id);
        if (isNaN(id)) continue; // Enforcing valid object IDs from the user
  
        if (id < 0x00 || id > 0x06 && id < 0x80 || id > 0xFF) {
          callback({
            modbusErrorCode: 0x04,
            msg: "Invalid Object ID provided for Read Device Identification: " + id
          });
        }
  
        if (id > 0x02) conformityLevel = 0x82;
        if (id > 0x80) conformityLevel = 0x83; // Starting from requested object ID
  
        if (objectID > id) continue; // Enforcing maximum string length
  
        if (objects[id].length > stringLengthMax) {
          callback({
            modbusErrorCode: 0x04,
            msg: "Read Device Identification string size can be maximum " + stringLengthMax
          });
        }
  
        if (lastID !== 0) continue;
  
        if (objects[id].length + 2 > PDULenMax - totalLength) {
          if (lastID === 0) lastID = id;
        } else {
          totalLength += objects[id].length + 2;
          ids.push(id); // Requested a single object
  
          if (readDeviceIDCode === 0x04) break;
        }
      }
  
      ids.sort(function (a, b) {
        return parseInt(a) - parseInt(b);
      });
      var responseBuffer = Buffer.alloc(totalLength);
      var i = 2;
      i = responseBuffer.writeUInt8(14, i); // MEI type
  
      i = responseBuffer.writeUInt8(readDeviceIDCode, i);
      i = responseBuffer.writeUInt8(conformityLevel, i);
      if (lastID === 0) // More follows
        i = responseBuffer.writeUInt8(0x00, i);else i = responseBuffer.writeUInt8(0xFF, i);
      i = responseBuffer.writeUInt8(lastID, i); // Next Object Id
  
      i = responseBuffer.writeUInt8(ids.length, i); // Number of objects
  
      for (var _i4 = 0, _ids = ids; _i4 < _ids.length; _i4++) {
        id = _ids[_i4];
        i = responseBuffer.writeUInt8(id, i); // Object id
  
        i = responseBuffer.writeUInt8(objects[id].length, i); // Object length
  
        i += responseBuffer.write(objects[id], i, objects[id].length); // Object value
      }
  
      callback(null, responseBuffer);
    });
  }
  /**
   * Exports
   */
  
  
  module.exports = {
    readCoilsOrInputDiscretes: _handleReadCoilsOrInputDiscretes,
    readMultipleRegisters: _handleReadMultipleRegisters,
    readInputRegisters: _handleReadInputRegisters,
    writeCoil: _handleWriteCoil,
    writeSingleRegister: _handleWriteSingleRegister,
    forceMultipleCoils: _handleForceMultipleCoils,
    writeMultipleRegisters: _handleWriteMultipleRegisters,
    handleMEI: _handleMEI
  };
  
  /***/ }),
  
  /***/ 624:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  
  /**
   * Copyright (c) 2015, Yaacov Zamir <kobi.zamir@gmail.com>
   *
   * Permission to use, copy, modify, and/or distribute this software for any
   * purpose with or without fee is hereby granted, provided that the above
   * copyright notice and this permission notice appear in all copies.
   *
   * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF  THIS SOFTWARE.
   */
  
  /**
   * Adds Bit Operations to Buffer
   */
  
  var addBufferBitOp = function addBufferBitOp() {
    /**
     * Add set one bit in a Buffer prototype.
     *
     * @param {boolean} value, new state of bit.
     * @param {number} bit, The bit offset.
     * @param {number} offset, the byte offset.
     */
    Buffer.prototype.writeBit = function (value, bit, offset) {
      var byteOffset = parseInt(bit / 8 + offset);
      var bitOffset = bit % 8;
      var bitMask = 0x1 << bitOffset; // get byte from buffer
  
      var _byte = this.readUInt8(byteOffset); // set bit on / off
  
  
      if (value) {
        _byte |= bitMask;
      } else {
        _byte &= ~bitMask;
      } // set byte to buffer
  
  
      this.writeUInt8(_byte, byteOffset);
    };
    /**
     * Add get one bit in a Buffer prototype.
     *
     * @param {boolean} bit, The bit offset.
     * @param {number} offset, the byte offset.
     *
     * @return {boolean} the state of the bit.
     */
  
  
    Buffer.prototype.readBit = function (bit, offset) {
      var byteOffset = parseInt(bit / 8 + offset);
      var bitOffset = bit % 8;
      var bitMask = 0x1 << bitOffset; // get byte from buffer
  
      var _byte2 = this.readUInt8(byteOffset); // check bit state
  
  
      return (_byte2 & bitMask) === bitMask;
    };
  };
  /**
   * Buffer Bit operations.
   *
   * @type {addBufferBitOp}
   */
  
  
  module.exports = addBufferBitOp;
  
  /***/ }),
  
  /***/ 3973:
  /***/ (function(module) {
  
  "use strict";
  
  /**
   * Calculates the buffers CRC16.
   *
   * @param {Buffer} buffer the data buffer.
   * @return {number} the calculated CRC16.
   */
  
  module.exports = function crc16(buffer) {
    var crc = 0xFFFF;
    var odd;
  
    for (var i = 0; i < buffer.length; i++) {
      crc = crc ^ buffer[i];
  
      for (var j = 0; j < 8; j++) {
        odd = crc & 0x0001;
        crc = crc >> 1;
  
        if (odd) {
          crc = crc ^ 0xA001;
        }
      }
    }
  
    return crc;
  };
  
  /***/ }),
  
  /***/ 3326:
  /***/ (function(module) {
  
  "use strict";
  
  /**
   * Calculates the buffers LRC.
   *
   * @param {Buffer} buffer the data buffer.
   * @return {number} the calculated LRC.
   */
  
  module.exports = function lrc(buffer) {
    var lrc = 0;
  
    for (var i = 0; i < buffer.length; i++) {
      lrc += buffer[i] & 0xFF;
    }
  
    return (lrc ^ 0xFF) + 1 & 0xFF;
  };
  
  /***/ }),
  
  /***/ 8029:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  
  
  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
  
  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
  
  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  
  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
  
  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function getByteLength(type) {
    switch (String(type).toLowerCase()) {
      case "int16":
      case "uint16":
        return 2;
  
      case "int32":
      case "uint32":
      case "float":
        return 4;
  
      default:
        throw new Error("Unsupported type");
    }
  }
  
  function send(_ref) {
    var fc = _ref.fc,
        unit = _ref.unit,
        address = _ref.address,
        arg = _ref.arg;
  
    this._port.setID(unit);
  
    switch (fc) {
      case 1:
        return this._port.readCoils(address, arg);
  
      case 2:
        return this._port.readDiscreteInputs(address, arg);
  
      case 3:
        return this._port.readHoldingRegisters(address, arg);
  
      case 4:
        return this._port.readInputRegisters(address, arg);
  
      case 5:
        return this._port.writeCoil(address, arg);
  
      case 6:
        return this._port.writeRegister(address, arg);
  
      case 15:
        return this._port.writeCoils(address, arg);
  
      case 16:
        return this._port.writeRegisters(address, arg);
    }
  
    return Promise.reject(new Error("Unknown fc code"));
  }
  
  var Worker = function Worker(port, options) {
    if (typeof options === "undefined") options = {};
    this.maxConcurrentRequests = 1;
    this.debug = false;
    this._port = port;
    this._queue = [];
    this._scheduled = [];
    this._running = new Map();
    this._nextId = 0;
    this.setOptions(options);
  };
  
  Worker.prototype.setOptions = function (_ref2) {
    var maxConcurrentRequests = _ref2.maxConcurrentRequests,
        debug = _ref2.debug;
  
    if (maxConcurrentRequests > 0) {
      this.maxConcurrentRequests = maxConcurrentRequests;
    }
  
    if (debug !== undefined) {
      this.debug = Boolean(debug);
    }
  };
  
  Worker.prototype.log = function () {
    if (this.debug === true) {
      var _console;
  
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
  
      args.unshift(new Date());
  
      (_console = console).log.apply(_console, args);
    }
  };
  
  Worker.prototype.emit = function (name, data) {
    this._port.emit(name, data);
  };
  
  Worker.prototype.bufferize = function (data, type) {
    if (Array.isArray(data) === false) {
      data = [data];
    }
  
    var quantity = data.length;
    var byteLength = getByteLength(type);
    var size = quantity * byteLength;
    var buffer = Buffer.alloc(size);
  
    for (var i = 0; i < quantity; i++) {
      if (type === "int16") {
        buffer.writeInt16BE(data[i], i * byteLength);
      } else if (type === "uint16") {
        buffer.writeUInt16BE(data[i], i * byteLength);
      } else if (type === "int32") {
        buffer.writeInt32BE(data[i], i * byteLength);
      } else if (type === "uint32") {
        buffer.writeUInt32BE(data[i], i * byteLength);
      } else if (type === "float") {
        buffer.writeFloatBE(data[i], i * byteLength);
      }
    }
  
    return buffer;
  };
  
  Worker.prototype.unbufferize = function (buffer, type) {
    var byteLength = getByteLength(type);
    var quantity = buffer.length / byteLength;
    var data = [];
  
    for (var i = 0; i < quantity; i++) {
      if (type === "int16") {
        data.push(buffer.readInt16BE(i * byteLength));
      } else if (type === "uint16") {
        data.push(buffer.readUInt16BE(i * byteLength));
      } else if (type === "int32") {
        data.push(buffer.readInt32BE(i * byteLength));
      } else if (type === "uint32") {
        data.push(buffer.readUInt32BE(i * byteLength));
      } else if (type === "float") {
        data.push(buffer.readFloatBE(i * byteLength));
      }
    }
  
    return data;
  };
  
  Worker.prototype.nextId = function () {
    this._nextId = this._nextId + 1;
  
    if (this._nextId > 9999) {
      this._nextId = 1;
    }
  
    return this._nextId;
  };
  
  Worker.prototype.send = function (_ref3) {
    var _this = this;
  
    var fc = _ref3.fc,
        unit = _ref3.unit,
        address = _ref3.address,
        value = _ref3.value,
        quantity = _ref3.quantity,
        arg = _ref3.arg,
        type = _ref3.type;
    var promise = new Promise(function (resolve, reject) {
      arg = arg || quantity || value;
  
      if (fc === 1 || fc === 2) {
        arg = arg || 1;
      }
  
      if (fc === 3 || fc === 4) {
        type = type || "int16";
        arg = (arg || 1) * getByteLength(type) / 2;
      }
  
      if (fc === 6 || fc === 16) {
        type = type || "int16";
        arg = _this.bufferize(arg, type);
  
        if (fc === 6 && arg.length > 2) {
          fc = 16;
        }
      }
  
      if (fc === 5 && arg instanceof Array && arg.length > 1) {
        fc = 15;
      }
  
      var id = _this.nextId();
  
      _this.log("queue push", "#".concat(id), fc, unit, address, arg, type);
  
      _this._queue.push({
        id: id,
        fc: fc,
        unit: unit,
        address: address,
        arg: arg,
        type: type,
        resolve: resolve,
        reject: reject
      });
    });
    this.process();
    return promise;
  };
  
  Worker.prototype.process = function () {
    var _this2 = this;
  
    if (this._port.isOpen === false) {
      this._queue = [];
      this._scheduled = [];
      this._running = new Map();
      this._nextId = 0;
      return;
    }
  
    setTimeout(function () {
      return _this2.run();
    }, 1);
  };
  
  Worker.prototype.run = function () {
    var _this3 = this;
  
    if (this._running.size >= this.maxConcurrentRequests) {
      return;
    }
  
    var request = this._queue.shift();
  
    if (!request) {
      request = this._scheduled.shift();
    }
  
    if (!request) {
      return; // Well Done
    }
  
    if (typeof request.checkBeforeQueuing === "function") {
      if (request.checkBeforeQueuing() === false) {
        return this.process(); // Skip current request and go on
      }
    }
  
    this._running.set(request.id, request);
  
    this.log("send", JSON.stringify(request));
    this.emit("request", {
      request: request
    });
    send.apply(this, [request]).then(function (response) {
      var data = [];
  
      if (request.fc === 1 || request.fc === 2) {
        for (var i = 0; i < request.arg; i++) {
          data.push(Boolean(response.data[i]));
        }
      } else if (request.fc === 3 || request.fc === 4) {
        data = _this3.unbufferize(response.buffer, request.type);
      } else if (request.arg instanceof Array) {
        data = request.arg;
      } else if (request.arg instanceof Buffer && request.type) {
        data = _this3.unbufferize(request.arg, request.type);
      } else {
        data.push(request.arg);
      }
  
      _this3._running["delete"](request.id);
  
      _this3.emit("response", {
        request: request,
        response: data
      });
  
      request.resolve(data);
  
      _this3.process();
    })["catch"](function (error) {
      _this3._running["delete"](request.id);
  
      error.request = request;
  
      _this3.emit("failed", error);
  
      request.reject(error);
  
      _this3.process();
    });
    this.process();
  };
  
  Worker.prototype._poll_send = function (result, _ref4, _ref5) {
    var _this4 = this;
  
    var i = _ref4.i,
        fc = _ref4.fc,
        unit = _ref4.unit,
        address = _ref4.address,
        arg = _ref4.arg,
        items = _ref4.items,
        length = _ref4.length,
        type = _ref4.type;
    var skipErrors = _ref5.skipErrors;
    var promise = new Promise(function (res, rej) {
      var id = _this4.nextId();
  
      _this4.log("scheduled push", "poll #" + result.id, "req #" + i, "#" + id, fc, length, type);
  
      var resolve = function resolve(response) {
        var data = items.map(function (address, index) {
          return {
            address: address,
            value: response[index]
          };
        });
        result._req += 1;
        result.done += 1;
        result.data = [].concat(_toConsumableArray(result.data), _toConsumableArray(data));
        res(data);
      };
  
      var reject = function reject(error) {
        result._req += 1;
        result.error = error;
        rej(error);
      };
  
      var checkBeforeQueuing = function checkBeforeQueuing() {
        return result.error === null || skipErrors === true;
      };
  
      _this4._scheduled.push({
        id: id,
        i: i,
        fc: fc,
        unit: unit,
        address: address,
        arg: arg,
        items: items,
        length: length,
        type: type,
        result: result,
        checkBeforeQueuing: checkBeforeQueuing,
        resolve: resolve,
        reject: reject
      });
    });
    this.process();
    return promise;
  };
  
  Worker.prototype.poll = function (_ref6) {
    var _this5 = this;
  
    var unit = _ref6.unit,
        map = _ref6.map,
        onProgress = _ref6.onProgress,
        maxChunkSize = _ref6.maxChunkSize,
        skipErrors = _ref6.skipErrors,
        defaultType = _ref6.defaultType;
    maxChunkSize = maxChunkSize || 32;
    skipErrors = Boolean(skipErrors);
    defaultType = defaultType || "int16";
  
    if (unit < 1 || unit > 250 || isNaN(unit) || unit === undefined) {
      throw new Error("invalid unit");
    }
  
    this.log("poll", "unit=".concat(unit), "map size=" + Object.keys(map).length, "maxChunkSize=".concat(maxChunkSize), "skipErrors=".concat(skipErrors));
    var result = {
      id: this.nextId(),
      unit: unit,
      total: 0,
      done: 0,
      data: [],
      error: null,
      dt: Date.now(),
      _req: 0
    };
    var registers = [];
    map.forEach(function (_ref7) {
      var fc = _ref7.fc,
          address = _ref7.address,
          type = _ref7.type;
      fc = parseInt(fc);
  
      if (fc === 3 || fc === 4) {
        type = type || defaultType;
      } else if (fc === 1 || fc === 2) {
        type = "bool";
      } else {
        throw new Error("unsupported fc");
      }
  
      if (address instanceof Array) {
        address.forEach(function (item) {
          registers.push({
            fc: fc,
            address: parseInt(item),
            type: type || null
          });
        });
      } else {
        address = parseInt(address);
        registers.push({
          fc: fc,
          address: address,
          type: type || null
        });
      }
    });
    registers.sort(function (a, b) {
      if (a.fc === b.fc) {
        return a.address - b.address;
      }
  
      return a.fc - b.fc;
    });
    var requests = registers.reduce(function (chunks, register, i, arr) {
      var chunk = 0;
  
      if (chunks.length) {
        chunk = chunks.length - 1;
      }
  
      if (i > 0) {
        var lastRegister = arr[i - 1];
  
        if (lastRegister.fc !== register.fc) {
          chunk += 1;
        } else if (lastRegister.type !== register.type) {
          chunk += 1;
        } else if ([3, 4].indexOf(register.fc) >= 0 && register.address - lastRegister.address !== getByteLength(register.type) / 2) {
          chunk += 1;
        } else if (chunks[chunk].items.length >= maxChunkSize) {
          chunk += 1;
        }
      }
  
      if (chunks[chunk] === undefined) {
        chunks[chunk] = {
          fc: register.fc,
          items: [],
          length: 0,
          type: register.type
        };
      }
  
      chunks[chunk].items.push(register.address);
  
      if ([3, 4].indexOf(register.fc) >= 0) {
        chunks[chunk].length += getByteLength(register.type) / 2;
      } else {
        chunks[chunk].length += 1;
      }
  
      return chunks;
    }, []);
    result.total = requests.length;
    return new Promise(function (resolve) {
      var check = function check() {
        if (result._req === result.total) {
          result.dt = Date.now() - result.dt;
          resolve(result);
        } else if (result.error && skipErrors !== true) {
          result.dt = Date.now() - result.dt;
          resolve(result);
        }
      };
  
      for (var i = 0; i < requests.length; i++) {
        var _requests$i = requests[i],
            fc = _requests$i.fc,
            items = _requests$i.items,
            length = _requests$i.length,
            type = _requests$i.type;
  
        _this5._poll_send(result, {
          i: i,
          unit: unit,
          fc: fc,
          address: parseInt(items[0]),
          items: items,
          arg: length,
          length: length,
          type: type
        }, {
          skipErrors: skipErrors
        }).then(function (data) {
          if (typeof onProgress === "function") {
            onProgress(result.done / result.total, data);
          }
  
          check();
        })["catch"](function () {
          return check();
        });
      }
    });
  };
  
  module.exports = Worker;
  
  /***/ }),
  
  /***/ 5393:
  /***/ (function(module) {
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  /**
   * Helpers.
   */
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y = d * 365.25;
  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */
  
  module.exports = function (val, options) {
    options = options || {};
  
    var type = _typeof(val);
  
    if (type === 'string' && val.length > 0) {
      return parse(val);
    } else if (type === 'number' && isFinite(val)) {
      return options["long"] ? fmtLong(val) : fmtShort(val);
    }
  
    throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
  };
  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */
  
  
  function parse(str) {
    str = String(str);
  
    if (str.length > 100) {
      return;
    }
  
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
  
    if (!match) {
      return;
    }
  
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
  
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y;
  
      case 'weeks':
      case 'week':
      case 'w':
        return n * w;
  
      case 'days':
      case 'day':
      case 'd':
        return n * d;
  
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;
  
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;
  
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;
  
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
  
      default:
        return undefined;
    }
  }
  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */
  
  
  function fmtShort(ms) {
    var msAbs = Math.abs(ms);
  
    if (msAbs >= d) {
      return Math.round(ms / d) + 'd';
    }
  
    if (msAbs >= h) {
      return Math.round(ms / h) + 'h';
    }
  
    if (msAbs >= m) {
      return Math.round(ms / m) + 'm';
    }
  
    if (msAbs >= s) {
      return Math.round(ms / s) + 's';
    }
  
    return ms + 'ms';
  }
  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */
  
  
  function fmtLong(ms) {
    var msAbs = Math.abs(ms);
  
    if (msAbs >= d) {
      return plural(ms, msAbs, d, 'day');
    }
  
    if (msAbs >= h) {
      return plural(ms, msAbs, h, 'hour');
    }
  
    if (msAbs >= m) {
      return plural(ms, msAbs, m, 'minute');
    }
  
    if (msAbs >= s) {
      return plural(ms, msAbs, s, 'second');
    }
  
    return ms + ' ms';
  }
  /**
   * Pluralization helper.
   */
  
  
  function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
  }
  
  /***/ }),
  
  /***/ 9522:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var process = __webpack_require__(7844);
  // 'path' module extracted from Node.js v8.11.1 (only the posix part)
  // transplited with Babel
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function assertPath(path) {
    if (typeof path !== 'string') {
      throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
    }
  } // Resolves . and .. elements in a path with directory names
  
  
  function normalizeStringPosix(path, allowAboveRoot) {
    var res = '';
    var lastSegmentLength = 0;
    var lastSlash = -1;
    var dots = 0;
    var code;
  
    for (var i = 0; i <= path.length; ++i) {
      if (i < path.length) code = path.charCodeAt(i);else if (code === 47
      /*/*/
      ) break;else code = 47
      /*/*/
      ;
  
      if (code === 47
      /*/*/
      ) {
        if (lastSlash === i - 1 || dots === 1) {// NOOP
        } else if (lastSlash !== i - 1 && dots === 2) {
          if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46
          /*.*/
          || res.charCodeAt(res.length - 2) !== 46
          /*.*/
          ) {
            if (res.length > 2) {
              var lastSlashIndex = res.lastIndexOf('/');
  
              if (lastSlashIndex !== res.length - 1) {
                if (lastSlashIndex === -1) {
                  res = '';
                  lastSegmentLength = 0;
                } else {
                  res = res.slice(0, lastSlashIndex);
                  lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
                }
  
                lastSlash = i;
                dots = 0;
                continue;
              }
            } else if (res.length === 2 || res.length === 1) {
              res = '';
              lastSegmentLength = 0;
              lastSlash = i;
              dots = 0;
              continue;
            }
          }
  
          if (allowAboveRoot) {
            if (res.length > 0) res += '/..';else res = '..';
            lastSegmentLength = 2;
          }
        } else {
          if (res.length > 0) res += '/' + path.slice(lastSlash + 1, i);else res = path.slice(lastSlash + 1, i);
          lastSegmentLength = i - lastSlash - 1;
        }
  
        lastSlash = i;
        dots = 0;
      } else if (code === 46
      /*.*/
      && dots !== -1) {
        ++dots;
      } else {
        dots = -1;
      }
    }
  
    return res;
  }
  
  function _format(sep, pathObject) {
    var dir = pathObject.dir || pathObject.root;
    var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  
    if (!dir) {
      return base;
    }
  
    if (dir === pathObject.root) {
      return dir + base;
    }
  
    return dir + sep + base;
  }
  
  var posix = {
    // path.resolve([from ...], to)
    resolve: function resolve() {
      var resolvedPath = '';
      var resolvedAbsolute = false;
      var cwd;
  
      for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
        var path;
        if (i >= 0) path = arguments[i];else {
          if (cwd === undefined) cwd = process.cwd();
          path = cwd;
        }
        assertPath(path); // Skip empty entries
  
        if (path.length === 0) {
          continue;
        }
  
        resolvedPath = path + '/' + resolvedPath;
        resolvedAbsolute = path.charCodeAt(0) === 47
        /*/*/
        ;
      } // At this point the path should be resolved to a full absolute path, but
      // handle relative paths to be safe (might happen when process.cwd() fails)
      // Normalize the path
  
  
      resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
  
      if (resolvedAbsolute) {
        if (resolvedPath.length > 0) return '/' + resolvedPath;else return '/';
      } else if (resolvedPath.length > 0) {
        return resolvedPath;
      } else {
        return '.';
      }
    },
    normalize: function normalize(path) {
      assertPath(path);
      if (path.length === 0) return '.';
      var isAbsolute = path.charCodeAt(0) === 47
      /*/*/
      ;
      var trailingSeparator = path.charCodeAt(path.length - 1) === 47
      /*/*/
      ; // Normalize the path
  
      path = normalizeStringPosix(path, !isAbsolute);
      if (path.length === 0 && !isAbsolute) path = '.';
      if (path.length > 0 && trailingSeparator) path += '/';
      if (isAbsolute) return '/' + path;
      return path;
    },
    isAbsolute: function isAbsolute(path) {
      assertPath(path);
      return path.length > 0 && path.charCodeAt(0) === 47
      /*/*/
      ;
    },
    join: function join() {
      if (arguments.length === 0) return '.';
      var joined;
  
      for (var i = 0; i < arguments.length; ++i) {
        var arg = arguments[i];
        assertPath(arg);
  
        if (arg.length > 0) {
          if (joined === undefined) joined = arg;else joined += '/' + arg;
        }
      }
  
      if (joined === undefined) return '.';
      return posix.normalize(joined);
    },
    relative: function relative(from, to) {
      assertPath(from);
      assertPath(to);
      if (from === to) return '';
      from = posix.resolve(from);
      to = posix.resolve(to);
      if (from === to) return ''; // Trim any leading backslashes
  
      var fromStart = 1;
  
      for (; fromStart < from.length; ++fromStart) {
        if (from.charCodeAt(fromStart) !== 47
        /*/*/
        ) break;
      }
  
      var fromEnd = from.length;
      var fromLen = fromEnd - fromStart; // Trim any leading backslashes
  
      var toStart = 1;
  
      for (; toStart < to.length; ++toStart) {
        if (to.charCodeAt(toStart) !== 47
        /*/*/
        ) break;
      }
  
      var toEnd = to.length;
      var toLen = toEnd - toStart; // Compare paths to find the longest common path from root
  
      var length = fromLen < toLen ? fromLen : toLen;
      var lastCommonSep = -1;
      var i = 0;
  
      for (; i <= length; ++i) {
        if (i === length) {
          if (toLen > length) {
            if (to.charCodeAt(toStart + i) === 47
            /*/*/
            ) {
              // We get here if `from` is the exact base path for `to`.
              // For example: from='/foo/bar'; to='/foo/bar/baz'
              return to.slice(toStart + i + 1);
            } else if (i === 0) {
              // We get here if `from` is the root
              // For example: from='/'; to='/foo'
              return to.slice(toStart + i);
            }
          } else if (fromLen > length) {
            if (from.charCodeAt(fromStart + i) === 47
            /*/*/
            ) {
              // We get here if `to` is the exact base path for `from`.
              // For example: from='/foo/bar/baz'; to='/foo/bar'
              lastCommonSep = i;
            } else if (i === 0) {
              // We get here if `to` is the root.
              // For example: from='/foo'; to='/'
              lastCommonSep = 0;
            }
          }
  
          break;
        }
  
        var fromCode = from.charCodeAt(fromStart + i);
        var toCode = to.charCodeAt(toStart + i);
        if (fromCode !== toCode) break;else if (fromCode === 47
        /*/*/
        ) lastCommonSep = i;
      }
  
      var out = ''; // Generate the relative path based on the path difference between `to`
      // and `from`
  
      for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
        if (i === fromEnd || from.charCodeAt(i) === 47
        /*/*/
        ) {
          if (out.length === 0) out += '..';else out += '/..';
        }
      } // Lastly, append the rest of the destination (`to`) path that comes after
      // the common path parts
  
  
      if (out.length > 0) return out + to.slice(toStart + lastCommonSep);else {
        toStart += lastCommonSep;
        if (to.charCodeAt(toStart) === 47
        /*/*/
        ) ++toStart;
        return to.slice(toStart);
      }
    },
    _makeLong: function _makeLong(path) {
      return path;
    },
    dirname: function dirname(path) {
      assertPath(path);
      if (path.length === 0) return '.';
      var code = path.charCodeAt(0);
      var hasRoot = code === 47
      /*/*/
      ;
      var end = -1;
      var matchedSlash = true;
  
      for (var i = path.length - 1; i >= 1; --i) {
        code = path.charCodeAt(i);
  
        if (code === 47
        /*/*/
        ) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
          // We saw the first non-path separator
          matchedSlash = false;
        }
      }
  
      if (end === -1) return hasRoot ? '/' : '.';
      if (hasRoot && end === 1) return '//';
      return path.slice(0, end);
    },
    basename: function basename(path, ext) {
      if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
      assertPath(path);
      var start = 0;
      var end = -1;
      var matchedSlash = true;
      var i;
  
      if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
        if (ext.length === path.length && ext === path) return '';
        var extIdx = ext.length - 1;
        var firstNonSlashEnd = -1;
  
        for (i = path.length - 1; i >= 0; --i) {
          var code = path.charCodeAt(i);
  
          if (code === 47
          /*/*/
          ) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
            if (firstNonSlashEnd === -1) {
              // We saw the first non-path separator, remember this index in case
              // we need it if the extension ends up not matching
              matchedSlash = false;
              firstNonSlashEnd = i + 1;
            }
  
            if (extIdx >= 0) {
              // Try to match the explicit extension
              if (code === ext.charCodeAt(extIdx)) {
                if (--extIdx === -1) {
                  // We matched the extension, so mark this as the end of our path
                  // component
                  end = i;
                }
              } else {
                // Extension does not match, so our result is the entire path
                // component
                extIdx = -1;
                end = firstNonSlashEnd;
              }
            }
          }
        }
  
        if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
        return path.slice(start, end);
      } else {
        for (i = path.length - 1; i >= 0; --i) {
          if (path.charCodeAt(i) === 47
          /*/*/
          ) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
            // We saw the first non-path separator, mark this as the end of our
            // path component
            matchedSlash = false;
            end = i + 1;
          }
        }
  
        if (end === -1) return '';
        return path.slice(start, end);
      }
    },
    extname: function extname(path) {
      assertPath(path);
      var startDot = -1;
      var startPart = 0;
      var end = -1;
      var matchedSlash = true; // Track the state of characters (if any) we see before our first dot and
      // after any path separator we find
  
      var preDotState = 0;
  
      for (var i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
  
        if (code === 47
        /*/*/
        ) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
  
          continue;
        }
  
        if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // extension
          matchedSlash = false;
          end = i + 1;
        }
  
        if (code === 46
        /*.*/
        ) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
          // We saw a non-dot and non-path separator before our dot, so we should
          // have a good chance at having a non-empty extension
          preDotState = -1;
        }
      }
  
      if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
      preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return '';
      }
  
      return path.slice(startDot, end);
    },
    format: function format(pathObject) {
      if (pathObject === null || _typeof(pathObject) !== 'object') {
        throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + _typeof(pathObject));
      }
  
      return _format('/', pathObject);
    },
    parse: function parse(path) {
      assertPath(path);
      var ret = {
        root: '',
        dir: '',
        base: '',
        ext: '',
        name: ''
      };
      if (path.length === 0) return ret;
      var code = path.charCodeAt(0);
      var isAbsolute = code === 47
      /*/*/
      ;
      var start;
  
      if (isAbsolute) {
        ret.root = '/';
        start = 1;
      } else {
        start = 0;
      }
  
      var startDot = -1;
      var startPart = 0;
      var end = -1;
      var matchedSlash = true;
      var i = path.length - 1; // Track the state of characters (if any) we see before our first dot and
      // after any path separator we find
  
      var preDotState = 0; // Get non-dir info
  
      for (; i >= start; --i) {
        code = path.charCodeAt(i);
  
        if (code === 47
        /*/*/
        ) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
  
          continue;
        }
  
        if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // extension
          matchedSlash = false;
          end = i + 1;
        }
  
        if (code === 46
        /*.*/
        ) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
          // We saw a non-dot and non-path separator before our dot, so we should
          // have a good chance at having a non-empty extension
          preDotState = -1;
        }
      }
  
      if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
      preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
          if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
        }
      } else {
        if (startPart === 0 && isAbsolute) {
          ret.name = path.slice(1, startDot);
          ret.base = path.slice(1, end);
        } else {
          ret.name = path.slice(startPart, startDot);
          ret.base = path.slice(startPart, end);
        }
  
        ret.ext = path.slice(startDot, end);
      }
  
      if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';
      return ret;
    },
    sep: '/',
    delimiter: ':',
    win32: null,
    posix: null
  };
  posix.posix = posix;
  module.exports = posix;
  
  /***/ }),
  
  /***/ 2708:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  /* module decorator */ module = __webpack_require__.nmd(module);
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var runtime = function (exports) {
    "use strict";
  
    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined; // More compressible than void 0.
  
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  
    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }
  
    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function define(obj, key, value) {
        return obj[key] = value;
      };
    }
  
    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
  
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }
  
    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
  
    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }
  
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
  
    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
  
    function Generator() {}
  
    function GeneratorFunction() {}
  
    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
  
  
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }
  
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    define(Gp, "constructor", GeneratorFunctionPrototype);
    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
  
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }
  
    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
  
    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }
  
      genFun.prototype = Object.create(Gp);
      return genFun;
    }; // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
  
  
    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };
  
    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
  
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
  
          if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }
  
          return PromiseImpl.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }
  
      var previousPromise;
  
      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
  
        return previousPromise = // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      } // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
  
  
      this._invoke = enqueue;
    }
  
    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    });
    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
  
    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };
  
    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }
  
        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          } // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
  
  
          return doneResult();
        }
  
        context.method = method;
        context.arg = arg;
  
        while (true) {
          var delegate = context.delegate;
  
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
  
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }
  
          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }
  
            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }
  
          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);
  
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;
  
            if (record.arg === ContinueSentinel) {
              continue;
            }
  
            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted; // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
  
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    } // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
  
  
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
  
      if (method === undefined) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;
  
        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);
  
            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }
  
          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }
  
        return ContinueSentinel;
      }
  
      var record = tryCatch(method, delegate.iterator, context.arg);
  
      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }
  
      var info = record.arg;
  
      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }
  
      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).
  
        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
  
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      } // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
  
  
      context.delegate = null;
      return ContinueSentinel;
    } // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
  
  
    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
  
    define(Gp, iteratorSymbol, function () {
      return this;
    });
    define(Gp, "toString", function () {
      return "[object Generator]";
    });
  
    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
  
      if (1 in locs) {
        entry.catchLoc = locs[1];
      }
  
      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }
  
      this.tryEntries.push(entry);
    }
  
    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }
  
    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }
  
    exports.keys = function (object) {
      var keys = [];
  
      for (var key in object) {
        keys.push(key);
      }
  
      keys.reverse(); // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
  
      return function next() {
        while (keys.length) {
          var key = keys.pop();
  
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        } // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
  
  
        next.done = true;
        return next;
      };
    };
  
    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
  
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }
  
        if (typeof iterable.next === "function") {
          return iterable;
        }
  
        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }
  
            next.value = undefined;
            next.done = true;
            return next;
          };
  
          return next.next = next;
        }
      } // Return an iterator with no values.
  
  
      return {
        next: doneResult
      };
    }
  
    exports.values = values;
  
    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }
  
    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0; // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
  
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);
  
        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
  
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }
  
        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }
  
        var context = this;
  
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;
  
          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined;
          }
  
          return !!caught;
        }
  
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;
  
          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }
  
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");
  
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
  
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
  
        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }
  
        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;
  
        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }
  
        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }
  
        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }
  
        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
  
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
  
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
  
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
  
            return thrown;
          }
        } // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
  
  
        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };
  
        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined;
        }
  
        return ContinueSentinel;
      }
    }; // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
  
    return exports;
  }( // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  ( false ? 0 : _typeof(module)) === "object" ? module.exports : {});
  
  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, in modern engines
    // we can explicitly access globalThis. In older engines we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }
  
  /***/ }),
  
  /***/ 537:
  /***/ (function(module, exports, __webpack_require__) {
  
  /* eslint-disable node/no-deprecated-api */
  var buffer = __webpack_require__(5494);
  
  var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers
  
  function copyProps(src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  
  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer;
  } else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
  }
  
  function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
  } // Copy static methods from Buffer
  
  
  copyProps(Buffer, SafeBuffer);
  
  SafeBuffer.from = function (arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number');
    }
  
    return Buffer(arg, encodingOrOffset, length);
  };
  
  SafeBuffer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }
  
    var buf = Buffer(size);
  
    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
  
    return buf;
  };
  
  SafeBuffer.allocUnsafe = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }
  
    return Buffer(size);
  };
  
  SafeBuffer.allocUnsafeSlow = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }
  
    return buffer.SlowBuffer(size);
  };
  
  /***/ }),
  
  /***/ 1135:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  var SerialPort = __webpack_require__(1978);
  
  var Binding = __webpack_require__(5488);
  
  var parsers = __webpack_require__(6694);
  /**
   * @type {AbstractBinding}
   */
  
  
  SerialPort.Binding = Binding;
  /**
   * @type {Parsers}
   */
  
  SerialPort.parsers = parsers;
  module.exports = SerialPort;
  
  /***/ }),
  
  /***/ 6694:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  module.exports = {
    ByteLength: __webpack_require__(5953),
    CCTalk: __webpack_require__(973),
    Delimiter: __webpack_require__(6240),
    InterByteTimeout: __webpack_require__(1284),
    Readline: __webpack_require__(4682),
    Ready: __webpack_require__(6506),
    Regex: __webpack_require__(3664)
  };
  
  /***/ }),
  
  /***/ 5253:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  module.exports = Stream;
  
  var EE = (__webpack_require__(3359).EventEmitter);
  
  var inherits = __webpack_require__(443);
  
  inherits(Stream, EE);
  Stream.Readable = __webpack_require__(1928);
  Stream.Writable = __webpack_require__(3529);
  Stream.Duplex = __webpack_require__(403);
  Stream.Transform = __webpack_require__(8820);
  Stream.PassThrough = __webpack_require__(7024);
  Stream.finished = __webpack_require__(7423);
  Stream.pipeline = __webpack_require__(4394); // Backwards-compat with node 0.4.x
  
  Stream.Stream = Stream; // old-style streams.  Note that the pipe method (the only relevant
  // part of this class) is overridden in the Readable class.
  
  function Stream() {
    EE.call(this);
  }
  
  Stream.prototype.pipe = function (dest, options) {
    var source = this;
  
    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }
  
    source.on('data', ondata);
  
    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }
  
    dest.on('drain', ondrain); // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
  
    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on('end', onend);
      source.on('close', onclose);
    }
  
    var didOnEnd = false;
  
    function onend() {
      if (didOnEnd) return;
      didOnEnd = true;
      dest.end();
    }
  
    function onclose() {
      if (didOnEnd) return;
      didOnEnd = true;
      if (typeof dest.destroy === 'function') dest.destroy();
    } // don't leave dangling pipes when there are errors.
  
  
    function onerror(er) {
      cleanup();
  
      if (EE.listenerCount(this, 'error') === 0) {
        throw er; // Unhandled stream error in pipe.
      }
    }
  
    source.on('error', onerror);
    dest.on('error', onerror); // remove all the event listeners that were added.
  
    function cleanup() {
      source.removeListener('data', ondata);
      dest.removeListener('drain', ondrain);
      source.removeListener('end', onend);
      source.removeListener('close', onclose);
      source.removeListener('error', onerror);
      dest.removeListener('error', onerror);
      source.removeListener('end', cleanup);
      source.removeListener('close', cleanup);
      dest.removeListener('close', cleanup);
    }
  
    source.on('end', cleanup);
    source.on('close', cleanup);
    dest.on('close', cleanup);
    dest.emit('pipe', source); // Allow for unix-like usage: A.pipe(B).pipe(C)
  
    return dest;
  };
  
  /***/ }),
  
  /***/ 530:
  /***/ (function(module) {
  
  "use strict";
  
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
  
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  
  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
  
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  
  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
  
  var codes = {};
  
  function createErrorType(code, message, Base) {
    if (!Base) {
      Base = Error;
    }
  
    function getMessage(arg1, arg2, arg3) {
      if (typeof message === 'string') {
        return message;
      } else {
        return message(arg1, arg2, arg3);
      }
    }
  
    var NodeError = /*#__PURE__*/function (_Base) {
      _inherits(NodeError, _Base);
  
      var _super = _createSuper(NodeError);
  
      function NodeError(arg1, arg2, arg3) {
        _classCallCheck(this, NodeError);
  
        return _super.call(this, getMessage(arg1, arg2, arg3));
      }
  
      return _createClass(NodeError);
    }(Base);
  
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    codes[code] = NodeError;
  } // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
  
  
  function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
      var len = expected.length;
      expected = expected.map(function (i) {
        return String(i);
      });
  
      if (len > 2) {
        return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
      } else if (len === 2) {
        return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
      } else {
        return "of ".concat(thing, " ").concat(expected[0]);
      }
    } else {
      return "of ".concat(thing, " ").concat(String(expected));
    }
  } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
  
  
  function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
  } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
  
  
  function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) {
      this_len = str.length;
    }
  
    return str.substring(this_len - search.length, this_len) === search;
  } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
  
  
  function includes(str, search, start) {
    if (typeof start !== 'number') {
      start = 0;
    }
  
    if (start + search.length > str.length) {
      return false;
    } else {
      return str.indexOf(search, start) !== -1;
    }
  }
  
  createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
  }, TypeError);
  createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
  
    if (typeof expected === 'string' && startsWith(expected, 'not ')) {
      determiner = 'must not be';
      expected = expected.replace(/^not /, '');
    } else {
      determiner = 'must be';
    }
  
    var msg;
  
    if (endsWith(name, ' argument')) {
      // For cases like 'first argument'
      msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
    } else {
      var type = includes(name, '.') ? 'property' : 'argument';
      msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
    }
  
    msg += ". Received type ".concat(_typeof(actual));
    return msg;
  }, TypeError);
  createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
  createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
    return 'The ' + name + ' method is not implemented';
  });
  createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
  createErrorType('ERR_STREAM_DESTROYED', function (name) {
    return 'Cannot call ' + name + ' after a stream was destroyed';
  });
  createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
  createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
  createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
  createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
  createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
    return 'Unknown encoding: ' + arg;
  }, TypeError);
  createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
  module.exports.q = codes;
  
  /***/ }),
  
  /***/ 403:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var process = __webpack_require__(7844);
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  // a duplex stream is just a stream that is both readable and writable.
  // Since JS doesn't have multiple prototypal inheritance, this class
  // prototypally inherits from Readable, and then parasitically from
  // Writable.
  
  /*<replacement>*/
  
  var objectKeys = Object.keys || function (obj) {
    var keys = [];
  
    for (var key in obj) {
      keys.push(key);
    }
  
    return keys;
  };
  /*</replacement>*/
  
  
  module.exports = Duplex;
  
  var Readable = __webpack_require__(1928);
  
  var Writable = __webpack_require__(3529);
  
  __webpack_require__(443)(Duplex, Readable);
  
  {
    // Allow the keys array to be GC'ed.
    var keys = objectKeys(Writable.prototype);
  
    for (var v = 0; v < keys.length; v++) {
      var method = keys[v];
      if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
    }
  }
  
  function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
  
    if (options) {
      if (options.readable === false) this.readable = false;
      if (options.writable === false) this.writable = false;
  
      if (options.allowHalfOpen === false) {
        this.allowHalfOpen = false;
        this.once('end', onend);
      }
    }
  }
  
  Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._writableState.highWaterMark;
    }
  });
  Object.defineProperty(Duplex.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  Object.defineProperty(Duplex.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._writableState.length;
    }
  }); // the no-half-open enforcer
  
  function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
  
    process.nextTick(onEndNT, this);
  }
  
  function onEndNT(self) {
    self.end();
  }
  
  Object.defineProperty(Duplex.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      if (this._readableState === undefined || this._writableState === undefined) {
        return false;
      }
  
      return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
      // we ignore the value if the stream
      // has not been initialized yet
      if (this._readableState === undefined || this._writableState === undefined) {
        return;
      } // backward compatibility, the user is explicitly
      // managing destroyed
  
  
      this._readableState.destroyed = value;
      this._writableState.destroyed = value;
    }
  });
  
  /***/ }),
  
  /***/ 7024:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  // a passthrough stream.
  // basically just the most minimal sort of Transform stream.
  // Every written chunk gets output as-is.
  
  
  module.exports = PassThrough;
  
  var Transform = __webpack_require__(8820);
  
  __webpack_require__(443)(PassThrough, Transform);
  
  function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
  }
  
  PassThrough.prototype._transform = function (chunk, encoding, cb) {
    cb(null, chunk);
  };
  
  /***/ }),
  
  /***/ 1928:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var process = __webpack_require__(7844);
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  
  module.exports = Readable;
  /*<replacement>*/
  
  var Duplex;
  /*</replacement>*/
  
  Readable.ReadableState = ReadableState;
  /*<replacement>*/
  
  var EE = (__webpack_require__(3359).EventEmitter);
  
  var EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
  };
  /*</replacement>*/
  
  /*<replacement>*/
  
  
  var Stream = __webpack_require__(6407);
  /*</replacement>*/
  
  
  var Buffer = (__webpack_require__(5494).Buffer);
  
  var OurUint8Array = __webpack_require__.g.Uint8Array || function () {};
  
  function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
  }
  
  function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  /*<replacement>*/
  
  
  var debugUtil = __webpack_require__(7440);
  
  var debug;
  
  if (debugUtil && debugUtil.debuglog) {
    debug = debugUtil.debuglog('stream');
  } else {
    debug = function debug() {};
  }
  /*</replacement>*/
  
  
  var BufferList = __webpack_require__(220);
  
  var destroyImpl = __webpack_require__(7304);
  
  var _require = __webpack_require__(7018),
      getHighWaterMark = _require.getHighWaterMark;
  
  var _require$codes = (__webpack_require__(530)/* .codes */ .q),
      ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
      ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
      ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
      ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
  
  
  var StringDecoder;
  var createReadableStreamAsyncIterator;
  var from;
  
  __webpack_require__(443)(Readable, Stream);
  
  var errorOrDestroy = destroyImpl.errorOrDestroy;
  var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
  
  function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
  
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
  
  function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || __webpack_require__(403);
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
  
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
  
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
  
    this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
  
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
  
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
  
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
  
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
  
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
  
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
  
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s
  
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
  
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
  
    if (options.encoding) {
      if (!StringDecoder) StringDecoder = (__webpack_require__(7124)/* .StringDecoder */ .s);
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  
  function Readable(options) {
    Duplex = Duplex || __webpack_require__(403);
    if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
  
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex); // legacy
  
    this.readable = true;
  
    if (options) {
      if (typeof options.read === 'function') this._read = options.read;
      if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }
  
    Stream.call(this);
  }
  
  Object.defineProperty(Readable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      if (this._readableState === undefined) {
        return false;
      }
  
      return this._readableState.destroyed;
    },
    set: function set(value) {
      // we ignore the value if the stream
      // has not been initialized yet
      if (!this._readableState) {
        return;
      } // backward compatibility, the user is explicitly
      // managing destroyed
  
  
      this._readableState.destroyed = value;
    }
  });
  Readable.prototype.destroy = destroyImpl.destroy;
  Readable.prototype._undestroy = destroyImpl.undestroy;
  
  Readable.prototype._destroy = function (err, cb) {
    cb(err);
  }; // Manually shove something into the read() buffer.
  // This returns true if the highWaterMark has not been hit yet,
  // similar to how Writable.write() returns true if you should
  // write() some more.
  
  
  Readable.prototype.push = function (chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
  
    if (!state.objectMode) {
      if (typeof chunk === 'string') {
        encoding = encoding || state.defaultEncoding;
  
        if (encoding !== state.encoding) {
          chunk = Buffer.from(chunk, encoding);
          encoding = '';
        }
  
        skipChunkCheck = true;
      }
    } else {
      skipChunkCheck = true;
    }
  
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
  }; // Unshift should *always* be something directly out of read()
  
  
  Readable.prototype.unshift = function (chunk) {
    return readableAddChunk(this, chunk, null, true, false);
  };
  
  function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug('readableAddChunk', chunk);
    var state = stream._readableState;
  
    if (chunk === null) {
      state.reading = false;
      onEofChunk(stream, state);
    } else {
      var er;
      if (!skipChunkCheck) er = chunkInvalid(state, chunk);
  
      if (er) {
        errorOrDestroy(stream, er);
      } else if (state.objectMode || chunk && chunk.length > 0) {
        if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
  
        if (addToFront) {
          if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
        } else if (state.ended) {
          errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
        } else if (state.destroyed) {
          return false;
        } else {
          state.reading = false;
  
          if (state.decoder && !encoding) {
            chunk = state.decoder.write(chunk);
            if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
          } else {
            addChunk(stream, state, chunk, false);
          }
        }
      } else if (!addToFront) {
        state.reading = false;
        maybeReadMore(stream, state);
      }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
  
  
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
  }
  
  function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
      state.awaitDrain = 0;
      stream.emit('data', chunk);
    } else {
      // update the buffer info.
      state.length += state.objectMode ? 1 : chunk.length;
      if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
      if (state.needReadable) emitReadable(stream);
    }
  
    maybeReadMore(stream, state);
  }
  
  function chunkInvalid(state, chunk) {
    var er;
  
    if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
      er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
    }
  
    return er;
  }
  
  Readable.prototype.isPaused = function () {
    return this._readableState.flowing === false;
  }; // backwards compatibility.
  
  
  Readable.prototype.setEncoding = function (enc) {
    if (!StringDecoder) StringDecoder = (__webpack_require__(7124)/* .StringDecoder */ .s);
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
  
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
  
    var p = this._readableState.buffer.head;
    var content = '';
  
    while (p !== null) {
      content += decoder.write(p.data);
      p = p.next;
    }
  
    this._readableState.buffer.clear();
  
    if (content !== '') this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
  }; // Don't raise the hwm > 1GB
  
  
  var MAX_HWM = 0x40000000;
  
  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
      n = MAX_HWM;
    } else {
      // Get the next highest power of 2 to prevent increasing hwm excessively in
      // tiny amounts
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }
  
    return n;
  } // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  
  
  function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
  
    if (n !== n) {
      // Only flow one buffer at a time
      if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
  
  
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
  
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    }
  
    return state.length;
  } // you can override either this method, or the async _read(n) below.
  
  
  Readable.prototype.read = function (n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
  
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
      debug('read: emitReadable', state.length, state.ended);
      if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
      return null;
    }
  
    n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
  
    if (n === 0 && state.ended) {
      if (state.length === 0) endReadable(this);
      return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
  
  
    var doRead = state.needReadable;
    debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some
  
    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug('length less than watermark', doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
  
  
    if (state.ended || state.reading) {
      doRead = false;
      debug('reading or ended', doRead);
    } else if (doRead) {
      debug('do read');
      state.reading = true;
      state.sync = true; // if the length is currently zero, then we *need* a readable event.
  
      if (state.length === 0) state.needReadable = true; // call internal read method
  
      this._read(state.highWaterMark);
  
      state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
      // and we need to re-evaluate how much data we can return to the user.
  
      if (!state.reading) n = howMuchToRead(nOrig, state);
    }
  
    var ret;
    if (n > 0) ret = fromList(n, state);else ret = null;
  
    if (ret === null) {
      state.needReadable = state.length <= state.highWaterMark;
      n = 0;
    } else {
      state.length -= n;
      state.awaitDrain = 0;
    }
  
    if (state.length === 0) {
      // If we have nothing in the buffer, then we want to know
      // as soon as we *do* get something into the buffer.
      if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
  
      if (nOrig !== n && state.ended) endReadable(this);
    }
  
    if (ret !== null) this.emit('data', ret);
    return ret;
  };
  
  function onEofChunk(stream, state) {
    debug('onEofChunk');
    if (state.ended) return;
  
    if (state.decoder) {
      var chunk = state.decoder.end();
  
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
  
    state.ended = true;
  
    if (state.sync) {
      // if we are sync, wait until next tick to emit the data.
      // Otherwise we risk emitting data in the flow()
      // the readable code triggers during a read() call
      emitReadable(stream);
    } else {
      // emit 'readable' now to make sure it gets picked up.
      state.needReadable = false;
  
      if (!state.emittedReadable) {
        state.emittedReadable = true;
        emitReadable_(stream);
      }
    }
  } // Don't emit readable right away in sync mode, because this can trigger
  // another read() call => stack overflow.  This way, it might trigger
  // a nextTick recursion warning, but that's not so bad.
  
  
  function emitReadable(stream) {
    var state = stream._readableState;
    debug('emitReadable', state.needReadable, state.emittedReadable);
    state.needReadable = false;
  
    if (!state.emittedReadable) {
      debug('emitReadable', state.flowing);
      state.emittedReadable = true;
      process.nextTick(emitReadable_, stream);
    }
  }
  
  function emitReadable_(stream) {
    var state = stream._readableState;
    debug('emitReadable_', state.destroyed, state.length, state.ended);
  
    if (!state.destroyed && (state.length || state.ended)) {
      stream.emit('readable');
      state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
  
  
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
  } // at this point, the user has presumably seen the 'readable' event,
  // and called read() to consume some data.  that may have triggered
  // in turn another _read(n) call, in which case reading = true if
  // it's in progress.
  // However, if we're not ended, or reading, and the length < hwm,
  // then go ahead and try to read some more preemptively.
  
  
  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      process.nextTick(maybeReadMore_, stream, state);
    }
  }
  
  function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
      var len = state.length;
      debug('maybeReadMore read 0');
      stream.read(0);
      if (len === state.length) // didn't get any data, stop spinning.
        break;
    }
  
    state.readingMore = false;
  } // abstract method.  to be overridden in specific implementation classes.
  // call cb(er, data) where data is <= n in length.
  // for virtual (non-string, non-buffer) streams, "length" is somewhat
  // arbitrary, and perhaps not very meaningful.
  
  
  Readable.prototype._read = function (n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
  };
  
  Readable.prototype.pipe = function (dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
  
    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;
  
      case 1:
        state.pipes = [state.pipes, dest];
        break;
  
      default:
        state.pipes.push(dest);
        break;
    }
  
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
    dest.on('unpipe', onunpipe);
  
    function onunpipe(readable, unpipeInfo) {
      debug('onunpipe');
  
      if (readable === src) {
        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
          unpipeInfo.hasUnpiped = true;
          cleanup();
        }
      }
    }
  
    function onend() {
      debug('onend');
      dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
  
  
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;
  
    function cleanup() {
      debug('cleanup'); // cleanup event handlers once the pipe is broken
  
      dest.removeListener('close', onclose);
      dest.removeListener('finish', onfinish);
      dest.removeListener('drain', ondrain);
      dest.removeListener('error', onerror);
      dest.removeListener('unpipe', onunpipe);
      src.removeListener('end', onend);
      src.removeListener('end', unpipe);
      src.removeListener('data', ondata);
      cleanedUp = true; // if the reader is waiting for a drain event from this
      // specific writer, then it would cause it to never start
      // flowing again.
      // So, if this is awaiting a drain, then we just call it now.
      // If we don't know, then assume that we are waiting for one.
  
      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
  
    src.on('data', ondata);
  
    function ondata(chunk) {
      debug('ondata');
      var ret = dest.write(chunk);
      debug('dest.write', ret);
  
      if (ret === false) {
        // If the user unpiped during `dest.write()`, it is possible
        // to get stuck in a permanently paused state if that write
        // also returned false.
        // => Check whether `dest` is still a piping destination.
        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
          debug('false write response, pause', state.awaitDrain);
          state.awaitDrain++;
        }
  
        src.pause();
      }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
  
  
    function onerror(er) {
      debug('onerror', er);
      unpipe();
      dest.removeListener('error', onerror);
      if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
  
  
    prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.
  
    function onclose() {
      dest.removeListener('finish', onfinish);
      unpipe();
    }
  
    dest.once('close', onclose);
  
    function onfinish() {
      debug('onfinish');
      dest.removeListener('close', onclose);
      unpipe();
    }
  
    dest.once('finish', onfinish);
  
    function unpipe() {
      debug('unpipe');
      src.unpipe(dest);
    } // tell the dest that it's being piped to
  
  
    dest.emit('pipe', src); // start the flow if it hasn't been started already.
  
    if (!state.flowing) {
      debug('pipe resume');
      src.resume();
    }
  
    return dest;
  };
  
  function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
      var state = src._readableState;
      debug('pipeOnDrain', state.awaitDrain);
      if (state.awaitDrain) state.awaitDrain--;
  
      if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
        state.flowing = true;
        flow(src);
      }
    };
  }
  
  Readable.prototype.unpipe = function (dest) {
    var state = this._readableState;
    var unpipeInfo = {
      hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
  
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
  
    if (state.pipesCount === 1) {
      // passed in one, but it's not the right one.
      if (dest && dest !== state.pipes) return this;
      if (!dest) dest = state.pipes; // got a match.
  
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest) dest.emit('unpipe', this, unpipeInfo);
      return this;
    } // slow case. multiple pipe destinations.
  
  
    if (!dest) {
      // remove all.
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
  
      for (var i = 0; i < len; i++) {
        dests[i].emit('unpipe', this, {
          hasUnpiped: false
        });
      }
  
      return this;
    } // try to find the right one.
  
  
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this, unpipeInfo);
    return this;
  }; // set up data events if they are asked for
  // Ensure readable listeners eventually get something
  
  
  Readable.prototype.on = function (ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
  
    if (ev === 'data') {
      // update readableListening so that resume() may be a no-op
      // a few lines down. This is needed to support once('readable').
      state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused
  
      if (state.flowing !== false) this.resume();
    } else if (ev === 'readable') {
      if (!state.endEmitted && !state.readableListening) {
        state.readableListening = state.needReadable = true;
        state.flowing = false;
        state.emittedReadable = false;
        debug('on readable', state.length, state.reading);
  
        if (state.length) {
          emitReadable(this);
        } else if (!state.reading) {
          process.nextTick(nReadingNextTick, this);
        }
      }
    }
  
    return res;
  };
  
  Readable.prototype.addListener = Readable.prototype.on;
  
  Readable.prototype.removeListener = function (ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
  
    if (ev === 'readable') {
      // We need to check if there is someone still listening to
      // readable and reset the state. However this needs to happen
      // after readable has been emitted but before I/O (nextTick) to
      // support once('readable', fn) cycles. This means that calling
      // resume within the same tick will have no
      // effect.
      process.nextTick(updateReadableListening, this);
    }
  
    return res;
  };
  
  Readable.prototype.removeAllListeners = function (ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
  
    if (ev === 'readable' || ev === undefined) {
      // We need to check if there is someone still listening to
      // readable and reset the state. However this needs to happen
      // after readable has been emitted but before I/O (nextTick) to
      // support once('readable', fn) cycles. This means that calling
      // resume within the same tick will have no
      // effect.
      process.nextTick(updateReadableListening, this);
    }
  
    return res;
  };
  
  function updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount('readable') > 0;
  
    if (state.resumeScheduled && !state.paused) {
      // flowing needs to be set to true now, otherwise
      // the upcoming resume will not flow.
      state.flowing = true; // crude way to check if we should resume
    } else if (self.listenerCount('data') > 0) {
      self.resume();
    }
  }
  
  function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
  } // pause() and resume() are remnants of the legacy readable stream API
  // If the user uses them, then switch into old mode.
  
  
  Readable.prototype.resume = function () {
    var state = this._readableState;
  
    if (!state.flowing) {
      debug('resume'); // we flow only if there is no one listening
      // for readable, but we still have to call
      // resume()
  
      state.flowing = !state.readableListening;
      resume(this, state);
    }
  
    state.paused = false;
    return this;
  };
  
  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      process.nextTick(resume_, stream, state);
    }
  }
  
  function resume_(stream, state) {
    debug('resume', state.reading);
  
    if (!state.reading) {
      stream.read(0);
    }
  
    state.resumeScheduled = false;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
  }
  
  Readable.prototype.pause = function () {
    debug('call pause flowing=%j', this._readableState.flowing);
  
    if (this._readableState.flowing !== false) {
      debug('pause');
      this._readableState.flowing = false;
      this.emit('pause');
    }
  
    this._readableState.paused = true;
    return this;
  };
  
  function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
  
    while (state.flowing && stream.read() !== null) {
      ;
    }
  } // wrap an old-style stream as the async data source.
  // This is *not* part of the readable stream interface.
  // It is an ugly unfortunate mess of history.
  
  
  Readable.prototype.wrap = function (stream) {
    var _this = this;
  
    var state = this._readableState;
    var paused = false;
    stream.on('end', function () {
      debug('wrapped end');
  
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) _this.push(chunk);
      }
  
      _this.push(null);
    });
    stream.on('data', function (chunk) {
      debug('wrapped data');
      if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
  
      if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
  
      var ret = _this.push(chunk);
  
      if (!ret) {
        paused = true;
        stream.pause();
      }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
  
    for (var i in stream) {
      if (this[i] === undefined && typeof stream[i] === 'function') {
        this[i] = function methodWrap(method) {
          return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
          };
        }(i);
      }
    } // proxy certain important events.
  
  
    for (var n = 0; n < kProxyEvents.length; n++) {
      stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
    } // when we try to consume some more bytes, simply unpause the
    // underlying stream.
  
  
    this._read = function (n) {
      debug('wrapped _read', n);
  
      if (paused) {
        paused = false;
        stream.resume();
      }
    };
  
    return this;
  };
  
  if (typeof Symbol === 'function') {
    Readable.prototype[Symbol.asyncIterator] = function () {
      if (createReadableStreamAsyncIterator === undefined) {
        createReadableStreamAsyncIterator = __webpack_require__(4952);
      }
  
      return createReadableStreamAsyncIterator(this);
    };
  }
  
  Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._readableState.highWaterMark;
    }
  });
  Object.defineProperty(Readable.prototype, 'readableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._readableState && this._readableState.buffer;
    }
  });
  Object.defineProperty(Readable.prototype, 'readableFlowing', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._readableState.flowing;
    },
    set: function set(state) {
      if (this._readableState) {
        this._readableState.flowing = state;
      }
    }
  }); // exposed for testing purposes only.
  
  Readable._fromList = fromList;
  Object.defineProperty(Readable.prototype, 'readableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._readableState.length;
    }
  }); // Pluck off n bytes from an array of buffers.
  // Length is the combined lengths of all the buffers in the list.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  
  function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
      // read it all, truncate the list
      if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
      state.buffer.clear();
    } else {
      // read part of list
      ret = state.buffer.consume(n, state.decoder);
    }
    return ret;
  }
  
  function endReadable(stream) {
    var state = stream._readableState;
    debug('endReadable', state.endEmitted);
  
    if (!state.endEmitted) {
      state.ended = true;
      process.nextTick(endReadableNT, state, stream);
    }
  }
  
  function endReadableNT(state, stream) {
    debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.
  
    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream.readable = false;
      stream.emit('end');
  
      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the writable side is ready for autoDestroy as well
        var wState = stream._writableState;
  
        if (!wState || wState.autoDestroy && wState.finished) {
          stream.destroy();
        }
      }
    }
  }
  
  if (typeof Symbol === 'function') {
    Readable.from = function (iterable, opts) {
      if (from === undefined) {
        from = __webpack_require__(3726);
      }
  
      return from(Readable, iterable, opts);
    };
  }
  
  function indexOf(xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x) return i;
    }
  
    return -1;
  }
  
  /***/ }),
  
  /***/ 8820:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  // a transform stream is a readable/writable stream where you do
  // something with the data.  Sometimes it's called a "filter",
  // but that's not a great name for it, since that implies a thing where
  // some bits pass through, and others are simply ignored.  (That would
  // be a valid example of a transform, of course.)
  //
  // While the output is causally related to the input, it's not a
  // necessarily symmetric or synchronous transformation.  For example,
  // a zlib stream might take multiple plain-text writes(), and then
  // emit a single compressed chunk some time in the future.
  //
  // Here's how this works:
  //
  // The Transform stream has all the aspects of the readable and writable
  // stream classes.  When you write(chunk), that calls _write(chunk,cb)
  // internally, and returns false if there's a lot of pending writes
  // buffered up.  When you call read(), that calls _read(n) until
  // there's enough pending readable data buffered up.
  //
  // In a transform stream, the written data is placed in a buffer.  When
  // _read(n) is called, it transforms the queued up data, calling the
  // buffered _write cb's as it consumes chunks.  If consuming a single
  // written chunk would result in multiple output chunks, then the first
  // outputted bit calls the readcb, and subsequent chunks just go into
  // the read buffer, and will cause it to emit 'readable' if necessary.
  //
  // This way, back-pressure is actually determined by the reading side,
  // since _read has to be called to start processing a new chunk.  However,
  // a pathological inflate type of transform can cause excessive buffering
  // here.  For example, imagine a stream where every byte of input is
  // interpreted as an integer from 0-255, and then results in that many
  // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
  // 1kb of data being output.  In this case, you could write a very small
  // amount of input, and end up with a very large amount of output.  In
  // such a pathological inflating mechanism, there'd be no way to tell
  // the system to stop doing the transform.  A single 4MB write could
  // cause the system to run out of memory.
  //
  // However, even in such a pathological case, only a single written chunk
  // would be consumed, and then the rest would wait (un-transformed) until
  // the results of the previous transformed chunk were consumed.
  
  
  module.exports = Transform;
  
  var _require$codes = (__webpack_require__(530)/* .codes */ .q),
      ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
      ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
      ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
      ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
  
  var Duplex = __webpack_require__(403);
  
  __webpack_require__(443)(Transform, Duplex);
  
  function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
  
    if (cb === null) {
      return this.emit('error', new ERR_MULTIPLE_CALLBACK());
    }
  
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) // single equals check for both `null` and `undefined`
      this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
  
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      this._read(rs.highWaterMark);
    }
  }
  
  function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
      afterTransform: afterTransform.bind(this),
      needTransform: false,
      transforming: false,
      writecb: null,
      writechunk: null,
      writeencoding: null
    }; // start out asking for a readable event once data is transformed.
  
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
  
    this._readableState.sync = false;
  
    if (options) {
      if (typeof options.transform === 'function') this._transform = options.transform;
      if (typeof options.flush === 'function') this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
  
  
    this.on('prefinish', prefinish);
  }
  
  function prefinish() {
    var _this = this;
  
    if (typeof this._flush === 'function' && !this._readableState.destroyed) {
      this._flush(function (er, data) {
        done(_this, er, data);
      });
    } else {
      done(this, null, null);
    }
  }
  
  Transform.prototype.push = function (chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  }; // This is the part where you do stuff!
  // override this function in implementation classes.
  // 'chunk' is an input chunk.
  //
  // Call `push(newChunk)` to pass along transformed output
  // to the readable side.  You may call 'push' zero or more times.
  //
  // Call `cb(err)` when you are done with this chunk.  If you pass
  // an error, then that'll put the hurt on the whole operation.  If you
  // never call cb(), then you'll never get another chunk.
  
  
  Transform.prototype._transform = function (chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
  };
  
  Transform.prototype._write = function (chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
  
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
  }; // Doesn't matter what the args are here.
  // _transform does all the work.
  // That we got here means that the readable side wants more data.
  
  
  Transform.prototype._read = function (n) {
    var ts = this._transformState;
  
    if (ts.writechunk !== null && !ts.transforming) {
      ts.transforming = true;
  
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      // mark that we need a transform, so that any data that comes in
      // will get processed, now that we've asked for it.
      ts.needTransform = true;
    }
  };
  
  Transform.prototype._destroy = function (err, cb) {
    Duplex.prototype._destroy.call(this, err, function (err2) {
      cb(err2);
    });
  };
  
  function done(stream, er, data) {
    if (er) return stream.emit('error', er);
    if (data != null) // single equals check for both `null` and `undefined`
      stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
  
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
  }
  
  /***/ }),
  
  /***/ 3529:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var process = __webpack_require__(7844);
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  // A bit simpler than readable streams.
  // Implement an async ._write(chunk, encoding, cb), and it'll handle all
  // the drain event emission and buffering.
  
  
  module.exports = Writable;
  /* <replacement> */
  
  function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
  } // It seems a linked list but it is not
  // there will be only 2 of these for each stream
  
  
  function CorkedRequest(state) {
    var _this = this;
  
    this.next = null;
    this.entry = null;
  
    this.finish = function () {
      onCorkedFinish(_this, state);
    };
  }
  /* </replacement> */
  
  /*<replacement>*/
  
  
  var Duplex;
  /*</replacement>*/
  
  Writable.WritableState = WritableState;
  /*<replacement>*/
  
  var internalUtil = {
    deprecate: __webpack_require__(9593)
  };
  /*</replacement>*/
  
  /*<replacement>*/
  
  var Stream = __webpack_require__(6407);
  /*</replacement>*/
  
  
  var Buffer = (__webpack_require__(5494).Buffer);
  
  var OurUint8Array = __webpack_require__.g.Uint8Array || function () {};
  
  function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
  }
  
  function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  
  var destroyImpl = __webpack_require__(7304);
  
  var _require = __webpack_require__(7018),
      getHighWaterMark = _require.getHighWaterMark;
  
  var _require$codes = (__webpack_require__(530)/* .codes */ .q),
      ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
      ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
      ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
      ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
      ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
      ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
      ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
      ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
  
  var errorOrDestroy = destroyImpl.errorOrDestroy;
  
  __webpack_require__(443)(Writable, Stream);
  
  function nop() {}
  
  function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || __webpack_require__(403);
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
  
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
  
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
  
    this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called
  
    this.finalCalled = false; // drain event flag.
  
    this.needDrain = false; // at the start of calling end()
  
    this.ending = false; // when end() has been called, and returned
  
    this.ended = false; // when 'finish' is emitted
  
    this.finished = false; // has it been destroyed
  
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
  
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
  
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
  
    this.length = 0; // a flag to see when we're in the middle of a write.
  
    this.writing = false; // when true all writes will be buffered until .uncork() call
  
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
  
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
  
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
  
    this.onwrite = function (er) {
      onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
  
  
    this.writecb = null; // the amount that is being written when _write is called.
  
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
  
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
  
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
  
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
  
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
  
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
  
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
  
    this.corkedRequestsFree = new CorkedRequest(this);
  }
  
  WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
  
    while (current) {
      out.push(current);
      current = current.next;
    }
  
    return out;
  };
  
  (function () {
    try {
      Object.defineProperty(WritableState.prototype, 'buffer', {
        get: internalUtil.deprecate(function writableStateBufferGetter() {
          return this.getBuffer();
        }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
      });
    } catch (_) {}
  })(); // Test _writableState for inheritance to account for Duplex streams,
  // whose prototype chain only points to Readable.
  
  
  var realHasInstance;
  
  if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
      value: function value(object) {
        if (realHasInstance.call(this, object)) return true;
        if (this !== Writable) return false;
        return object && object._writableState instanceof WritableState;
      }
    });
  } else {
    realHasInstance = function realHasInstance(object) {
      return object instanceof this;
    };
  }
  
  function Writable(options) {
    Duplex = Duplex || __webpack_require__(403); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
  
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex); // legacy.
  
    this.writable = true;
  
    if (options) {
      if (typeof options.write === 'function') this._write = options.write;
      if (typeof options.writev === 'function') this._writev = options.writev;
      if (typeof options.destroy === 'function') this._destroy = options.destroy;
      if (typeof options["final"] === 'function') this._final = options["final"];
    }
  
    Stream.call(this);
  } // Otherwise people can pipe Writable streams, which is just wrong.
  
  
  Writable.prototype.pipe = function () {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
  };
  
  function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
  
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
  } // Checks that a user-supplied chunk is valid, especially for the particular
  // mode the stream is in. Currently this means that `null` is never accepted
  // and undefined/non-string values are only allowed in object mode.
  
  
  function validChunk(stream, state, chunk, cb) {
    var er;
  
    if (chunk === null) {
      er = new ERR_STREAM_NULL_VALUES();
    } else if (typeof chunk !== 'string' && !state.objectMode) {
      er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
    }
  
    if (er) {
      errorOrDestroy(stream, er);
      process.nextTick(cb, er);
      return false;
    }
  
    return true;
  }
  
  Writable.prototype.write = function (chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
  
    var isBuf = !state.objectMode && _isUint8Array(chunk);
  
    if (isBuf && !Buffer.isBuffer(chunk)) {
      chunk = _uint8ArrayToBuffer(chunk);
    }
  
    if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }
  
    if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = nop;
    if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
  };
  
  Writable.prototype.cork = function () {
    this._writableState.corked++;
  };
  
  Writable.prototype.uncork = function () {
    var state = this._writableState;
  
    if (state.corked) {
      state.corked--;
      if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
  };
  
  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };
  
  Object.defineProperty(Writable.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  
  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
      chunk = Buffer.from(chunk, encoding);
    }
  
    return chunk;
  }
  
  Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._writableState.highWaterMark;
    }
  }); // if we're already writing something, then just put this
  // in the queue, and wait our turn.  Otherwise, call _write
  // If we return false, then we need a drain event, so set that flag.
  
  function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
      var newChunk = decodeChunk(state, chunk, encoding);
  
      if (chunk !== newChunk) {
        isBuf = true;
        encoding = 'buffer';
        chunk = newChunk;
      }
    }
  
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
  
    if (!ret) state.needDrain = true;
  
    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = {
        chunk: chunk,
        encoding: encoding,
        isBuf: isBuf,
        callback: cb,
        next: null
      };
  
      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }
  
      state.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state, false, len, chunk, encoding, cb);
    }
  
    return ret;
  }
  
  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }
  
  function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
  
    if (sync) {
      // defer the callback if we are being called synchronously
      // to avoid piling up things on the stack
      process.nextTick(cb, er); // this can emit finish, and it will always happen
      // after error
  
      process.nextTick(finishMaybe, stream, state);
      stream._writableState.errorEmitted = true;
      errorOrDestroy(stream, er);
    } else {
      // the caller expect this to happen before if
      // it is async
      cb(er);
      stream._writableState.errorEmitted = true;
      errorOrDestroy(stream, er); // this can emit finish, but finish must
      // always follow error
  
      finishMaybe(stream, state);
    }
  }
  
  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }
  
  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);else {
      // Check if we're actually ready to finish, but don't emit yet
      var finished = needFinish(state) || stream.destroyed;
  
      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream, state);
      }
  
      if (sync) {
        process.nextTick(afterWrite, stream, state, finished, cb);
      } else {
        afterWrite(stream, state, finished, cb);
      }
    }
  }
  
  function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  } // Must force callback to be called on nextTick, so that we don't
  // emit 'drain' before the write() consumer gets the 'false' return
  // value, and has a chance to attach a 'drain' listener.
  
  
  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit('drain');
    }
  } // if there's something in the buffer waiting, then process it
  
  
  function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
  
    if (stream._writev && entry && entry.next) {
      // Fast case, write everything using _writev()
      var l = state.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;
      var count = 0;
      var allBuffers = true;
  
      while (entry) {
        buffer[count] = entry;
        if (!entry.isBuf) allBuffers = false;
        entry = entry.next;
        count += 1;
      }
  
      buffer.allBuffers = allBuffers;
      doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
      // as the hot path ends with doWrite
  
      state.pendingcb++;
      state.lastBufferedRequest = null;
  
      if (holder.next) {
        state.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state.corkedRequestsFree = new CorkedRequest(state);
      }
  
      state.bufferedRequestCount = 0;
    } else {
      // Slow case, write chunks one-by-one
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;
        doWrite(stream, state, false, len, chunk, encoding, cb);
        entry = entry.next;
        state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
        // it means that we need to wait until it does.
        // also, that means that the chunk and cb are currently
        // being processed, so move the buffer counter past them.
  
        if (state.writing) {
          break;
        }
      }
  
      if (entry === null) state.lastBufferedRequest = null;
    }
  
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }
  
  Writable.prototype._write = function (chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
  };
  
  Writable.prototype._writev = null;
  
  Writable.prototype.end = function (chunk, encoding, cb) {
    var state = this._writableState;
  
    if (typeof chunk === 'function') {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }
  
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
  
    if (state.corked) {
      state.corked = 1;
      this.uncork();
    } // ignore unnecessary end() calls.
  
  
    if (!state.ending) endWritable(this, state, cb);
    return this;
  };
  
  Object.defineProperty(Writable.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._writableState.length;
    }
  });
  
  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }
  
  function callFinal(stream, state) {
    stream._final(function (err) {
      state.pendingcb--;
  
      if (err) {
        errorOrDestroy(stream, err);
      }
  
      state.prefinished = true;
      stream.emit('prefinish');
      finishMaybe(stream, state);
    });
  }
  
  function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
      if (typeof stream._final === 'function' && !state.destroyed) {
        state.pendingcb++;
        state.finalCalled = true;
        process.nextTick(callFinal, stream, state);
      } else {
        state.prefinished = true;
        stream.emit('prefinish');
      }
    }
  }
  
  function finishMaybe(stream, state) {
    var need = needFinish(state);
  
    if (need) {
      prefinish(stream, state);
  
      if (state.pendingcb === 0) {
        state.finished = true;
        stream.emit('finish');
  
        if (state.autoDestroy) {
          // In case of duplex streams we need a way to detect
          // if the readable side is ready for autoDestroy as well
          var rState = stream._readableState;
  
          if (!rState || rState.autoDestroy && rState.endEmitted) {
            stream.destroy();
          }
        }
      }
    }
  
    return need;
  }
  
  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
  
    if (cb) {
      if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
    }
  
    state.ended = true;
    stream.writable = false;
  }
  
  function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
  
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    } // reuse the free corkReq.
  
  
    state.corkedRequestsFree.next = corkReq;
  }
  
  Object.defineProperty(Writable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      if (this._writableState === undefined) {
        return false;
      }
  
      return this._writableState.destroyed;
    },
    set: function set(value) {
      // we ignore the value if the stream
      // has not been initialized yet
      if (!this._writableState) {
        return;
      } // backward compatibility, the user is explicitly
      // managing destroyed
  
  
      this._writableState.destroyed = value;
    }
  });
  Writable.prototype.destroy = destroyImpl.destroy;
  Writable.prototype._undestroy = destroyImpl.undestroy;
  
  Writable.prototype._destroy = function (err, cb) {
    cb(err);
  };
  
  /***/ }),
  
  /***/ 4952:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var process = __webpack_require__(7844);
  
  
  var _Object$setPrototypeO;
  
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
  
    return obj;
  }
  
  var finished = __webpack_require__(7423);
  
  var kLastResolve = Symbol('lastResolve');
  var kLastReject = Symbol('lastReject');
  var kError = Symbol('error');
  var kEnded = Symbol('ended');
  var kLastPromise = Symbol('lastPromise');
  var kHandlePromise = Symbol('handlePromise');
  var kStream = Symbol('stream');
  
  function createIterResult(value, done) {
    return {
      value: value,
      done: done
    };
  }
  
  function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
  
    if (resolve !== null) {
      var data = iter[kStream].read(); // we defer if data is null
      // we can be expecting either 'end' or
      // 'error'
  
      if (data !== null) {
        iter[kLastPromise] = null;
        iter[kLastResolve] = null;
        iter[kLastReject] = null;
        resolve(createIterResult(data, false));
      }
    }
  }
  
  function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
  }
  
  function wrapForNext(lastPromise, iter) {
    return function (resolve, reject) {
      lastPromise.then(function () {
        if (iter[kEnded]) {
          resolve(createIterResult(undefined, true));
          return;
        }
  
        iter[kHandlePromise](resolve, reject);
      }, reject);
    };
  }
  
  var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
  var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream() {
      return this[kStream];
    },
  
    next: function next() {
      var _this = this; // if we have detected an error in the meanwhile
      // reject straight away
  
  
      var error = this[kError];
  
      if (error !== null) {
        return Promise.reject(error);
      }
  
      if (this[kEnded]) {
        return Promise.resolve(createIterResult(undefined, true));
      }
  
      if (this[kStream].destroyed) {
        // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function (resolve, reject) {
          process.nextTick(function () {
            if (_this[kError]) {
              reject(_this[kError]);
            } else {
              resolve(createIterResult(undefined, true));
            }
          });
        });
      } // if we have multiple next() calls
      // we will wait for the previous Promise to finish
      // this logic is optimized to support for await loops,
      // where next() is only called once at a time
  
  
      var lastPromise = this[kLastPromise];
      var promise;
  
      if (lastPromise) {
        promise = new Promise(wrapForNext(lastPromise, this));
      } else {
        // fast path needed to support multiple this.push()
        // without triggering the next() queue
        var data = this[kStream].read();
  
        if (data !== null) {
          return Promise.resolve(createIterResult(data, false));
        }
  
        promise = new Promise(this[kHandlePromise]);
      }
  
      this[kLastPromise] = promise;
      return promise;
    }
  }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
    return this;
  }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this; // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
  
  
    return new Promise(function (resolve, reject) {
      _this2[kStream].destroy(null, function (err) {
        if (err) {
          reject(err);
          return;
        }
  
        resolve(createIterResult(undefined, true));
      });
    });
  }), _Object$setPrototypeO), AsyncIteratorPrototype);
  
  var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
  
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
      value: stream,
      writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kLastReject, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kError, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kEnded, {
      value: stream._readableState.endEmitted,
      writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
      value: function value(resolve, reject) {
        var data = iterator[kStream].read();
  
        if (data) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(data, false));
        } else {
          iterator[kLastResolve] = resolve;
          iterator[kLastReject] = reject;
        }
      },
      writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function (err) {
      if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
        var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
        // returned by next() and store the error
  
        if (reject !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          reject(err);
        }
  
        iterator[kError] = err;
        return;
      }
  
      var resolve = iterator[kLastResolve];
  
      if (resolve !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(undefined, true));
      }
  
      iterator[kEnded] = true;
    });
    stream.on('readable', onReadable.bind(null, iterator));
    return iterator;
  };
  
  module.exports = createReadableStreamAsyncIterator;
  
  /***/ }),
  
  /***/ 220:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
  
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }
  
    return keys;
  }
  
  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
  
      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
  
    return target;
  }
  
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
  
    return obj;
  }
  
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }
  
  var _require = __webpack_require__(5494),
      Buffer = _require.Buffer;
  
  var _require2 = __webpack_require__(7440),
      inspect = _require2.inspect;
  
  var custom = inspect && inspect.custom || 'inspect';
  
  function copyBuffer(src, target, offset) {
    Buffer.prototype.copy.call(src, target, offset);
  }
  
  module.exports = /*#__PURE__*/function () {
    function BufferList() {
      _classCallCheck(this, BufferList);
  
      this.head = null;
      this.tail = null;
      this.length = 0;
    }
  
    _createClass(BufferList, [{
      key: "push",
      value: function push(v) {
        var entry = {
          data: v,
          next: null
        };
        if (this.length > 0) this.tail.next = entry;else this.head = entry;
        this.tail = entry;
        ++this.length;
      }
    }, {
      key: "unshift",
      value: function unshift(v) {
        var entry = {
          data: v,
          next: this.head
        };
        if (this.length === 0) this.tail = entry;
        this.head = entry;
        ++this.length;
      }
    }, {
      key: "shift",
      value: function shift() {
        if (this.length === 0) return;
        var ret = this.head.data;
        if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
        --this.length;
        return ret;
      }
    }, {
      key: "clear",
      value: function clear() {
        this.head = this.tail = null;
        this.length = 0;
      }
    }, {
      key: "join",
      value: function join(s) {
        if (this.length === 0) return '';
        var p = this.head;
        var ret = '' + p.data;
  
        while (p = p.next) {
          ret += s + p.data;
        }
  
        return ret;
      }
    }, {
      key: "concat",
      value: function concat(n) {
        if (this.length === 0) return Buffer.alloc(0);
        var ret = Buffer.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;
  
        while (p) {
          copyBuffer(p.data, ret, i);
          i += p.data.length;
          p = p.next;
        }
  
        return ret;
      } // Consumes a specified amount of bytes or characters from the buffered data.
  
    }, {
      key: "consume",
      value: function consume(n, hasStrings) {
        var ret;
  
        if (n < this.head.data.length) {
          // `slice` is the same for buffers and strings.
          ret = this.head.data.slice(0, n);
          this.head.data = this.head.data.slice(n);
        } else if (n === this.head.data.length) {
          // First chunk is a perfect match.
          ret = this.shift();
        } else {
          // Result spans more than one buffer.
          ret = hasStrings ? this._getString(n) : this._getBuffer(n);
        }
  
        return ret;
      }
    }, {
      key: "first",
      value: function first() {
        return this.head.data;
      } // Consumes a specified amount of characters from the buffered data.
  
    }, {
      key: "_getString",
      value: function _getString(n) {
        var p = this.head;
        var c = 1;
        var ret = p.data;
        n -= ret.length;
  
        while (p = p.next) {
          var str = p.data;
          var nb = n > str.length ? str.length : n;
          if (nb === str.length) ret += str;else ret += str.slice(0, n);
          n -= nb;
  
          if (n === 0) {
            if (nb === str.length) {
              ++c;
              if (p.next) this.head = p.next;else this.head = this.tail = null;
            } else {
              this.head = p;
              p.data = str.slice(nb);
            }
  
            break;
          }
  
          ++c;
        }
  
        this.length -= c;
        return ret;
      } // Consumes a specified amount of bytes from the buffered data.
  
    }, {
      key: "_getBuffer",
      value: function _getBuffer(n) {
        var ret = Buffer.allocUnsafe(n);
        var p = this.head;
        var c = 1;
        p.data.copy(ret);
        n -= p.data.length;
  
        while (p = p.next) {
          var buf = p.data;
          var nb = n > buf.length ? buf.length : n;
          buf.copy(ret, ret.length - n, 0, nb);
          n -= nb;
  
          if (n === 0) {
            if (nb === buf.length) {
              ++c;
              if (p.next) this.head = p.next;else this.head = this.tail = null;
            } else {
              this.head = p;
              p.data = buf.slice(nb);
            }
  
            break;
          }
  
          ++c;
        }
  
        this.length -= c;
        return ret;
      } // Make sure the linked list only shows the minimal necessary information.
  
    }, {
      key: custom,
      value: function value(_, options) {
        return inspect(this, _objectSpread({}, options, {
          // Only inspect one level.
          depth: 0,
          // It should not recurse.
          customInspect: false
        }));
      }
    }]);
  
    return BufferList;
  }();
  
  /***/ }),
  
  /***/ 7304:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  /* provided dependency */ var process = __webpack_require__(7844);
   // undocumented cb() API, needed for core, not for public API
  
  function destroy(err, cb) {
    var _this = this;
  
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
  
    if (readableDestroyed || writableDestroyed) {
      if (cb) {
        cb(err);
      } else if (err) {
        if (!this._writableState) {
          process.nextTick(emitErrorNT, this, err);
        } else if (!this._writableState.errorEmitted) {
          this._writableState.errorEmitted = true;
          process.nextTick(emitErrorNT, this, err);
        }
      }
  
      return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
  
  
    if (this._readableState) {
      this._readableState.destroyed = true;
    } // if this is a duplex stream mark the writable part as destroyed as well
  
  
    if (this._writableState) {
      this._writableState.destroyed = true;
    }
  
    this._destroy(err || null, function (err) {
      if (!cb && err) {
        if (!_this._writableState) {
          process.nextTick(emitErrorAndCloseNT, _this, err);
        } else if (!_this._writableState.errorEmitted) {
          _this._writableState.errorEmitted = true;
          process.nextTick(emitErrorAndCloseNT, _this, err);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      } else if (cb) {
        process.nextTick(emitCloseNT, _this);
        cb(err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    });
  
    return this;
  }
  
  function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
  }
  
  function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit('close');
  }
  
  function undestroy() {
    if (this._readableState) {
      this._readableState.destroyed = false;
      this._readableState.reading = false;
      this._readableState.ended = false;
      this._readableState.endEmitted = false;
    }
  
    if (this._writableState) {
      this._writableState.destroyed = false;
      this._writableState.ended = false;
      this._writableState.ending = false;
      this._writableState.finalCalled = false;
      this._writableState.prefinished = false;
      this._writableState.finished = false;
      this._writableState.errorEmitted = false;
    }
  }
  
  function emitErrorNT(self, err) {
    self.emit('error', err);
  }
  
  function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
  }
  
  module.exports = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
  };
  
  /***/ }),
  
  /***/ 7423:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  // Ported from https://github.com/mafintosh/end-of-stream with
  // permission from the author, Mathias Buus (@mafintosh).
  
  
  var ERR_STREAM_PREMATURE_CLOSE = (__webpack_require__(530)/* .codes.ERR_STREAM_PREMATURE_CLOSE */ .q.ERR_STREAM_PREMATURE_CLOSE);
  
  function once(callback) {
    var called = false;
    return function () {
      if (called) return;
      called = true;
  
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
  
      callback.apply(this, args);
    };
  }
  
  function noop() {}
  
  function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
  }
  
  function eos(stream, opts, callback) {
    if (typeof opts === 'function') return eos(stream, null, opts);
    if (!opts) opts = {};
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
  
    var onlegacyfinish = function onlegacyfinish() {
      if (!stream.writable) onfinish();
    };
  
    var writableEnded = stream._writableState && stream._writableState.finished;
  
    var onfinish = function onfinish() {
      writable = false;
      writableEnded = true;
      if (!readable) callback.call(stream);
    };
  
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
  
    var onend = function onend() {
      readable = false;
      readableEnded = true;
      if (!writable) callback.call(stream);
    };
  
    var onerror = function onerror(err) {
      callback.call(stream, err);
    };
  
    var onclose = function onclose() {
      var err;
  
      if (readable && !readableEnded) {
        if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
        return callback.call(stream, err);
      }
  
      if (writable && !writableEnded) {
        if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
        return callback.call(stream, err);
      }
    };
  
    var onrequest = function onrequest() {
      stream.req.on('finish', onfinish);
    };
  
    if (isRequest(stream)) {
      stream.on('complete', onfinish);
      stream.on('abort', onclose);
      if (stream.req) onrequest();else stream.on('request', onrequest);
    } else if (writable && !stream._writableState) {
      // legacy streams
      stream.on('end', onlegacyfinish);
      stream.on('close', onlegacyfinish);
    }
  
    stream.on('end', onend);
    stream.on('finish', onfinish);
    if (opts.error !== false) stream.on('error', onerror);
    stream.on('close', onclose);
    return function () {
      stream.removeListener('complete', onfinish);
      stream.removeListener('abort', onclose);
      stream.removeListener('request', onrequest);
      if (stream.req) stream.req.removeListener('finish', onfinish);
      stream.removeListener('end', onlegacyfinish);
      stream.removeListener('close', onlegacyfinish);
      stream.removeListener('finish', onfinish);
      stream.removeListener('end', onend);
      stream.removeListener('error', onerror);
      stream.removeListener('close', onclose);
    };
  }
  
  module.exports = eos;
  
  /***/ }),
  
  /***/ 3726:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
  
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  
  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
  
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
  
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
  
        _next(undefined);
      });
    };
  }
  
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
  
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }
  
    return keys;
  }
  
  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
  
      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
  
    return target;
  }
  
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
  
    return obj;
  }
  
  var ERR_INVALID_ARG_TYPE = (__webpack_require__(530)/* .codes.ERR_INVALID_ARG_TYPE */ .q.ERR_INVALID_ARG_TYPE);
  
  function from(Readable, iterable, opts) {
    var iterator;
  
    if (iterable && typeof iterable.next === 'function') {
      iterator = iterable;
    } else if (iterable && iterable[Symbol.asyncIterator]) iterator = iterable[Symbol.asyncIterator]();else if (iterable && iterable[Symbol.iterator]) iterator = iterable[Symbol.iterator]();else throw new ERR_INVALID_ARG_TYPE('iterable', ['Iterable'], iterable);
  
    var readable = new Readable(_objectSpread({
      objectMode: true
    }, opts)); // Reading boolean to protect against _read
    // being called before last iteration completion.
  
    var reading = false;
  
    readable._read = function () {
      if (!reading) {
        reading = true;
        next();
      }
    };
  
    function next() {
      return _next2.apply(this, arguments);
    }
  
    function _next2() {
      _next2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var _ref, value, done;
  
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return iterator.next();
  
              case 3:
                _ref = _context.sent;
                value = _ref.value;
                done = _ref.done;
  
                if (!done) {
                  _context.next = 10;
                  break;
                }
  
                readable.push(null);
                _context.next = 19;
                break;
  
              case 10:
                _context.t0 = readable;
                _context.next = 13;
                return value;
  
              case 13:
                _context.t1 = _context.sent;
  
                if (!_context.t0.push.call(_context.t0, _context.t1)) {
                  _context.next = 18;
                  break;
                }
  
                next();
                _context.next = 19;
                break;
  
              case 18:
                reading = false;
  
              case 19:
                _context.next = 24;
                break;
  
              case 21:
                _context.prev = 21;
                _context.t2 = _context["catch"](0);
                readable.destroy(_context.t2);
  
              case 24:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 21]]);
      }));
      return _next2.apply(this, arguments);
    }
  
    return readable;
  }
  
  module.exports = from;
  
  /***/ }),
  
  /***/ 4394:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  // Ported from https://github.com/mafintosh/pump with
  // permission from the author, Mathias Buus (@mafintosh).
  
  
  var eos;
  
  function once(callback) {
    var called = false;
    return function () {
      if (called) return;
      called = true;
      callback.apply(void 0, arguments);
    };
  }
  
  var _require$codes = (__webpack_require__(530)/* .codes */ .q),
      ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
      ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
  
  function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
  }
  
  function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
  }
  
  function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on('close', function () {
      closed = true;
    });
    if (eos === undefined) eos = __webpack_require__(7423);
    eos(stream, {
      readable: reading,
      writable: writing
    }, function (err) {
      if (err) return callback(err);
      closed = true;
      callback();
    });
    var destroyed = false;
    return function (err) {
      if (closed) return;
      if (destroyed) return;
      destroyed = true; // request.destroy just do .end - .abort is what we want
  
      if (isRequest(stream)) return stream.abort();
      if (typeof stream.destroy === 'function') return stream.destroy();
      callback(err || new ERR_STREAM_DESTROYED('pipe'));
    };
  }
  
  function call(fn) {
    fn();
  }
  
  function pipe(from, to) {
    return from.pipe(to);
  }
  
  function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== 'function') return noop;
    return streams.pop();
  }
  
  function pipeline() {
    for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
      streams[_key] = arguments[_key];
    }
  
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
  
    if (streams.length < 2) {
      throw new ERR_MISSING_ARGS('streams');
    }
  
    var error;
    var destroys = streams.map(function (stream, i) {
      var reading = i < streams.length - 1;
      var writing = i > 0;
      return destroyer(stream, reading, writing, function (err) {
        if (!error) error = err;
        if (err) destroys.forEach(call);
        if (reading) return;
        destroys.forEach(call);
        callback(error);
      });
    });
    return streams.reduce(pipe);
  }
  
  module.exports = pipeline;
  
  /***/ }),
  
  /***/ 7018:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var ERR_INVALID_OPT_VALUE = (__webpack_require__(530)/* .codes.ERR_INVALID_OPT_VALUE */ .q.ERR_INVALID_OPT_VALUE);
  
  function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
  }
  
  function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
  
    if (hwm != null) {
      if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
        var name = isDuplex ? duplexKey : 'highWaterMark';
        throw new ERR_INVALID_OPT_VALUE(name, hwm);
      }
  
      return Math.floor(hwm);
    } // Default value
  
  
    return state.objectMode ? 16 : 16 * 1024;
  }
  
  module.exports = {
    getHighWaterMark: getHighWaterMark
  };
  
  /***/ }),
  
  /***/ 6407:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  module.exports = __webpack_require__(5253);
  
  /***/ }),
  
  /***/ 7124:
  /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
  
  "use strict";
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  /*<replacement>*/
  
  var Buffer = (__webpack_require__(537).Buffer);
  /*</replacement>*/
  
  
  var isEncoding = Buffer.isEncoding || function (encoding) {
    encoding = '' + encoding;
  
    switch (encoding && encoding.toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
      case 'raw':
        return true;
  
      default:
        return false;
    }
  };
  
  function _normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
  
    while (true) {
      switch (enc) {
        case 'utf8':
        case 'utf-8':
          return 'utf8';
  
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return 'utf16le';
  
        case 'latin1':
        case 'binary':
          return 'latin1';
  
        case 'base64':
        case 'ascii':
        case 'hex':
          return enc;
  
        default:
          if (retried) return; // undefined
  
          enc = ('' + enc).toLowerCase();
          retried = true;
      }
    }
  }
  
  ; // Do not cache `Buffer.isEncoding` when checking encoding names as some
  // modules monkey-patch it to support additional encodings
  
  function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
  
    if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
  } // StringDecoder provides an interface for efficiently splitting a series of
  // buffers into a series of JS strings without breaking apart multi-byte
  // characters.
  
  
  exports.s = StringDecoder;
  
  function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
  
    switch (this.encoding) {
      case 'utf16le':
        this.text = utf16Text;
        this.end = utf16End;
        nb = 4;
        break;
  
      case 'utf8':
        this.fillLast = utf8FillLast;
        nb = 4;
        break;
  
      case 'base64':
        this.text = base64Text;
        this.end = base64End;
        nb = 3;
        break;
  
      default:
        this.write = simpleWrite;
        this.end = simpleEnd;
        return;
    }
  
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
  }
  
  StringDecoder.prototype.write = function (buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
  
    if (this.lastNeed) {
      r = this.fillLast(buf);
      if (r === undefined) return '';
      i = this.lastNeed;
      this.lastNeed = 0;
    } else {
      i = 0;
    }
  
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
  };
  
  StringDecoder.prototype.end = utf8End; // Returns only complete characters in a Buffer
  
  StringDecoder.prototype.text = utf8Text; // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
  
  StringDecoder.prototype.fillLast = function (buf) {
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
  
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
  }; // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
  // continuation byte. If an invalid byte is detected, -2 is returned.
  
  
  function utf8CheckByte(_byte) {
    if (_byte <= 0x7F) return 0;else if (_byte >> 5 === 0x06) return 2;else if (_byte >> 4 === 0x0E) return 3;else if (_byte >> 3 === 0x1E) return 4;
    return _byte >> 6 === 0x02 ? -1 : -2;
  } // Checks at most 3 bytes at the end of a Buffer in order to detect an
  // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
  // needed to complete the UTF-8 character (if applicable) are returned.
  
  
  function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
  
    if (nb >= 0) {
      if (nb > 0) self.lastNeed = nb - 1;
      return nb;
    }
  
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
  
    if (nb >= 0) {
      if (nb > 0) self.lastNeed = nb - 2;
      return nb;
    }
  
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
  
    if (nb >= 0) {
      if (nb > 0) {
        if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
      }
  
      return nb;
    }
  
    return 0;
  } // Validates as many continuation bytes for a multi-byte UTF-8 character as
  // needed or are available. If we see a non-continuation byte where we expect
  // one, we "replace" the validated continuation bytes we've seen so far with
  // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
  // behavior. The continuation byte check is included three times in the case
  // where all of the continuation bytes for a character exist in the same buffer.
  // It is also done this way as a slight performance increase instead of using a
  // loop.
  
  
  function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
      self.lastNeed = 0;
      return "\uFFFD";
    }
  
    if (self.lastNeed > 1 && buf.length > 1) {
      if ((buf[1] & 0xC0) !== 0x80) {
        self.lastNeed = 1;
        return "\uFFFD";
      }
  
      if (self.lastNeed > 2 && buf.length > 2) {
        if ((buf[2] & 0xC0) !== 0x80) {
          self.lastNeed = 2;
          return "\uFFFD";
        }
      }
    }
  } // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
  
  
  function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
  
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, p, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
  
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
  } // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
  // partial character, the character's bytes are buffered until the required
  // number of bytes are available.
  
  
  function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
  } // For UTF-8, a replacement character is added when ending on a partial
  // character.
  
  
  function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + "\uFFFD";
    return r;
  } // UTF-16LE typically needs two bytes per character, but even if we have an even
  // number of bytes available, we need to check if we end on a leading/high
  // surrogate. In that case, we need to wait for the next two bytes in order to
  // decode the last character properly.
  
  
  function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
      var r = buf.toString('utf16le', i);
  
      if (r) {
        var c = r.charCodeAt(r.length - 1);
  
        if (c >= 0xD800 && c <= 0xDBFF) {
          this.lastNeed = 2;
          this.lastTotal = 4;
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
          return r.slice(0, -1);
        }
      }
  
      return r;
    }
  
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
  } // For UTF-16LE we do not explicitly append special replacement characters if we
  // end on a partial character, we simply let v8 handle that.
  
  
  function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
  
    if (this.lastNeed) {
      var end = this.lastTotal - this.lastNeed;
      return r + this.lastChar.toString('utf16le', 0, end);
    }
  
    return r;
  }
  
  function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
  
    if (n === 1) {
      this.lastChar[0] = buf[buf.length - 1];
    } else {
      this.lastChar[0] = buf[buf.length - 2];
      this.lastChar[1] = buf[buf.length - 1];
    }
  
    return buf.toString('base64', i, buf.length - n);
  }
  
  function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
  } // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
  
  
  function simpleWrite(buf) {
    return buf.toString(this.encoding);
  }
  
  function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
  }
  
  /***/ }),
  
  /***/ 9593:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  /**
   * Module exports.
   */
  module.exports = deprecate;
  /**
   * Mark that a method should not be used.
   * Returns a modified function which warns once by default.
   *
   * If `localStorage.noDeprecation = true` is set, then it is a no-op.
   *
   * If `localStorage.throwDeprecation = true` is set, then deprecated functions
   * will throw an Error when invoked.
   *
   * If `localStorage.traceDeprecation = true` is set, then deprecated functions
   * will invoke `console.trace()` instead of `console.error()`.
   *
   * @param {Function} fn - the function to deprecate
   * @param {String} msg - the string to print to the console when `fn` is invoked
   * @returns {Function} a new "deprecated" version of `fn`
   * @api public
   */
  
  function deprecate(fn, msg) {
    if (config('noDeprecation')) {
      return fn;
    }
  
    var warned = false;
  
    function deprecated() {
      if (!warned) {
        if (config('throwDeprecation')) {
          throw new Error(msg);
        } else if (config('traceDeprecation')) {
          console.trace(msg);
        } else {
          console.warn(msg);
        }
  
        warned = true;
      }
  
      return fn.apply(this, arguments);
    }
  
    return deprecated;
  }
  /**
   * Checks `localStorage` for boolean values for the given `name`.
   *
   * @param {String} name
   * @returns {Boolean}
   * @api private
   */
  
  
  function config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
      if (!__webpack_require__.g.localStorage) return false;
    } catch (_) {
      return false;
    }
  
    var val = __webpack_require__.g.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === 'true';
  }
  
  /***/ }),
  
  /***/ 5976:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  /* provided dependency */ var Buffer = __webpack_require__(5494)["Buffer"];
  module.exports = function isBuffer(arg) {
    return arg instanceof Buffer;
  };
  
  /***/ }),
  
  /***/ 4888:
  /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
  
  "use strict";
  // Currently in sync with Node.js lib/internal/util/types.js
  // https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
  
  
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  var isArgumentsObject = __webpack_require__(2441);
  
  var isGeneratorFunction = __webpack_require__(1926);
  
  var whichTypedArray = __webpack_require__(6340);
  
  var isTypedArray = __webpack_require__(7449);
  
  function uncurryThis(f) {
    return f.call.bind(f);
  }
  
  var BigIntSupported = typeof BigInt !== 'undefined';
  var SymbolSupported = typeof Symbol !== 'undefined';
  var ObjectToString = uncurryThis(Object.prototype.toString);
  var numberValue = uncurryThis(Number.prototype.valueOf);
  var stringValue = uncurryThis(String.prototype.valueOf);
  var booleanValue = uncurryThis(Boolean.prototype.valueOf);
  
  if (BigIntSupported) {
    var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
  }
  
  if (SymbolSupported) {
    var symbolValue = uncurryThis(Symbol.prototype.valueOf);
  }
  
  function checkBoxedPrimitive(value, prototypeValueOf) {
    if (_typeof(value) !== 'object') {
      return false;
    }
  
    try {
      prototypeValueOf(value);
      return true;
    } catch (e) {
      return false;
    }
  }
  
  exports.isArgumentsObject = isArgumentsObject;
  exports.isGeneratorFunction = isGeneratorFunction;
  exports.isTypedArray = isTypedArray; // Taken from here and modified for better browser support
  // https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
  
  function isPromise(input) {
    return typeof Promise !== 'undefined' && input instanceof Promise || input !== null && _typeof(input) === 'object' && typeof input.then === 'function' && typeof input["catch"] === 'function';
  }
  
  exports.isPromise = isPromise;
  
  function isArrayBufferView(value) {
    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
      return ArrayBuffer.isView(value);
    }
  
    return isTypedArray(value) || isDataView(value);
  }
  
  exports.isArrayBufferView = isArrayBufferView;
  
  function isUint8Array(value) {
    return whichTypedArray(value) === 'Uint8Array';
  }
  
  exports.isUint8Array = isUint8Array;
  
  function isUint8ClampedArray(value) {
    return whichTypedArray(value) === 'Uint8ClampedArray';
  }
  
  exports.isUint8ClampedArray = isUint8ClampedArray;
  
  function isUint16Array(value) {
    return whichTypedArray(value) === 'Uint16Array';
  }
  
  exports.isUint16Array = isUint16Array;
  
  function isUint32Array(value) {
    return whichTypedArray(value) === 'Uint32Array';
  }
  
  exports.isUint32Array = isUint32Array;
  
  function isInt8Array(value) {
    return whichTypedArray(value) === 'Int8Array';
  }
  
  exports.isInt8Array = isInt8Array;
  
  function isInt16Array(value) {
    return whichTypedArray(value) === 'Int16Array';
  }
  
  exports.isInt16Array = isInt16Array;
  
  function isInt32Array(value) {
    return whichTypedArray(value) === 'Int32Array';
  }
  
  exports.isInt32Array = isInt32Array;
  
  function isFloat32Array(value) {
    return whichTypedArray(value) === 'Float32Array';
  }
  
  exports.isFloat32Array = isFloat32Array;
  
  function isFloat64Array(value) {
    return whichTypedArray(value) === 'Float64Array';
  }
  
  exports.isFloat64Array = isFloat64Array;
  
  function isBigInt64Array(value) {
    return whichTypedArray(value) === 'BigInt64Array';
  }
  
  exports.isBigInt64Array = isBigInt64Array;
  
  function isBigUint64Array(value) {
    return whichTypedArray(value) === 'BigUint64Array';
  }
  
  exports.isBigUint64Array = isBigUint64Array;
  
  function isMapToString(value) {
    return ObjectToString(value) === '[object Map]';
  }
  
  isMapToString.working = typeof Map !== 'undefined' && isMapToString(new Map());
  
  function isMap(value) {
    if (typeof Map === 'undefined') {
      return false;
    }
  
    return isMapToString.working ? isMapToString(value) : value instanceof Map;
  }
  
  exports.isMap = isMap;
  
  function isSetToString(value) {
    return ObjectToString(value) === '[object Set]';
  }
  
  isSetToString.working = typeof Set !== 'undefined' && isSetToString(new Set());
  
  function isSet(value) {
    if (typeof Set === 'undefined') {
      return false;
    }
  
    return isSetToString.working ? isSetToString(value) : value instanceof Set;
  }
  
  exports.isSet = isSet;
  
  function isWeakMapToString(value) {
    return ObjectToString(value) === '[object WeakMap]';
  }
  
  isWeakMapToString.working = typeof WeakMap !== 'undefined' && isWeakMapToString(new WeakMap());
  
  function isWeakMap(value) {
    if (typeof WeakMap === 'undefined') {
      return false;
    }
  
    return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
  }
  
  exports.isWeakMap = isWeakMap;
  
  function isWeakSetToString(value) {
    return ObjectToString(value) === '[object WeakSet]';
  }
  
  isWeakSetToString.working = typeof WeakSet !== 'undefined' && isWeakSetToString(new WeakSet());
  
  function isWeakSet(value) {
    return isWeakSetToString(value);
  }
  
  exports.isWeakSet = isWeakSet;
  
  function isArrayBufferToString(value) {
    return ObjectToString(value) === '[object ArrayBuffer]';
  }
  
  isArrayBufferToString.working = typeof ArrayBuffer !== 'undefined' && isArrayBufferToString(new ArrayBuffer());
  
  function isArrayBuffer(value) {
    if (typeof ArrayBuffer === 'undefined') {
      return false;
    }
  
    return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
  }
  
  exports.isArrayBuffer = isArrayBuffer;
  
  function isDataViewToString(value) {
    return ObjectToString(value) === '[object DataView]';
  }
  
  isDataViewToString.working = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined' && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
  
  function isDataView(value) {
    if (typeof DataView === 'undefined') {
      return false;
    }
  
    return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
  }
  
  exports.isDataView = isDataView; // Store a copy of SharedArrayBuffer in case it's deleted elsewhere
  
  var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
  
  function isSharedArrayBufferToString(value) {
    return ObjectToString(value) === '[object SharedArrayBuffer]';
  }
  
  function isSharedArrayBuffer(value) {
    if (typeof SharedArrayBufferCopy === 'undefined') {
      return false;
    }
  
    if (typeof isSharedArrayBufferToString.working === 'undefined') {
      isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
    }
  
    return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
  }
  
  exports.isSharedArrayBuffer = isSharedArrayBuffer;
  
  function isAsyncFunction(value) {
    return ObjectToString(value) === '[object AsyncFunction]';
  }
  
  exports.isAsyncFunction = isAsyncFunction;
  
  function isMapIterator(value) {
    return ObjectToString(value) === '[object Map Iterator]';
  }
  
  exports.isMapIterator = isMapIterator;
  
  function isSetIterator(value) {
    return ObjectToString(value) === '[object Set Iterator]';
  }
  
  exports.isSetIterator = isSetIterator;
  
  function isGeneratorObject(value) {
    return ObjectToString(value) === '[object Generator]';
  }
  
  exports.isGeneratorObject = isGeneratorObject;
  
  function isWebAssemblyCompiledModule(value) {
    return ObjectToString(value) === '[object WebAssembly.Module]';
  }
  
  exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
  
  function isNumberObject(value) {
    return checkBoxedPrimitive(value, numberValue);
  }
  
  exports.isNumberObject = isNumberObject;
  
  function isStringObject(value) {
    return checkBoxedPrimitive(value, stringValue);
  }
  
  exports.isStringObject = isStringObject;
  
  function isBooleanObject(value) {
    return checkBoxedPrimitive(value, booleanValue);
  }
  
  exports.isBooleanObject = isBooleanObject;
  
  function isBigIntObject(value) {
    return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
  }
  
  exports.isBigIntObject = isBigIntObject;
  
  function isSymbolObject(value) {
    return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
  }
  
  exports.isSymbolObject = isSymbolObject;
  
  function isBoxedPrimitive(value) {
    return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
  }
  
  exports.isBoxedPrimitive = isBoxedPrimitive;
  
  function isAnyArrayBuffer(value) {
    return typeof Uint8Array !== 'undefined' && (isArrayBuffer(value) || isSharedArrayBuffer(value));
  }
  
  exports.isAnyArrayBuffer = isAnyArrayBuffer;
  ['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function (method) {
    Object.defineProperty(exports, method, {
      enumerable: false,
      value: function value() {
        throw new Error(method + ' is not supported in userland');
      }
    });
  });
  
  /***/ }),
  
  /***/ 7440:
  /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
  
  /* provided dependency */ var process = __webpack_require__(7844);
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
  
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
  
    return descriptors;
  };
  
  var formatRegExp = /%[sdj%]/g;
  
  exports.format = function (f) {
    if (!isString(f)) {
      var objects = [];
  
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }
  
      return objects.join(' ');
    }
  
    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function (x) {
      if (x === '%%') return '%';
      if (i >= len) return x;
  
      switch (x) {
        case '%s':
          return String(args[i++]);
  
        case '%d':
          return Number(args[i++]);
  
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
  
        default:
          return x;
      }
    });
  
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
  
    return str;
  }; // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  
  
  exports.deprecate = function (fn, msg) {
    if (typeof process !== 'undefined' && process.noDeprecation === true) {
      return fn;
    } // Allow for deprecating things in the process of starting up.
  
  
    if (typeof process === 'undefined') {
      return function () {
        return exports.deprecate(fn, msg).apply(this, arguments);
      };
    }
  
    var warned = false;
  
    function deprecated() {
      if (!warned) {
        if (process.throwDeprecation) {
          throw new Error(msg);
        } else if (process.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }
  
        warned = true;
      }
  
      return fn.apply(this, arguments);
    }
  
    return deprecated;
  };
  
  var debugs = {};
  var debugEnvRegex = /^$/;
  
  if (process.env.NODE_DEBUG) {
    var debugEnv = process.env.NODE_DEBUG;
    debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&').replace(/\*/g, '.*').replace(/,/g, '$|^').toUpperCase();
    debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
  }
  
  exports.debuglog = function (set) {
    set = set.toUpperCase();
  
    if (!debugs[set]) {
      if (debugEnvRegex.test(set)) {
        var pid = process.pid;
  
        debugs[set] = function () {
          var msg = exports.format.apply(exports, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function () {};
      }
    }
  
    return debugs[set];
  };
  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  
  /* legacy: obj, showHidden, depth, colors*/
  
  
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    }; // legacy...
  
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
  
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      exports._extend(ctx, opts);
    } // set default options
  
  
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }
  
  exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  
  inspect.colors = {
    'bold': [1, 22],
    'italic': [3, 23],
    'underline': [4, 24],
    'inverse': [7, 27],
    'white': [37, 39],
    'grey': [90, 39],
    'black': [30, 39],
    'blue': [34, 39],
    'cyan': [36, 39],
    'green': [32, 39],
    'magenta': [35, 39],
    'red': [31, 39],
    'yellow': [33, 39]
  }; // Don't use 'blue' not visible on cmd.exe
  
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };
  
  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];
  
    if (style) {
      return "\x1B[" + inspect.colors[style][0] + 'm' + str + "\x1B[" + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }
  
  function stylizeNoColor(str, styleType) {
    return str;
  }
  
  function arrayToHash(array) {
    var hash = {};
    array.forEach(function (val, idx) {
      hash[val] = true;
    });
    return hash;
  }
  
  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
    value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
  
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
  
      return ret;
    } // Primitive types cannot have properties
  
  
    var primitive = formatPrimitive(ctx, value);
  
    if (primitive) {
      return primitive;
    } // Look up the keys of the object.
  
  
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);
  
    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    } // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  
  
    if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    } // Some type of object without properties can be shortcutted.
  
  
    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
  
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
  
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
  
      if (isError(value)) {
        return formatError(value);
      }
    }
  
    var base = '',
        array = false,
        braces = ['{', '}']; // Make Array say that they are Array
  
    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    } // Make functions say that they are functions
  
  
    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    } // Make RegExps say that they are RegExps
  
  
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    } // Make dates with properties first say the date
  
  
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    } // Make error with message first say the error
  
  
    if (isError(value)) {
      base = ' ' + formatError(value);
    }
  
    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }
  
    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }
  
    ctx.seen.push(value);
    var output;
  
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function (key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }
  
    ctx.seen.pop();
    return reduceToSingleString(output, base, braces);
  }
  
  function formatPrimitive(ctx, value) {
    if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
  
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
  
    if (isNumber(value)) return ctx.stylize('' + value, 'number');
    if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.
  
    if (isNull(value)) return ctx.stylize('null', 'null');
  }
  
  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }
  
  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
  
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
      } else {
        output.push('');
      }
    }
  
    keys.forEach(function (key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
      }
    });
    return output;
  }
  
  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || {
      value: value[key]
    };
  
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
  
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
  
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
  
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function (line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function (line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
  
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
  
      name = JSON.stringify('' + key);
  
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }
  
    return name + ': ' + str;
  }
  
  function reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function (prev, cur) {
      numLinesEst++;
      if (cur.indexOf('\n') >= 0) numLinesEst++;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);
  
    if (length > 60) {
      return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
    }
  
    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  } // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  
  
  exports.types = __webpack_require__(4888);
  
  function isArray(ar) {
    return Array.isArray(ar);
  }
  
  exports.isArray = isArray;
  
  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  
  exports.isBoolean = isBoolean;
  
  function isNull(arg) {
    return arg === null;
  }
  
  exports.isNull = isNull;
  
  function isNullOrUndefined(arg) {
    return arg == null;
  }
  
  exports.isNullOrUndefined = isNullOrUndefined;
  
  function isNumber(arg) {
    return typeof arg === 'number';
  }
  
  exports.isNumber = isNumber;
  
  function isString(arg) {
    return typeof arg === 'string';
  }
  
  exports.isString = isString;
  
  function isSymbol(arg) {
    return _typeof(arg) === 'symbol';
  }
  
  exports.isSymbol = isSymbol;
  
  function isUndefined(arg) {
    return arg === void 0;
  }
  
  exports.isUndefined = isUndefined;
  
  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }
  
  exports.isRegExp = isRegExp;
  exports.types.isRegExp = isRegExp;
  
  function isObject(arg) {
    return _typeof(arg) === 'object' && arg !== null;
  }
  
  exports.isObject = isObject;
  
  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }
  
  exports.isDate = isDate;
  exports.types.isDate = isDate;
  
  function isError(e) {
    return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  
  exports.isError = isError;
  exports.types.isNativeError = isError;
  
  function isFunction(arg) {
    return typeof arg === 'function';
  }
  
  exports.isFunction = isFunction;
  
  function isPrimitive(arg) {
    return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || _typeof(arg) === 'symbol' || // ES6 symbol
    typeof arg === 'undefined';
  }
  
  exports.isPrimitive = isPrimitive;
  exports.isBuffer = __webpack_require__(5976);
  
  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }
  
  function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
  }
  
  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34
  
  function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
    return [d.getDate(), months[d.getMonth()], time].join(' ');
  } // log is just a thin wrapper to console.log that prepends a timestamp
  
  
  exports.log = function () {
    console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
  };
  /**
   * Inherit the prototype methods from one constructor into another.
   *
   * The Function.prototype.inherits from lang.js rewritten as a standalone
   * function (not on Function.prototype). NOTE: If this file is to be loaded
   * during bootstrapping this function needs to be rewritten using some native
   * functions as prototype setup using normal JavaScript does not work as
   * expected during bootstrapping (see mirror.js in r114903).
   *
   * @param {function} ctor Constructor function which needs to inherit the
   *     prototype.
   * @param {function} superCtor Constructor function to inherit prototype from.
   */
  
  
  exports.inherits = __webpack_require__(443);
  
  exports._extend = function (origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;
    var keys = Object.keys(add);
    var i = keys.length;
  
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
  
    return origin;
  };
  
  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  
  var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;
  
  exports.promisify = function promisify(original) {
    if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');
  
    if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
      var fn = original[kCustomPromisifiedSymbol];
  
      if (typeof fn !== 'function') {
        throw new TypeError('The "util.promisify.custom" argument must be of type Function');
      }
  
      Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true
      });
      return fn;
    }
  
    function fn() {
      var promiseResolve, promiseReject;
      var promise = new Promise(function (resolve, reject) {
        promiseResolve = resolve;
        promiseReject = reject;
      });
      var args = [];
  
      for (var i = 0; i < arguments.length; i++) {
        args.push(arguments[i]);
      }
  
      args.push(function (err, value) {
        if (err) {
          promiseReject(err);
        } else {
          promiseResolve(value);
        }
      });
  
      try {
        original.apply(this, args);
      } catch (err) {
        promiseReject(err);
      }
  
      return promise;
    }
  
    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
    if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn,
      enumerable: false,
      writable: false,
      configurable: true
    });
    return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
  };
  
  exports.promisify.custom = kCustomPromisifiedSymbol;
  
  function callbackifyOnRejected(reason, cb) {
    // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
    // Because `null` is a special error value in callbacks which means "no error
    // occurred", we error-wrap so the callback consumer can distinguish between
    // "the promise rejected with null" or "the promise fulfilled with undefined".
    if (!reason) {
      var newReason = new Error('Promise was rejected with a falsy value');
      newReason.reason = reason;
      reason = newReason;
    }
  
    return cb(reason);
  }
  
  function callbackify(original) {
    if (typeof original !== 'function') {
      throw new TypeError('The "original" argument must be of type Function');
    } // We DO NOT return the promise as it gives the user a false sense that
    // the promise is actually somehow related to the callback's execution
    // and that the callback throwing will reject the promise.
  
  
    function callbackified() {
      var args = [];
  
      for (var i = 0; i < arguments.length; i++) {
        args.push(arguments[i]);
      }
  
      var maybeCb = args.pop();
  
      if (typeof maybeCb !== 'function') {
        throw new TypeError('The last argument must be of type Function');
      }
  
      var self = this;
  
      var cb = function cb() {
        return maybeCb.apply(self, arguments);
      }; // In true node style we process the callback on `nextTick` with all the
      // implications (stack, `uncaughtException`, `async_hooks`)
  
  
      original.apply(this, args).then(function (ret) {
        process.nextTick(cb.bind(null, null, ret));
      }, function (rej) {
        process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
      });
    }
  
    Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
    Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
    return callbackified;
  }
  
  exports.callbackify = callbackify;
  
  /***/ }),
  
  /***/ 6340:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var forEach = __webpack_require__(4061);
  
  var availableTypedArrays = __webpack_require__(1353);
  
  var callBound = __webpack_require__(515);
  
  var $toString = callBound('Object.prototype.toString');
  
  var hasToStringTag = __webpack_require__(8035)();
  
  var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
  var typedArrays = availableTypedArrays();
  var $slice = callBound('String.prototype.slice');
  var toStrTags = {};
  
  var gOPD = __webpack_require__(1041);
  
  var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
  
  if (hasToStringTag && gOPD && getPrototypeOf) {
    forEach(typedArrays, function (typedArray) {
      if (typeof g[typedArray] === 'function') {
        var arr = new g[typedArray]();
  
        if (Symbol.toStringTag in arr) {
          var proto = getPrototypeOf(arr);
          var descriptor = gOPD(proto, Symbol.toStringTag);
  
          if (!descriptor) {
            var superProto = getPrototypeOf(proto);
            descriptor = gOPD(superProto, Symbol.toStringTag);
          }
  
          toStrTags[typedArray] = descriptor.get;
        }
      }
    });
  }
  
  var tryTypedArrays = function tryAllTypedArrays(value) {
    var foundName = false;
    forEach(toStrTags, function (getter, typedArray) {
      if (!foundName) {
        try {
          var name = getter.call(value);
  
          if (name === typedArray) {
            foundName = name;
          }
        } catch (e) {}
      }
    });
    return foundName;
  };
  
  var isTypedArray = __webpack_require__(7449);
  
  module.exports = function whichTypedArray(value) {
    if (!isTypedArray(value)) {
      return false;
    }
  
    if (!hasToStringTag || !(Symbol.toStringTag in value)) {
      return $slice($toString(value), 8, -1);
    }
  
    return tryTypedArrays(value);
  };
  
  /***/ }),
  
  /***/ 1365:
  /***/ (function() {
  
  /* (ignored) */
  
  /***/ }),
  
  /***/ 3144:
  /***/ (function() {
  
  /* (ignored) */
  
  /***/ }),
  
  /***/ 8486:
  /***/ (function() {
  
  /* (ignored) */
  
  /***/ }),
  
  /***/ 1353:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var possibleNames = ['BigInt64Array', 'BigUint64Array', 'Float32Array', 'Float64Array', 'Int16Array', 'Int32Array', 'Int8Array', 'Uint16Array', 'Uint32Array', 'Uint8Array', 'Uint8ClampedArray'];
  var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
  
  module.exports = function availableTypedArrays() {
    var out = [];
  
    for (var i = 0; i < possibleNames.length; i++) {
      if (typeof g[possibleNames[i]] === 'function') {
        out[out.length] = possibleNames[i];
      }
    }
  
    return out;
  };
  
  /***/ }),
  
  /***/ 1041:
  /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
  
  "use strict";
  
  
  var GetIntrinsic = __webpack_require__(9589);
  
  var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
  
  if ($gOPD) {
    try {
      $gOPD([], 'length');
    } catch (e) {
      // IE 8 has a broken gOPD
      $gOPD = null;
    }
  }
  
  module.exports = $gOPD;
  
  /***/ }),
  
  /***/ 6582:
  /***/ (function(module) {
  
  "use strict";
  module.exports = JSON.parse('{"name":"modbus-serial","version":"8.0.5","description":"A pure JavaScript implemetation of MODBUS-RTU (Serial and TCP) for NodeJS.","main":"index.js","scripts":{"test":"mocha --recursive"},"repository":{"type":"git","url":"git+https://github.com/yaacov/node-modbus-serial.git"},"keywords":["modbus","rtu","serial","port","com","arduino"],"author":"Yaacov Zamir <kobi.zamir@gmail.com>","license":"ISC","bugs":{"url":"https://github.com/yaacov/node-modbus-serial/issues"},"homepage":"https://github.com/yaacov/node-modbus-serial#readme","devDependencies":{"chai":"^4.2.0","eslint":"^6.5.1","gulp":"^4.0.2","gulp-clean":"^0.4.0","gulp-jsdoc3":"^2.0.0","mocha":"^6.2.1","mocha-eslint":"^5.0.0","mockery":"^2.1.0","pump":"^3.0.0","sinon":"^7.5.0"},"dependencies":{"debug":"^4.1.1","serialport":"^9.0.0"}}');
  
  /***/ })
  
  /******/ 	});
  /************************************************************************/
  /******/ 	// The module cache
  /******/ 	var __webpack_module_cache__ = {};
  /******/ 	
  /******/ 	// The require function
  /******/ 	function __webpack_require__(moduleId) {
  /******/ 		// Check if module is in cache
  /******/ 		var cachedModule = __webpack_module_cache__[moduleId];
  /******/ 		if (cachedModule !== undefined) {
  /******/ 			return cachedModule.exports;
  /******/ 		}
  /******/ 		// Create a new module (and put it into the cache)
  /******/ 		var module = __webpack_module_cache__[moduleId] = {
  /******/ 			id: moduleId,
  /******/ 			loaded: false,
  /******/ 			exports: {}
  /******/ 		};
  /******/ 	
  /******/ 		// Execute the module function
  /******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
  /******/ 	
  /******/ 		// Flag the module as loaded
  /******/ 		module.loaded = true;
  /******/ 	
  /******/ 		// Return the exports of the module
  /******/ 		return module.exports;
  /******/ 	}
  /******/ 	
  /************************************************************************/
  /******/ 	/* webpack/runtime/compat get default export */
  /******/ 	!function() {
  /******/ 		// getDefaultExport function for compatibility with non-harmony modules
  /******/ 		__webpack_require__.n = function(module) {
  /******/ 			var getter = module && module.__esModule ?
  /******/ 				function() { return module['default']; } :
  /******/ 				function() { return module; };
  /******/ 			__webpack_require__.d(getter, { a: getter });
  /******/ 			return getter;
  /******/ 		};
  /******/ 	}();
  /******/ 	
  /******/ 	/* webpack/runtime/define property getters */
  /******/ 	!function() {
  /******/ 		// define getter functions for harmony exports
  /******/ 		__webpack_require__.d = function(exports, definition) {
  /******/ 			for(var key in definition) {
  /******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
  /******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
  /******/ 				}
  /******/ 			}
  /******/ 		};
  /******/ 	}();
  /******/ 	
  /******/ 	/* webpack/runtime/global */
  /******/ 	!function() {
  /******/ 		__webpack_require__.g = (function() {
  /******/ 			if (typeof globalThis === 'object') return globalThis;
  /******/ 			try {
  /******/ 				return this || new Function('return this')();
  /******/ 			} catch (e) {
  /******/ 				if (typeof window === 'object') return window;
  /******/ 			}
  /******/ 		})();
  /******/ 	}();
  /******/ 	
  /******/ 	/* webpack/runtime/hasOwnProperty shorthand */
  /******/ 	!function() {
  /******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
  /******/ 	}();
  /******/ 	
  /******/ 	/* webpack/runtime/node module decorator */
  /******/ 	!function() {
  /******/ 		__webpack_require__.nmd = function(module) {
  /******/ 			module.paths = [];
  /******/ 			if (!module.children) module.children = [];
  /******/ 			return module;
  /******/ 		};
  /******/ 	}();
  /******/ 	
  /************************************************************************/
  var __webpack_exports__ = {};
  // This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
  !function() {
  // env.js
  Array.prototype.includes = function (val) {
    return this.indexOf(val) > -1;
  };
  
  Number.isInteger = Number.isInteger || function (value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
  };
  
  Reflect.construct = null;
  
  Array.prototype.values = function () {
    var k,
        a = [],
        nextIndex = 0,
        ary = this;
    k = ary.length;
  
    while (k > 0) {
      a[--k] = ary[k];
    }
  
    a.next = function () {
      return nextIndex < ary.length ? {
        value: ary[nextIndex++],
        done: false
      } : {
        done: true
      };
    };
  
    return a;
  };
  
  Array.prototype[Symbol.iterator] = Array.prototype.values;
  
  String.prototype[Symbol.iterator] = function () {
    var ary = this.split("");
    var nextIndex = 0;
    var k = ary.length;
    var a = [];
  
    while (k > 0) {
      a[--k] = ary[k];
    }
  
    a.next = function () {
      return nextIndex < ary.length ? {
        value: ary[nextIndex++],
        done: false
      } : {
        done: true
      };
    };
  
    return a;
  };
  
  Float32Array.prototype[Symbol.toStringTag] = "Float32Array";
  Float64Array.prototype[Symbol.toStringTag] = "Float64Array";
  Int16Array.prototype[Symbol.toStringTag] = "Int16Array";
  Int32Array.prototype[Symbol.toStringTag] = "Int32Array";
  Int8Array.prototype[Symbol.toStringTag] = "Int8Array";
  Uint16Array.prototype[Symbol.toStringTag] = "Uint16Array";
  Uint32Array.prototype[Symbol.toStringTag] = "Uint32Array";
  Uint8Array.prototype[Symbol.toStringTag] = "Uint8Array";
  Uint8ClampedArray.prototype[Symbol.toStringTag] = "Uint8ClampedArray";
  }();
  // This entry need to be wrapped in an IIFE because it need to be in strict mode.
  !function() {
  "use strict";
  
  
  __webpack_require__(3603);
  
  var _global = _interopRequireDefault(__webpack_require__(1110));
  
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }
  
  if (_global["default"]._babelPolyfill && typeof console !== "undefined" && console.warn) {
    console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended " + "and may have consequences if different versions of the polyfills are applied sequentially. " + "If you do need to load the polyfill more than once, use @babel/polyfill/noConflict " + "instead to bypass the warning.");
  }
  
  _global["default"]._babelPolyfill = true;
  }();
  // This entry need to be wrapped in an IIFE because it need to be in strict mode.
  !function() {
  "use strict";
  /* harmony import */ var modbus_serial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6612);
  /* harmony import */ var modbus_serial__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(modbus_serial__WEBPACK_IMPORTED_MODULE_0__);
   //@ts-ignore
  
  __webpack_require__.g.ModbusRTU = (modbus_serial__WEBPACK_IMPORTED_MODULE_0___default());
  }();
  /******/ })()
  ;